#!/usr/bin/env bash

# source helper functions
source call_bashhelper

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_subcortex

Subcortex segmentation using Nighres' MASSP-algorithm. Calls on call_nighresmassp; see that file
for more information on the required inputs.

Usage:
  spinoza_subcortex [options] <project root dir> <prob seg dir> <region> <overwrite>

Arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or none)
  -o                  overwrite existing files
  <anat folder>       folder containing the files required for MASSP. Files should end with:
                        -"*_R1.nii.gz"   > 1/T1map file
                        -"*_R2s.nii.gz"  > 1/T2* file
                        -"*_QSM.nii.gz"  > QSM file
  <output>            output folder (<subject>/[<ses->] will be appended!)

Example:
  spinoza_subcortex DIR_DATA_HOME DIR_DATA_DERIV/nighres
  spinoza_subcortex -s 001 -n 1 DIR_DATA_HOME DIR_DATA_DERIV/nighres

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

if [[ $# -lt 2 ]] ; then
  echo NOT ENOUGH ARGUMENTS SPECIFIED
  Usage >&2
  exit 1
fi

# Check for subject & session flags
while getopts s:n: argument
do
  case ${argument} in
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage >&2
  exit 1
fi

INPUT=${@:$OPTIND:1}
SKULL=${@:$OPTIND+1:1}
OUTPUT=${@:$OPTIND+2:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# Start clock
#-----------------------------------------------------------------------------

echo
echo "==================================================================================================="
printf "NEW SUBCORTEX PARCELLATION WITH NIGHRES\n"
start=`date +%s`
start_date=`date`

printf "Started at ${start_date}\n"
echo "==================================================================================================="

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  if [[ ! -z ${sub} ]]; then
    sub_name=${SUBJECT_PREFIX}${subID}
    sub_id=${subID}
  else
    sub_name=$(basename ${subID})
    sub_id=`get_id ${sub_name} ${SUBJECT_PREFIX}`
  fi

  if [[ ! -z ${ses} ]]; then
    nr=`echo ${ses} | sed -e 's/^[[:space:]]*//'`
    base_path=${sub_name}/ses-${nr}
    base=${sub_name}_ses-${nr}
  else
    base_path=${sub_name}
    base=${sub_name}
  fi

  input_dir=${INPUT}/${base_path}
  skull_dir=${SKULL}/${base_path}
  output_dir=${OUTPUT}/${base_path}/massp

  #----------------------------------------------------------------------------------------------------------------------------------------------------------
  # Running MASSP with Nighres

  massp=${output_dir}/${base}_acq-${DATA^^}_desc-massp_label.nii.gz

  if [[ ! -f ${massp} ]]; then

    echo
    echo "**************************************** Processing ${sub_name} ***************************************"

    #-----------------------------------------------------------------------------
    # Check if we can mask inputs
    mask=`find ${DIR_DATA_DERIV}/manual_masks/${base_path} -type f \( -name "*acq-${DATA^^}*" -and -name "*brainmask.nii.gz" \) 2>/dev/null`
    declare -a INPUTS=()

    echo "Should we mask inputs?"
    for i in "R1" "R2s" "QSM"; do
      fn=`find ${input_dir} -type f \( -name "*${i}.nii.gz" \) 2>/dev/null`

      j=0; for k in ${fn[@]}; do ((j++)); done; if [[ ${j} -ne 1 ]]; then echo "${sub_name}: Found more than 1 file for ${r}"; continue 2; fi

      if [[ -z ${fn} ]]; then
        echo "Could not find ${i}-file.."
        continue
      else
        # check if we can mask inputs; otherwise continue as usual
        if [[ ! -z ${mask} ]]; then
          printf " applying mask to ${i}-image; "
          out=${skull_dir}/$(basename ${fn} "_${i}.nii.gz")_desc-skullstrip_${i}.nii.gz
          fslmaths ${fn} -mas ${mask} ${out}
          use_dir=${skull_dir}
          printf "[`fslstats ${out} -R`]\n"
        else
          use_dir=${input_dir}
        fi
      fi
    done
    echo "Done"
    echo "Create `basename ${massp}`"

    if [[ ${PLACE} == "SGE" ]]; then
      job="qsub -q ${SGE_QUEUE_LONG} -N massp_${sub_id} -wd ${DIR_LOGS} ${DIR_SCRIPTS}/bin/call_nighresmassp"
    else
      job="call_nighresmassp"
    fi

    ${job} \
      -s ${sub_id} \
      -n ${nr} \
      -i ${use_dir} \
      -o ${output_dir} \
      -b ${base}_acq-${DATA^^}_desc

    if [[ $? != 0 ]]; then
      echo
      echo "---------------------------------------------------------------------------------------------------"
      echo "ERROR in `basename ${0}`: call_nighresmassp exited with non-zero status"
      exit 1
    fi

  else

    echo "${sub_name}: MASSP-label image already exists"

  fi

done

#-----------------------------------------------------------------------------
# Calculate time spent using 'let'
echo
echo "---------------------------------------------------------------------------------------------------"
end=`date +%s`
end_date=`date`
printf "Done at ${end_date}\n"

let deltatime=end-start
let hours=deltatime/3600
let minutes=(deltatime/60)%60
let seconds=deltatime%60
printf "Time spent: %d:%02d:%02d\n" ${hours} ${minutes} ${seconds}
echo "---------------------------------------------------------------------------------------------------"
