#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
source call_bashhelper
source ${DIR_SCRIPTS}/shell/spinoza_setup

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_bestvertex

wrapper for call_pycortex to calculate the best vertex and normal vector based on the minimal curva-
ture given an ROI.

this script requires input from FreeSurfer, so it won't do much if that hasn't run yet. Ideally, you
should perform FreeSurfer with the pRF-mapping in fMRIprep (module before [13]), then run this thing so
it can also take in the pRF to locate an even better vertex.

(need to update this so it takes in variable areas, now it's just set to V1)

Args:
  -o              rename existing file to numerically increasing (e.g., line_pycortex > line_pycor-
                  tex1.csv) so that a new line_pycortex.csv-file is created. Given that the original
                  file is NOT deleted, I consider this a soft-overwrite mode. You can always manual-
                  ly delete unwanted/unused files.
  --no_freeview   prevent FreeView from opening while verifying the location. ONLY do this if you
                  already know the position. Generally only used for debugging purposes.
  --grid          use pRF-estimates from grid search; default is 'iter'
  -s <subject>    subject ID as used throughout the pipeline without prefix (e.g., 001 > 001)
  -n <session>    session ID used to extract the correct pRF-parameters. Will combined with <deriva-
                  tives>/prf/ses-<session>
  -t <task>       select pRF estimates from a particular task; by default the first element of TASK_
                  SES1 in spinoza_setup
  -v <vertices>   manually specify two vertices to use instead of having the program look for it. 
                  The format is important here and should always be: "<vertex in lh>,<vertex in rh>".
                  Always try to specify two vertices; doesn't matter too much if one is not relevant
  <project root>  Path to where the subject-drectories are located; used to loop through subjects, 
                  unless the -s switch is triggered
  <derivatives>   Derivatives folder containing the output from pycortex and pRF-fitting. Looks for 
                  <derivatives>/freesurfer, <derivatives>/pycortex, and <derivatives>/prf for the 
                  surface reconstruction, pycortex-import, and pRF-data, respectively
  <ROI>           Region-of-interest to use. Should be a FreeSurfer-named label-file or a custom
                  file in the format of FreeSurfer label-file: you could for instance draw an ROI
                  in volume-space in FreeView, convert that to a label ("mri_vol2label") and insert
                  that to look for a vertex (might be useful for finding a mask representing indi-
                  vidual fingers when the motor cortex mask from FreeSurfer is to coarse. UNTESTED)

Usage:
  spinoza_bestvertex <-s sub> <-v "lh,rh"> <sourcedata> <derivatives> <ROI>

Example:
  spinoza_bestvertex $DIR_DATA_HOME $DIR_DATA_DERIV V1_exvivo.thresh
  spinoza_bestvertex -s 001 $DIR_DATA_HOME $DIR_DATA_DERIV V1_exvivo.thresh
  spinoza_bestvertex -s 001 -v "1957,8753" $DIR_DATA_HOME $DIR_DATA_DERIV V1_exvivo.thresh

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

#-----------------------------------------------------------------------------
# Deal with arguments
OW=0
FREEVIEW=1
task="${TASK_SES1[0]}"
model="gauss"
stage_flag=""
man_verts=""
roi="V1_exvivo.thresh"
OPEN_FV=""
while getopts :-:fos:v:n:m:t: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        no_freeview)
          FREEVIEW=0
          echo "Disabling Freeview (debug)"
          ;;     
        grid)
          stage_flag="--grid"
          ;;                                     
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}, did you mean \"--no_freeview\"?"
            exit 1
          fi
          ;;
      esac;;    
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;          
    v)  vert=${OPTARG}
          ;;         
    o)  OW=1
          ;;
    m)  model=${OPTARG}
          ;;           
    t)  task=${OPTARG}
          ;;               
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

# this deals with the fact that we might have flags before positional arguments
BASE=${@:$OPTIND:1}
DERIV=${@:$OPTIND+1:1}
ROI=${@:$OPTIND+2:1}

# check if we should loop through subjects or do it for 1 subject only
if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# Start clock
#-----------------------------------------------------------------------------

echo
echo "==================================================================================================="
printf "BEST VERTEX AND NORMAL VECTOR USING PYCORTEX\n"
start=`date +%s`
start_date=`date`

printf "Started at ${start_date}\n"
echo "==================================================================================================="

#-----------------------------------------------------------------------------
# Run it

for subID in ${search}; do

  # collect subject name
  if [[ ! -z ${sub} ]]; then
    sub_name=${SUBJECT_PREFIX}${subID}
    sub_id=${subID}
  else
    sub_name=$(basename ${subID})
    sub_id=`get_id ${sub_name} ${SUBJECT_PREFIX}`
  fi

  if [[ ! -z ${ses} ]]; then
    nr=`echo ${ses} | sed -e 's/^[[:space:]]*//'`
    base_path=${sub_name}/ses-${nr}
    base=${sub_name}_ses-${nr}
  else
    base_path=${sub_name}
    base=${sub_name}
  fi

  # set the paths
  fs_dir=${DERIV}/freesurfer
  cx_dir=${DERIV}/pycortex
  prf_dir=${DERIV}/prf/${base_path}

  # make the pycortex directory if it doesn't exists; the others should exists already. If not, it will complain about it below
  if [[ ! -d ${DERIV}/pycortex ]]; then
    mkdir -p ${DERIV}/pycortex
  fi

  # never really delete a line_pycortex file, but rename numerically, so that the highest number is the oldest file.
  # The file without any numbering will be the most recent one and also the one that will be used; unless otherwise
  # specified in the master script
  line_orientation_file=${DERIV}/pycortex/${sub_name}/line_pycortex.csv
  if [[ ${OW} -eq 1 ]]; then
    if [[ -f ${line_orientation_file} ]]; then
      nr=`find $(dirname ${line_orientation_file}) -type f -name "line_pycortex*" | wc -w`
      fname=${DERIV}/pycortex/${sub_name}/line_pycortex${nr}.csv
      mv ${line_orientation_file} ${fname}
    fi
  fi

  # start process
  if [[ ! -f ${line_orientation_file} ]]; then

    if [[ ! -d ${fs_dir} ]]; then
      echo "${sub_name}: No FreeSurfer directory found. Make sure to run that first"
      continue
    fi

    echo
    echo "**************************************** Processing ${sub_name} ***************************************"
    echo "Creating line_pycortex.csv file"
    
    # set the call_pycortex2 '-v' flag  if we want manually selected vertices
    if [[ ! -z ${vert} ]]; then
      man_verts="-v [${vert}]"
    fi

    # set default ROI if not specified
    if [[ -z ${ROI} ]]; then
      roi=${ROI}
    fi
    
    # use the --use-prf flag if the roi = V1. Otherwise exclude pRFs in the selecting of the vertex
    if [[ ${roi} != "V1_exvivo.thresh" ]]; then
      use_prfs=""
    else
      use_prfs="--use-prf"
      if [[ ! -d ${prf_dir} ]]; then
        echo "${sub_name}: No pRF directory found > \"${prf_dir}\""
        continue
      fi
    fi

    # set the call_pycortex2 flag for skipping FreeView
    if [[ ${FREEVIEW} -eq 0 ]]; then
      OPEN_FV="--no-freeview"
    fi

    call_targetvertex ${OPEN_FV} ${man_verts} ${stage_flag} \
      -s ${sub_name} \
      --fs ${fs_dir} \
      --cx ${cx_dir} \
      --prf ${prf_dir} \
      -r ${roi} \
      -t ${task} \
      -m ${model} \
      ${use_prfs} \
      -o ${line_orientation_file}

    if [[ $? != 0 ]]; then
      echo
      echo "---------------------------------------------------------------------------------------------------"
      echo "ERROR in `basename ${0}`: call_targetvertex exited with non-zero status"
      exit 1
    fi

  else

    echo "${sub_name}: line_pycortex.csv already present"

  fi

done

#-----------------------------------------------------------------------------
# Calculate time spent using 'let'
echo
echo "---------------------------------------------------------------------------------------------------"
end=`date +%s`
end_date=`date`
printf "Done at ${end_date}\n"

let deltatime=end-start
let hours=deltatime/3600
let minutes=(deltatime/60)%60
let seconds=deltatime%60
printf "Time spent: %d:%02d:%02d\n" ${hours} ${minutes} ${seconds}
echo "---------------------------------------------------------------------------------------------------"
