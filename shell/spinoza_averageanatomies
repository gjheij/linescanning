#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
echo
source ${DIR_SCRIPTS}/shell/spinoza_setup

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------------
spinoza_averagesanatomies

This script takes the MP2RAGE and MEMP2RAGE-derived T1-weighted images to calculate the average. This re-
sults in an image that takes advantage of the better WM/GM contrast of the MP2RAGE and the QSM-properties
of the MEMP2RAGE sequence. This will only happen if you have two elements in the ACQ variable of the setup 
script and if the DATA-variable is set to "AVERAGE"

Usage:
  spinoza_averagesanatomies [options] <anat folder> <output folder>

Arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or none)
  -o                  overwrite existing files
  <anat directory>    directory containing the files to be registered
  <output>            path to directory where registration file/outputs should be stored

Example:
  spinoza_averagesanatomies DIR_DATA_DERIV DIR_DATA_DERIV
  spinoza_averagesanatomies -s 001 -n 1 DIR_DATA_DERIV DIR_DATA_DERIV

---------------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

# Check for subject & session flags
while getopts s:n: argument
do
  case ${argument} in
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${SOURCEDATA}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# Start clock
#-----------------------------------------------------------------------------

echo "==================================================================================================="
printf "AVERAGE `for ii in ${ACQ[@]}; do echo $ii; done` images\n"
start=`date +%s`
start_date=`date`

printf "Started at ${start_date}\n"
echo "==================================================================================================="

#-----------------------------------------------------------------------------
# Run it

for subID in ${search}; do

  # collect subject name
  if [[ ! -z ${sub} ]]; then
    sub_name=${SUBJECT_PREFIX}${subID}
  else
    sub_name=$(basename ${subID})
  fi

  if [[ ! -z ${ses} ]]; then
    nr=`echo ${ses} | sed -e 's/^[[:space:]]*//'`
    base_path=${sub_name}/ses-${nr}
    base=${sub_name}_ses-${nr}
  else
    base_path=${sub_name}
    base=${sub_name}
  fi

  input_dir=${INPUT}/${base_path}
  output_dir=${OUTPUT}/${base_path}

  if [ ! -d ${input_dir} ]; then
    echo "${sub_name}: could not find input directory \"${input_dir}\""
    continue
  fi

  #-------------------------------------------------------------------------------------------------
  # calculate the averages of UNI T1, INV1, and INV2
  
  echo
  echo "**************************************** Processing ${sub_name} ***************************************"

  if [[ ! -d ${output_dir} ]]; then
    mkdir -p ${output_dir}
  fi

  if [[ ${DATA^^} != "AVERAGE" ]]; then
    echo "${DATA^^} != \"AVERAGE\".. Check spinoza_setup first.."
    exit 1
  fi

  declare -a OUTPUTS=(T1w T1map)
  declare -a MAX=("4095" "5050")

  for i in ${OUTPUTS[@]}; do

    out=${output_dir}/${base}_acq-${DATA}_${i}.nii.gz

    if [[ ! -f ${out} ]]; then

      in_1=`find "${input_dir}" -type f \( -name "*acq-${ACQ[0]^^}_*" -and -name "*${i}.nii.gz" \) 2>/dev/null`
      in_2=`find "${input_dir}" -type f \( -name "*space-${ACQ[0]^^}*" -and -name "*acq-${ACQ[1]^^}_*" -and -name "*${i}.nii.gz" \) 2>/dev/null`

      if [[ ! -z ${in_1} && ! -z ${in_2} ]]; then

        echo "Calculate mean over `basename ${in_1}` and `basename ${in_2}`"
        call_calculatemean ${in_1} ${in_2} ${out}

      else
        if [[ -z ${in_1} ]]; then
          echo "ERROR in `basename ${0}`: Couldn't find ANTs registered ${i} image"
        elif [[ -z ${in_2} ]]; then
          echo "ERROR in `basename ${0}`: Couldn't pymp2rage ${i} image"
        else
          echo "ERROR in `basename ${0}`: Missing both ANTs registered and pymp2rage image"
        fi
        continue
      fi

      if [[ ${i} == "T1w" ]] || [[ ${i} == "T1map" ]]; then

        # check if registration induced NANs
        NAN=`fslstats ${out} -R | awk '{print $1}'`
        if [[ ${NAN} == "-nan" ]]; then
          echo "Found NaNs, replacing these values with zeroes"
          fslmaths ${out} -nan ${out}
        fi

        # check if registration induced NANs
        ZERO=`fslstats ${out} -R | awk '{print $1}'`
        if [[ ${ZERO} != "0" ]]; then

          if [[ ${i} == "T1w" ]]; then
            max=${MAX[0]}
          elif [[ ${i} == "T1map" ]]; then
            max=${MAX[1]}
          fi

          echo "Rescaling ${i}-image to [0, ${max}] with ImageMath"
          call_rescale ${out} 0 ${max}

        fi
      fi
    else
      echo "`basename ${out}` already present"
    fi

    # check if we can copy SPM mask from MP2RAGE
    spm_mask=`find ${input_dir} -type f \( -name "*acq-MP2RAGE_*" -and -name "*desc-spm_mask.nii.gz" \) 2>/dev/null`

  done

  # copy spm mask
  if [ ! -z ${spm_mask} ]; then
  
    # sort so we can verify there's only 1 file
    IFS=$'\n' spm_imgs=($(sort <<<"${spm_mask[*]}"))
    unset IFS

    # take first image regardless..
    spm=${spm_imgs[0]}

    # rename
    echo "Creating ${base}_acq-${DATA}_desc-spm-mask.nii.gz"
    cp ${spm} ${output_dir}/${base}_acq-${DATA}_desc-spm_mask.nii.gz 2>/dev/null
  fi

done

#-----------------------------------------------------------------------------
# Calculate time spent using 'let'
echo
echo "---------------------------------------------------------------------------------------------------"
end=`date +%s`
end_date=`date`
printf "Done at ${end_date}\n"

let deltatime=end-start
let hours=deltatime/3600
let minutes=(deltatime/60)%60
let seconds=deltatime%60
printf "Time spent: %d:%02d:%02d\n" ${hours} ${minutes} ${seconds}
echo "---------------------------------------------------------------------------------------------------"
