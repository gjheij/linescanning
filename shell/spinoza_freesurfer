#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
call_loadsetup
source call_bashhelper

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_freesurfer

Surface parcellation with FreeSurfer. We only need to specify where to look for the T1w-image which
stage we should run (default is 'all'), and where to look for a T2w-image if there is one.

Usage:
  spinoza_freesurfer [options] <directory with anats> <stage> <T2-directory>

Flagged arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or n)
  -e <start>          start stage (maps to '-r' from 'call_freesurfer'). Must be one of 'pial', 
                      'cp', or 'wm' if <freesurfer stage> != 'all'
  -o|--ow             overwrite existing files
  -x <file>           use expert file
  --force_exec        Force execution even though directory exists already
  --local             Force local processing even though cluster is available
  --no_highres        Turn of highres mode by setting '-highres' flag empty
  --no_t2             Do not reuse T2 with autorecon3. Must be used in concert with '-e' and
                      '-r'. By default, we'll re-use the T2 if present. Same flag should be 
                      used for not re-using FLAIR images  
  --sge               Submit the script to a cluster using a template script
  --xopts-use         maps to '-xopts-use' for existing expert option file; use existing file
  --xopts-clean       maps to '-xopts-clean' for existing expert option file; delete existing file
  --xopts-overwrite   maps to '-xopts-overwrite' for existing expert option file; use new file

Positional arguments:
  <anat folder>       folder containing the T1w-file. In 'master', we'll look through various fol-
                      ders. In order of priority:
                        -'<derivatives>/masked_${DATA,,}'
                        -'<derivatives>/denoised'
                        -'<derivatives>/pymp2rage'
                        -'DIR_DATA_HOME'
                      this ensures a level of agnosticity about anatomical preprocessing. I.e., you
                      don't have to run the full pipeline if you don't want to.
  <freesurfer stage>  stage to run for FreeSurfer. By default 'all'
  <T2-folder>         if specified, we'll look for a '*T2w.nii.gz' or '*FLAIR.nii.gz' image to add 
                      to the FreeSurfer reconstruction.

General approach for segmentation:
  - Run autorecon1:   call_freesurfer -s <subj ID> -t <T1> -p <T2> -r 1)      ~an hour
  - Fix skullstrip:   call_freesurfer -s <subj ID> -o gcut                    ~10 minutes
  - Run autorecon2:   call_freesurfer -s <subj ID> -r 2                       ~few hours
  - Fix errors with:
      - norm; then run call_freesurfer -s ${SUBJECT_PREFIX}001 -r 23 -e cp    ~few hours
      - pia;  then run call_freesurfer -s ${SUBJECT_PREFIX}001 -r 23 -e pial  ~few hours

You can specify in which directory to look for anatomical scans in the first argument. Usually,
this is one of the following options: DIR_DATA_HOME if we should use the T1w in the project/
${SUBJECT_PREFIX}xxx/anat directory, or DIR_DATA_DERIV/pymp2rage to use T1w-images derived from 
pymp2rage, or DIR_DATA_DERIV/masked_mp2rage to use T1w-images where the dura and sagittal sinus 
are masked out (should be default!). In any case, it assumes that the file is in YOURINPUT/
${SUBJECT_PREFIX}xxx/ses-1/. If the input is equal to the DIR_DATA_HOME variable, this will 
be recognize and 'anat' will be appended to YOURINPUT/${SUBJECT_PREFIX}xxx/ses-1/anat.

You can also specify a directory where the T2-weighted image is located. Do this the same way as de-
scribed above. To you path, ${SUBJECT_PREFIX}xxx/ses-x will be appended if the input path is not 
equal to DIR_DATA_HOME. Again, if it is, ${SUBJECT_PREFIX}xxx/ses-x/anat will be appended as well.

Example:
  spinoza_freesurfer DIR_DATA_DERIV/masked_mp2rage all DIR_DATA_HOME
  spinoza_freesurfer -s 001 -n 1 DIR_DATA_ANAT all DIR_DATA_HOME

Notes:
  When an expert options is passed, it will be copied to scripts/expert-options. Future calls to 
  recon-all, the user MUST explicitly specify how to treat this file. Options are (1) use the file 
  ('--xopts-use'), or (2) delete it ('--xopts-clean'). If this file exsts and the user specifies 
  another expert options file, then the user must also specify '--xopts-overwrite'.

---------------------------------------------------------------------------------------------------

USAGE
}

# Check for subject & session flags
OW=0
freeview_flag=""
highres_flag=""
sge_flag=""
expert_flag=""
force_flag=""
use_t2_flag=""
allowed_edits=("cp" "wm" "pial" "aseg")
while getopts :-:os:n:x:e: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in     
        freeview)
          FREEVIEW=1
          ;;            
        force_exec)
          force_flag="--force_exec"
          ;;          
        sge)
          sge_flag="--sge"
          ;;        
        local)
          sge_flag="--local"
          ;;   
        ow)
          OW=1
          ;;          
        no_highres)
          highres_flag="--no_highres"
          ;;  
        no_t2)
          use_t2_flag="--no_t2"
          ;;                       
        xopts-use)
          XOPTS_="--xopts-use"
          ;;             
        xopts-clean)
          XOPTS_="--xopts-clean"
          ;;               
        xopts-overwrite)
          XOPTS_="--xopts-overwrite"
          ;;                                                                                     
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            Usage >&2
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;
      esac;;   
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    o)  OW=1
          ;; 
    x)  EXPERT_FILE=${OPTARG}
          ;;  
    e)  start_flag="-e ${OPTARG}"
          ;;                     
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

T1=${@:$OPTIND:1}
STAGE=${@:$OPTIND+1:1}
T2=${@:$OPTIND+2:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${T1}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

# check if we got expert file
if [[ ! -z ${EXPERT_FILE} ]]; then
  if [[ ! -f ${EXPERT_FILE} ]]; then
    echo "ERROR in `basename ${0}`: specified expert file \"${EXPERT_FILE}\" does not exist"
    exit 1
  fi
  expert_flag="-x ${EXPERT_FILE}"
else
  XOPTS_=""
  expert_flag=""
fi

#-----------------------------------------------------------------------------
# Start clock
#-----------------------------------------------------------------------------

echo
echo "==================================================================================================="
printf "SURFACE PARCELLATION WITH FREESURFER\n"
start=`date +%s`
start_date=`date`

printf "Started at ${start_date}\n"
echo "==================================================================================================="

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  if [[ ! -z ${sub} ]]; then
    sub_name=${SUBJECT_PREFIX}${subID}
    sub_id=${subID}
  else
    sub_name=$(basename ${subID})
    sub_id=`get_id ${sub_name} ${SUBJECT_PREFIX}`
  fi

  if [[ ! -z ${ses} ]]; then
    nr=`echo ${ses} | sed -e 's/^[[:space:]]*//'`
    base_path=${sub_name}/ses-${nr}
    base=${sub_name}_ses-${nr}
  else
    base_path=${sub_name}
    base=${sub_name}
  fi

  # check number of T1w-files
  T1_DIR=${T1}/${base_path}
  input_t1w=`find "${T1_DIR}" -type f \( -name "${sub_name}*" -and -name "*${DATA^^}*" -and -name "*T1w.nii.gz" \) 2>/dev/null`

  ct=0; for ii in ${input_t1w[@]}; do ((ct++)); done
  if [ ${ct} -gt 1 ]; then
    echo 
    echo "---------------------------------------------------------------------------------------------------"
    echo "ERROR in `basename ${0}`: Found multiple T1w-files (${ct})"
    for ii in ${input_t1w[@]}; do echo " ${ii}"; done
    echo "Rename or delete one and rerun"
    echo 
    exit 1
  fi

  # check if we should delete subject folder (rather dangerous, really..)
  if [[ ${OW} -eq 1 ]]; then
    rm -r ${SUBJECTS_DIR}/${sub_name} 2>/dev/null
  fi

  # run if input exists
  if [[ ! -z ${input_t1w} ]]; then

    # execute either when there's no directory, or when there's no files in /surf
    execute=0

    if [[ ${STAGE} != "all" ]]; then
      execute=1
    else
      if [[ -d ${SUBJECTS_DIR}/${sub_name} ]]; then
        if [[ ! -d ${SUBJECTS_DIR}/${sub_name}/surf ]]; then
          execute=1
        else
        nr_files=`ls -l ${SUBJECTS_DIR}/${sub_name}/surf | grep "total" | cut -d' ' -f2`
          if [ ${nr_files} -eq 0 ]; then
            execute=1
          fi
        fi

        if [ ! -z ${force_flag} ]; then
          execute=1
        fi        
      else
        execute=1
      fi
    fi

    if [[ ${execute} -eq 1 ]]; then

      echo
      echo "**************************************** Processing ${sub_name} ***************************************"
      echo "Running FreeSurfer on `basename ${input_t1w}` with autorecon \"${STAGE}\""

      # LOOK FOR T2-/FLAIR WEIGHTED IMAGE
      if [ ! -z ${T2} ]; then
        if [[ -d ${T2}/${base_path} ]]; then

          input_t2w=`find "${T2}/${base_path}" -type f \( -name "*FLAIR*" -and -name "*.nii.gz" -or -name "*T2w*" -and -name "*.nii.gz" \) 2>/dev/null`
          if [[ ! -z ${input_t2w} ]]; then

            # throw error if multiple files are found
            ct=0; for ii in ${input_t2w[@]}; do ((ct++)); done
            if [ ${ct} -gt 1 ]; then
              echo 
              echo "---------------------------------------------------------------------------------------------------"
              echo "ERROR in `basename ${0}`: Found multiple T2w-files (${ct})"
              for ii in ${input_t2w[@]}; do echo " ${ii}"; done
              echo "Rename or delete one and rerun"
              echo 
              exit 1
            elif [ ${ct} -eq 1 ]; then
              echo "Including T2w: \"${input_t2w}\""
              T2_flag="-p ${input_t2w}"
            else
              echo "ERROR in `basename ${0}`: not sure what went wrong.."
              exit 1
            fi

          else
            T2_flag=""
          fi
        else
          echo "ERROR in `basename ${0}`: T2-path was given, but \"${T2}/${base_path}\" does not exist"
        fi
      else
        T2_flag=""
      fi

      # cmd
      if [[ ${STAGE} != "all" ]]; then
        if [[ -z ${start_flag} ]]; then
          echo "ERROR in `basename ${0}`: recon-all stages \"${STAGE}\" is/are requested, but it's not specified as of which stage to start autorecon. Please specify the \"-e\" flag with one of \"${allowed_edits[@]}\" as input"
          exit 1
        fi
      fi

      call_freesurfer \
        -s ${sub_name} \
        -t ${input_t1w} \
        -r ${STAGE} \
        ${start_flag} \
        ${T2_flag} \
        ${highres_flag} \
        ${expert_flag} \
        ${XOPTS_} \
        ${sge_flag} \
        ${use_t2_flag} \
        ${force_flag} \

    else
      echo "${sub_name}: FreeSurfer already ran"
    fi

  else
    echo "No T1-weighted image found in \"${T1_DIR}\""
    continue
  fi

done

#-----------------------------------------------------------------------------
# Calculate time spent using 'let'
echo
echo "---------------------------------------------------------------------------------------------------"
end=`date +%s`
end_date=`date`
printf "Done at ${end_date}\n"

let deltatime=end-start
let hours=deltatime/3600
let minutes=(deltatime/60)%60
let seconds=deltatime%60
printf "Time spent: %d:%02d:%02d\n" ${hours} ${minutes} ${seconds}
echo "---------------------------------------------------------------------------------------------------"
