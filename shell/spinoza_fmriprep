#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
call_loadsetup
source ${DIR_SCRIPTS}/shell/spinoza_setup

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_fmriprep

preprocess structural and functional data with fMRIprep. It uses the singularity container in pro-
grams/packages/fmriprep/containers_bids-fmriprep--20.2.0.simg (which is symlink'ed to /packages/sin-
gularity_containers/containers_bids-fmriprep--20.2.0.simg). You can also specify your own singu-
larity image.

If you have a T2-weighted image as well, you can specify the root directory to that image. If it
exists, we will copy it to the directory where the T1-weighted is located (<input directory>) so
that it is included by fMRIprep.

Usage:
  spinoza_fmriprep [options] <anat dir> <derivatives folder> <mode> <T2 dir>

Arguments:
  -l              don't submit to SGE, run locally
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none)
  -c <config>     configuration file as specified in /misc/fmriprep_config?.json
  -f <func dir>   directory containing functional data; used after running FreeSurfer outside of
                  fMRIprep <optional>
  -r <level>      remove surface_recon_wf '-r surf' to project functional data to new surface; used 
                  after repeatedly enhancing the anatomical segmentation before injecting the functio-
                  nal data. Use '-r all' if the entire workflow folder needs to be removed <optional>
  -t <task>       By default, the pipeline is setup to run fMRIPrep with '--anat-only'. You can in-
                  ject functional data with the '-t' flag; if you want ALL your tasks to be included,
                  use '-t func'. If you have a specific task that needs to be processed (in case ano-
                  ther task is already done), use '-t <task_id>'
  <anat dir>      directory containing the anatomical data. Can also be the regular project root
                  folder if you want fMRIprep do the surface reconstruction
  <derivatives>   output folder for fMRIprep; generally this will be <project>/derivatives
  <mode>          run anatomical workflow only with 'anat', or everything with 'func'
  <T2 dir>        if you have a T2w-file, but that is not in <anat dir> (because you preprocessed
                  the T1w-file, but not the T2w-file), you can specify the directory where it lives
                  here. Generally this will be the same as <func dir>

Example:
  spinoza_fmriprep <project>/derivatives/masked_mp2rage <project>/derivatives anat
  spinoza_fmriprep -s 001 -n 1 -f <project> <project>/derivatives/masked_mp2rage <project>/deri-
                   vatives anat

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

# Check for subject & session flags
bbr_flag=""
warp_only=""
run_local=0
while getopts :-:ls:r:n:f:m:c: argument
do
case ${argument} in
    -)
      case "${OPTARG}" in
        no_bbr)
          bbr_flag="--no_bbr"
          ;;          
        warp_only)
          warp_only="--warp_only"
          ;;                
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}" >&2
          fi
          ;;
      esac;;  
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    f)  func_dir=${OPTARG}
          ;;
    m)  mode=${OPTARG}
          ;;
    c)  conf=${OPTARG}
          ;;
    r)  remove_wf=${OPTARG}
          ;;
    l)  run_local=1
          ;;          
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage >&2
  exit 1
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}
T2=${@:$OPTIND+2:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

if [[ -z ${mode} ]]; then
  MODE="anat"
else
  MODE=${mode}
fi

#-----------------------------------------------------------------------------
# Start clock
#-----------------------------------------------------------------------------

echo
echo "==================================================================================================="
printf "PREPROCESSING WITH FMRIPREP\n"
start=`date +%s`
start_date=`date`

printf "Started at ${start_date}\n"
echo "==================================================================================================="

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  if [[ ! -z ${sub} ]]; then
    sub_name=${PREFIX}${subID}
    sub_id=${subID}
  else
    sub_name=$(basename ${subID})
    sub_id=`get_id ${sub_name} ${PREFIX}`
  fi

  if [[ ! -z ${ses} ]]; then
    nr=`echo ${ses} | sed -e 's/^[[:space:]]*//'`
    base_path=${sub_name}/ses-${nr}
    base=${sub_name}_ses-${nr}
  else
    base_path=${sub_name}
    base=${sub_name}
  fi

  # define input
  input_dir=${INPUT}/${base_path}
  if [[ ${MODE} == "anat" ]]; then
    anat=`find "${input_dir}/anat" -type f \( -name "*T1w*" -and -name "*acq-${DATA^^}*" -and -name "*.nii.gz" \) 2>/dev/null`
    if [[ -z ${anat} ]]; then
      echo " ${sub_name}; missing anatomical data"
      continue
    fi
    func_txt="Only including anatomical data"
  else
    func_txt="Including functional data"
    if [[ ! -z ${func_dir} ]]; then
      # separate directory with functional data
      func=`find "${func_dir}/${base_path}/func" -type f \( -name "*bold.nii.gz" \) 2>/dev/null`
      INPUT=${func_dir}

      # check if there's a T1w in the 'anat' folder; even though you've already ran it, fMRIprep requires T1w-files
      anat=`find "${func_dir}/${base_path}/anat" -type f \( -name "*T1w.nii.gz" \) 2>/dev/null`
      if [[ -z ${anat} ]]; then
        diff_anat=`find "${input_dir}/anat" -type f \( -name "*T1w.nii.gz" \) 2>/dev/null`
        if [ ! -z ${diff_anat} ]; then
          cp ${diff_anat} ${func_dir}/${base_path}/anat
        else
          # last option: look in pymp2rage-folder
          diff_anat=`find "${DIR_DATA_DERIV}/pymp2rage/${base_path}" -type f \( -name "*T1w.nii.gz" \) 2>/dev/null`
          if [ ! -z ${diff_anat} ]; then
            cp ${diff_anat} ${func_dir}/${base_path}/anat
          else
            echo "ERROR in `basename ${0}`: Could not find T1w-file in \"${input_dir}/anat\" and \"${DIR_DATA_DERIV}/pymp2rage/${base_path}\". Please copy your FreeSurfer input to \"${func_dir}/${base_path}/anat\" as a T1w-file needs to be present. If you've already ran the anatomical workflows, the file will be ignored. Nevertheless, it's needs to be present for fMRIprep to initiate"
            exit 1
          fi
        fi
      fi
    else
      # same directory for functional and anatomical data
      func=`find "${input_dir}/func" -type f \( -name "*bold.nii.gz" \) 2>/dev/null`
      anat=`find "${input_dir}/anat" -type f \( -name "*T1w*" -and -name "*acq-${DATA^^}*" -and -name "*.nii.gz" \) 2>/dev/null`
    fi

    if [[ -z ${func} ]]; then
      echo "${sub_name}; missing functional data"
      continue
    fi
  fi

  echo
  echo "**************************************** Processing ${sub_name} ***************************************"
  echo ${func_txt}
  workdir=${PATH_HOME}/fmriprep/${PROJECT}

  # check existence working directory and other general settings
  if [[ ! -d ${workdir} ]]; then
    mkdir -p ${workdir}
  fi

  # check if we need to delete stuff
  if [[ ! -z ${remove_wf} ]]; then
    if [[ ${remove_wf} == "all" ]]; then
      txt="Removing single_subject_${subID}_wf"
      rm_dir=${workdir}/fmriprep_wf/single_subject_${subID}_wf
    elif [[ ${remove_wf} == "surf" ]]; then
      txt="Removing surface_recon_wf"
      rm_dir=${workdir}/fmriprep_wf/single_subject_${subID}_wf/anat_preproc_wf/surface_recon_wf
    else
      echo "ERROR in `basename ${0}`: invalid option \"${remove_wf}\". Must be \"surf\" or \"all\""
      exit 1
    fi

    if [ -d ${rm_dir} ]; then
      echo ${txt}
      rm -r ${rm_dir}
    fi
  fi

  # check configuration file
  if [[ -z ${conf} ]]; then
    confFile=""
  else
    echo "Using config file: ${conf}"
    confFile="-x ${conf}"
  fi

  if [[ ! -z ${MODE} ]]; then
    if [[ ${MODE} != "anat" ]] && [[ ${MODE} != "func" ]]; then
      task_id="-t ${MODE}"
    else
      task_id=""
    fi
  else
    task_id=""
  fi

  # decide the job type (depending on SGE, can be either qsub or call_fmriprep; for anything else it's call_fmriprep)
  if [[ ${PLACE} == "SGE" ]]; then
    if [[ ${run_local} -eq 1 ]]; then
      job="call_fmriprep"
    else
      job="qsub -q ${SGE_QUEUE_LONG} -pe smp 1 -N fprep_${sub_id} -o ${workdir} ${DIR_SCRIPTS}/bin/call_fmriprep"
    fi 
  else
    job="call_fmriprep"
  fi

  # execute the command
  ${job} \
    -s ${sub_id} \
    -m ${MODE} \
    -b ${FPREP_BINDING} \
    -r ${INPUT} \
    -d ${OUTPUT} \
    -w ${workdir} \
    ${confFile} \
    ${task_id} \
    ${bbr_flag} \
    ${warp_only}

  if [[ $? != 0 ]]; then
    echo "ERROR in `basename ${0}`: call_fmriprep did not execute cleanly"
    exit 1
  fi

done

#-----------------------------------------------------------------------------
# Calculate time spent using 'let'
echo
echo "---------------------------------------------------------------------------------------------------"
end=`date +%s`
end_date=`date`
printf "Done at ${end_date}\n"

let deltatime=end-start
let hours=deltatime/3600
let minutes=(deltatime/60)%60
let seconds=deltatime%60
printf "Time spent: %d:%02d:%02d\n" ${hours} ${minutes} ${seconds}
echo "---------------------------------------------------------------------------------------------------"
