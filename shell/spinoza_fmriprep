#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
call_loadsetup
source ${SETUP_FILE}

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_fmriprep

preprocess structural and functional data with fMRIprep. It uses the singularity container in pro-
grams/packages/fmriprep/containers_bids-fmriprep--20.2.0.simg (which is symlink'ed to /packages/sin-
gularity_containers/containers_bids-fmriprep--20.2.0.simg). You can also specify your own singu-
larity image.

If you have a T2-weighted image as well, you can specify the root directory to that image. If it
exists, we will copy it to the directory where the T1-weighted is located (<input directory>) so
that it is included by fMRIprep.

Usage:
  spinoza_fmriprep [options] <anat dir> <derivatives folder> <mode> <T2 dir>

Arguments:
  --local         don't submit to SGE, run locally
  --no_bbr        maps to '--force-no-bbr' in call_fmriprep
  --no_boldref    don't create new boldref images (mean over time) after fMRIprep has finished.
  --warp_only     skips fMRIPrep, but creates new boldref images (if '--no_boldref' is not specified) 
                  and copies the bold-to-T1w warps to the subject's output folder
  --remove_wf     remove full single_subject workflow folder. Use \"--remove_surf_wf\"to specifically 
                  remove the surface reconstruction folder when you have new FreeSurfer output that 
                  fMRIPrep needs to use, or "--ow" to remove all folders within single_subj workflow
                  with "run-"
  --remove_surf_wf Remove surface reconstruction workflow folder; refreshes the surfaces used for re-
                  gistration and transformation
  --ow            only removes folders within single_subj workflow with "run-". If specific runs are 
                  requested with '-r', only these folders will be removed
  --clean         remove the single-subject workflow folder completely. This saves storage, but comes
                  at the price that it re-runs EVERYTHING if you restart the process.
  --func          same as '-t func'
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none); used to check for T1w-image. fMRIprep will do all
                  sessions it finds in the project root regardless of this argument. Use the bids fil-
                  ter file ('-k' flag) if you want fMRIPrep to to specific sessions/tasks/acquisitions.
  -j <cpus>       number of cores to use (default is 1)
  -u <config>     configuration file as specified in /misc/fmriprep_config?.json
  -f <func dir>   directory containing functional data; used after running FreeSurfer outside of
                  fMRIprep <optional>
  -r <runs>       (re-)run specific runs by removing existing single_subject_<subj_id>_wf/func_preproc
                  _ses_1_*_run_<run_id>_*_wf folders. This should re-use the existing files for other 
                  runs, but re-run completely the requested runs
  -t <task>       By default, the pipeline is setup to run fMRIPrep with '--anat-only'. You can in-
                  ject functional data with the '-t' flag; if you want ALL your tasks to be included,
                  use '-t func'. If you have a specific task that needs to be processed (in case ano-
                  ther task is already done), use '-t <task_id>'.
  -k <kwargs>     specify a file with additional arguments, similar to FreeSurfer's expert options.
                  See linescanning/misc/fprep_options for an example. Please make sure you have a 
                  final empty white space at the end of the file, otherwise the parser gets confu-
                  sed. For VSCode: https://stackoverflow.com/a/44704969. If you run with master, the 
                  '-u' flag maps onto this
  -q <queue>      submit jobs to a specific queue. Defaults to SGE_QUEUE_LONG in spinoza_setup
  -a <keep runs>  if you're running fMRIprep with MNI152* as output space, you're creating massive
                  files; oftentimes, you're mostly interested in the registration matrices, so by
                  default I'll remove the output nifti's so that the folder is not clogged. With 
                  this argument you can specify which runs to keep. Again, if not specified, all
                  nifti-files with space-MNI152*.nii.gz will be removed. The transformation matri-
                  ces will be left alone. Use '-a all' to keep all runs (not recommended..)
  <anat dir>      directory containing the anatomical data. Can also be the regular project root
                  folder if you want fMRIprep do the surface reconstruction
  <derivatives>   output folder for fMRIprep; generally this will be <project>/derivatives
  <mode>          run anatomical workflow only with 'anat', or everything with 'func'
  <T2 dir>        if you have a T2w-file, but that is not in <anat dir> (because you preprocessed
                  the T1w-file, but not the T2w-file), you can specify the directory where it lives
                  here. Generally this will be the same as <func dir>

Example:
  spinoza_fmriprep <project>/derivatives/masked_mp2rage <project>/derivatives anat
  spinoza_fmriprep -s 001 -n 1 -f <project> <project>/derivatives/masked_mp2rage <project>/deri-
                   vatives anat

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

# Check for subject & session flags
bbr_flag=""
warp_only=""
run_local=0
kwargs_file=""
boldref_flag=""
remove_wf=0
remove_surf_wf=0
OW=0
n_cpu=1
clean_wd=""
while getopts :-:ols:r:n:f:m:j:k:q:u:a: argument
do
case ${argument} in
    -)
      case "${OPTARG}" in
        no_bbr)
          bbr_flag="--no_bbr"
          ;;          
        warp_only)
          warp_only="--warp_only"
          ;;   
        local)
          run_local=1
          ;;   
        no_boldref)
          boldref_flag="--no_boldref"
          ;;   
        remove_wf)
          remove_wf=1
          ;;                
        remove_surf_wf)
          remove_surf_wf=1
          ;;            
        func)
          remove_surf_wf=1
          ;;      
        ow)
          OW=1
          ;;       
        clean)
          clean_wd="--clean"
          ;;                                                           
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}" >&2
          fi
          ;;
      esac;;  
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    f)  func_dir=${OPTARG}
          ;;
    m)  mode=${OPTARG}
          ;;
    u)  conf=${OPTARG}
          ;;
    j)  n_cpu=${OPTARG}
          ;;          
    k)  kwargs_file="-k ${OPTARG}"
          ;;       
    r)  runs=${OPTARG}
          ;;      
    q)  SGE_QUEUE=${OPTARG}
          ;;                   
    o)  OW=1
          ;;
    a)  keep_runs="-a ${OPTARG}"
          ;;          
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage >&2
  exit 1
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}
T2=${@:$OPTIND+2:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

if [[ -z ${mode} ]]; then
  MODE="anat"
else
  MODE=${mode}
fi

if [[ ! -z ${runs} ]]; then
  # read specified subjects into array
  IFS=', ' read -r -a n_runs <<< "${runs}"
  unset IFS
fi

#-----------------------------------------------------------------------------
# Start clock
#-----------------------------------------------------------------------------

echo
echo "==================================================================================================="
printf "PREPROCESSING WITH FMRIPREP\n"
start=`date +%s`
start_date=`date`

printf "Started at ${start_date}\n"
echo "==================================================================================================="

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  if [[ ! -z ${sub} ]]; then
    sub_name=${SUBJECT_PREFIX}${subID}
    sub_id=${subID}
  else
    sub_name=$(basename ${subID})
    sub_id=`get_id ${sub_name} ${SUBJECT_PREFIX}`
  fi

  if [[ ! -z ${ses} ]]; then
    nr=`echo ${ses} | sed -e 's/^[[:space:]]*//'`
    base_path=${sub_name}/ses-${nr}
    base=${sub_name}_ses-${nr}
  else
    base_path=${sub_name}
    base=${sub_name}
  fi

  # define input
  input_dir=${INPUT}/${base_path}
  if [[ ${MODE} == "anat" ]]; then
    anat=`find -L "${input_dir}/anat" -type f \( -name "*T1w*" -and -name "*acq-${DATA^^}*" -and -name "*.nii.gz" \) 2>/dev/null`
    if [[ -z ${anat} ]]; then
      echo " ${sub_name}; missing anatomical data"
      continue
    fi
    func_txt="Only including anatomical data"
  else
    func_txt="Including functional data"
    if [[ ! -z ${func_dir} ]]; then
      # separate directory with functional data
      func=`find -L "${func_dir}/${base_path}/func" -type f \( -name "*bold.nii.gz" \) 2>/dev/null`
      INPUT=${func_dir}

      # check if there's a T1w in the 'anat' folder; even though you've already ran it, fMRIprep requires T1w-files
      anat=`find -L "${func_dir}/${base_path}/anat" -type f \( -name "*T1w.nii.gz" \) 2>/dev/null`
      if [[ -z ${anat} ]]; then
        anat_dir=`find_hierarchical_anatomy 6`
        diff_anat=`find -L "${anat_dir}/${base_path}" -type f \( -name "*T1w.nii.gz" \) 2>/dev/null`
        if [[ ! -z ${diff_anat} ]]; then
          if [[ ! -d ${func_dir}/${base_path}/anat ]]; then
            mkdir -p ${func_dir}/${base_path}/anat
          fi

          # copy file
          cp ${diff_anat} ${func_dir}/${base_path}/anat

        else
          echo "ERROR in `basename ${0}`: Could not find T1w-file in \"${anat_dir}\". Please copy your FreeSurfer input to \"${func_dir}/${base_path}/anat\" as a T1w-file needs to be present. If you've already ran the anatomical workflows, the file will be ignored. Nevertheless, it's needs to be present for fMRIprep to initiate"
          exit 1
        fi    
      fi  
    else
      # same directory for functional and anatomical data
      func=`find -L "${input_dir}/func" -type f \( -name "*bold.nii.gz" \) 2>/dev/null`
      anat=`find -L "${input_dir}/anat" -type f \( -name "*T1w*" -and -name "*acq-${DATA^^}*" -and -name "*.nii.gz" \) 2>/dev/null`
    fi

    if [[ -z ${func} ]]; then
      echo "${sub_name}; missing functional data"
      continue
    fi
  fi

  workdir=${PATH_HOME}/fmriprep/${PROJECT}

  # check existence working directory and other general settings
  if [[ ! -d ${workdir} ]]; then
    mkdir -p ${workdir}
  fi

  # check if we need to delete stuff
  wf_folder=`find ${workdir} -maxdepth 1 -type d -name "fmriprep*" -and -name "*wf" 2>/dev/null`
  if [[ ${remove_surf_wf} -eq 1 ]]; then
    echo "Removing \"${wf_folder}/single_subject_${sub_id}_wf/anat_preproc_wf/surface_recon_wf\""
    rm -r ${wf_folder}/single_subject_${sub_id}_wf/anat_preproc_wf/surface_recon_wf 2>/dev/null
  else
    if [[ ${remove_wf} -eq 1 ]]; then
      echo "Removing \"single_subject_${sub_id}_wf\" in \"${wf_folder}\""
      rm -r ${wf_folder}/single_subject_${sub_id}_wf 2>/dev/null
    else
      if [[ ${OW} -eq 1 ]]; then
        # check for run-specific flag
        if [[ ! -z ${runs} ]]; then
          for r in ${runs[@]}; do
            echo "Removing workflow folders with \"run-${r}\" in \"${wf_folder}/single_subject_${sub_id}_wf\""
            rm -r ${wf_folder}/single_subject_${sub_id}_wf/*run_${r}* 2>/dev/null
          done
        else
          echo "Removing workflow folders with \"run-*\" in \"${wf_folder}/single_subject_${sub_id}_wf\""
          rm -r ${wf_folder}/single_subject_${sub_id}_wf/*run_* 2>/dev/null
        fi
      fi
    fi
  fi

  # check configuration file
  if [[ -z ${conf} ]]; then
    confFile=""

    # select run-specific files
    if [[ ! -z ${runs} ]]; then
      run_="["
      r_ct=0
      for r in ${n_runs[@]}; do
        if [[ ${r_ct} -lt ${n_runs} ]]; then
          run_+="${r},"
        else
          run_+="${r}]"
        fi
        ((r_ct++))
      done

      confFile=${workdir}/run_conf.json
      if [ -f ${confFile} ]; then 
        rm ${confFile} 2>/dev/null
      fi

      (
        echo "{"
        echo "    \"bold\": {"
        echo "        \"run\": ${run_}"
        echo "    },"
        echo "    \"fmap\": {"
        echo "        \"run\": ${run_}"
        echo "    }"
        echo "}" 
      ) >> ${confFile}
      echo "Using run-specific config file (runs = [${n_runs[@]}]): ${confFile}"
      confFile="-x ${confFile}"

    fi
  else
    if [[ ! -z ${runs} ]]; then
      echo "WARNING: specific runs were requested, but you also specified a configuration file. Because I'm lazy and it's quite tedious to merge these, please use the configuration file to select runs."

      while true; do
        read -p "Do you want to proceed? (yes/no) " yn

        case $yn in 
          y|yes ) 
            break
            ;;
          n|no ) 
            echo exiting...
            exit
            ;;
          * ) 
            echo "invalid response (use \"yes\"/\"y\" or \"no\"/\"n\")";
            ;;
        esac      
      done
    fi
    echo "Using config file: ${conf}"
    confFile="-x ${conf}"
  fi

  if [[ ! -z ${MODE} ]]; then
    if [[ ${MODE} != "anat" ]] && [[ ${MODE} != "func" ]]; then
      task_id="-t ${MODE}"
    else
      task_id=""
    fi
  else
    task_id=""
  fi

  # decide the job type (depending on SGE, can be either qsub or call_fmriprep; for anything else it's call_fmriprep)
  if [[ ${PLACE} == "SGE" ]]; then
    if [[ ${run_local} -eq 1 ]]; then
      job="call_fmriprep"
    else
      if [[ ! -z ${SGE_QUEUE} ]]; then
        QUEUE=${SGE_QUEUE}
      else
        QUEUE=${SGE_QUEUE_LONG}
      fi
      job="qsub -q ${QUEUE} -pe smp ${n_cpu} -N ${sub_name}_desc-fmriprep -o ${workdir} ${DIR_SCRIPTS}/bin/call_fmriprep"
    fi 
  else
    job="call_fmriprep"
    echo
    echo "**************************************** Processing ${sub_name} ***************************************"
    echo ${func_txt}    
  fi

  # execute the command
  ${job} \
    -s ${sub_id} \
    -m ${MODE} \
    -b ${FPREP_BINDING} \
    -r ${INPUT} \
    -d ${OUTPUT} \
    -w ${workdir} \
    -c ${n_cpu} \
    ${keep_runs} \
    ${confFile} \
    ${task_id} \
    ${bbr_flag} \
    ${warp_only} \
    ${kwargs_file} \
    ${boldref_flag} \
    ${clean_wd}

  if [[ $? != 0 ]]; then
    echo "ERROR in `basename ${0}`: call_fmriprep did not execute cleanly"
    exit 1
  fi

done

#-----------------------------------------------------------------------------
# Calculate time spent using 'let'
echo
echo "---------------------------------------------------------------------------------------------------"
end=`date +%s`
end_date=`date`
printf "Done at ${end_date}\n"

let deltatime=end-start
let hours=deltatime/3600
let minutes=(deltatime/60)%60
let seconds=deltatime%60
printf "Time spent: %d:%02d:%02d\n" ${hours} ${minutes} ${seconds}
echo "---------------------------------------------------------------------------------------------------"
