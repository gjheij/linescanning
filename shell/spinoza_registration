#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
echo
source ${SETUP_FILE}
source call_bashhelper

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_registration

Wrapper for registration with ANTs. This script should be preceded by spinoza_qmri maps. It utili-
zes the variable ACQ in the setup script to derive what should be registered to what. In theory, 
the first element of ACQ is taken as reference, and the second element will be registered to that. 
If ACQ has only one element and 'MNI' is specified, this first element is registered to the MNI tem-
plate. This step is relatively obsolete given that we don't really need it in MNI space + we can do 
that step with fMRIprep, but can be useful if you need the registration file mapping T1w-to-MNI, 
without warping the actual 4D file to MNI-space (saves disk space).

Usage:
  spinoza_registration [options] <anat folder> <output folder> <registration type>

Arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or none)
  -o                  overwrite existing files
  --affine            use affine-registration (12 parameters)
  --rigid             use rigid-body registration (6 parameters). Default if <registration type> 
                      != 'mni' and no registration method is specified
  --syn               use SyN-diffeomorphic registration. Default if <registration type> == 'mni'
                      and no registration method is specified
  --ofsl              also output the matrix in FSL-compatible format (not available for SyN)
  -c|--sge            submit job to cluster (SGE); given that we have to rename files after regi-
                      stration, we'll wait for the job to finish if submitted. This can still help
                      with memory issues (e.g., if your local machine does not have enough RAM).
  --cmd               only echo command; can be useful to submit multiple subjects without waiting 
                      for the process to finish. This requires the master command to be re-run again
                      to apply and files
  -q <queue>          submit jobs to a specific queue. Defaults to SGE_QUEUE_LONG in spinoza_setup
  -j <n_cpus>         number of CPUs to use (default = 1)
  <anat folder>       folder containing images for registration. If DATA == "AVERAGE", we'll look
                      for T1w-images containing 'acq-MP2RAGE_' and 'acq-MP2RAGEME_', create a warp
                      file, and apply this file to MP2RAGEME-files with ('T1w' 'T1map' 'R2starmap
                      Files ending with something other than 'T1w' or 'T1map' will also be copied 
                      to have 'acq-AVERAGE' in the filename, rather than 'space-MP2RAGE'. This en-
                      sures compatibility with 'spinoza_sagittalsinus' when DATA == AVERAGE. Regis-
                      tered files will end up in the <anat folder>, the warp file itself in <output
                      folder>
  <output folder>     folder where warp files are stored. Registered files are stored in <anat fol-
                      der>
  <registration type> which registration should be carried out. If empty, we'll default to a regis-
                      tration between MP2RAGEME and MP2RAGE (assumes that DATA == AVERAGE). This 
                      version is called as 'master -m 05a'. If 'mni', we'll register the T1w-file
                      in <anat folder> with FSL's 1mm template (MNI152NLin6Asym). This version is 
                      called as 'master -m 05b'. If type == 'mni', we'll default to the first ele-
                      ment in ${ACQ[@]} to register to MNI. Generally, this will/should be MP2RAGE     

Example:
  spinoza_registration <project>/derivatives/pymp2rage <project>/derivatives/ants mp2rage
  spinoza_registration -s 001 -n 1 <project>/derivatives/pymp2rage <project>/derivatives/ants

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

SGE=0
OW=
reg_type=""
verb_flag=""
FSL_FMT=0
verb=0
fsl_flag=""
n_cpu=1
echo_cmd=0

# Check for subject flag
while getopts :-:ocs:n:q:j: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        rigid)
          reg_type="--rigid"
          ;;
        syn)
          reg_type="--syn"
          ;;
        affine)
          reg_type="--affine"
          ;;  
        sge)
          SGE=1
          ;;    
        cmd)
          echo_cmd=1
          ;;            
        verbose)
          verb_flag="--verbose"
          verb=1
          ;;    
        ofsl)
          FSL_FMT=1
          fsl_flag="--ofsl"
          ;;                            
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;  
      esac;;                    
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    c)  SGE=1
          ;;
    o)  OW=1
          ;;
    j)  n_cpu=${OPTARG}
          ;;           
    q)  SGE_QUEUE=${OPTARG}
          ;;             
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}
TYPE=${@:$OPTIND+2:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

if [[ -z ${TYPE} ]]; then
  TYPE="${ACQ[0],,}"
fi

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Start clock
#-----------------------------------------------------------------------------

echo "==================================================================================================="
printf "REGISTRATION\n"
start=`date +%s`
start_date=`date`

printf "Started at ${start_date}\n"
echo "==================================================================================================="

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  if [[ ! -z ${sub} ]]; then
    sub_name=${SUBJECT_PREFIX}${subID}
    sub_id=${subID}
  else
    sub_name=$(basename ${subID})
    sub_id=`get_id ${sub_name} ${SUBJECT_PREFIX}`
  fi

  if [[ ! -z ${ses} ]]; then
    nr=`echo ${ses} | sed -e 's/^[[:space:]]*//'`
    base_path=${sub_name}/ses-${nr}
    base=${sub_name}_ses-${nr}
  else
    base_path=${sub_name}
    base=${sub_name}
  fi

  # check if input directory was pymp2rage or not
  if [[ ${INPUT} != *"pymp2rage"* ]]; then
    input_dir=${INPUT}/${base_path}/anat
  else
    input_dir=${INPUT}/${base_path}
  fi
  
  output_dir=${OUTPUT}/${base_path}

  if [[ ${TYPE,,} == ${ACQ[0],,} ]]; then
    
    if [ -z ${WARP_2_MP2RAGE} ]; then
      WARP_2_MP2RAGE=("T1w" "T1map" "R2starmap")
    fi

    txt="Registering ${ACQ[1],,}-T1w to ${ACQ[0],,}"
    suffix=MP2RAGE
    ext="from-${ACQ[1]^^}_to-${ACQ[0]^^}"
    fixed=`find -L "${input_dir}" -type f \( -iname "*${ACQ[0]^^}_*" -and -name "*T1w.nii.gz" -and -not -name "*space-*" \) 2>/dev/null`

    dd=("FLAIR")
    # https://stackoverflow.com/a/15394738
    if [[ " ${dd[*]} " =~ " ${ACQ[1]^^} " ]]; then
      moving=`find -L "${input_dir}" -type f \( -iname "*_${ACQ[1]^^}.nii.gz" -and -not -name "*space-*" \) 2>/dev/null`
    else
      moving=`find -L "${input_dir}" -type f \( -iname "*${ACQ[1]^^}_*" -and -name "*.nii.gz" -and -not -name "*space-*" \) 2>/dev/null`    
    fi
    write_output=1

  elif [[ ${TYPE,,} == "mni" ]]; then
    txt="Registering ${ACQ[0]^^}-T1w to MNI152 template"
    suffix=MNI152NLin6Asym
    fixed=${FSLDIR}/data/standard/MNI152_T1_1mm.nii.gz
    moving=`find -L "${input_dir}" -type f \( -iname "*acq-${DATA}_*" -and -name "*T1w.nii.gz" \) 2>/dev/null`
    ext="from-${suffix}_to-T1w"
    output=$(dirname ${moving})/$(basename ${moving} _T1w.nii.gz)_space-${suffix}_T1w.nii.gz
    write_output=0
  else
    echo "Incorrect usage. Please specify mp2rage or mni"
    Usage >&2
    exit 1
  fi

  outWarp=${output_dir}/${base}_${ext}_mode-image_warp.nii.gz
  outInvWarp=${output_dir}/${base}_${ext}_mode-image_invwarp.nii.gz
  outGenAff=${output_dir}/${base}_${ext}_mode-image_xfm.mat
  outFSLAff=${output_dir}/${base}_${ext}_mode-image_fsl.mat
  cmd_file=${output_dir}/${base}_${ext}_mode-image_cmd.txt

  if [[ ! -d ${output_dir} ]]; then
    echo "Creating output directory"
    mkdir -p ${output_dir}
  fi

  if [[ -f ${fixed} && -f ${moving} ]]; then

    # check if we should overwrite
    if [[ ${OW} -eq 1 ]]; then
      rm ${outGenAff} 2>/dev/null
    fi

    if [[ ! -f ${outGenAff} ]]; then
      if [[ ! -f ${output_dir}/${base}_${ext}genaff.mat ]]; then
        
        # decide registration strategy
        if [[ -z ${reg_type} ]]; then
          if [[ ${TYPE,,} == "mni" ]]; then
            reg_type="--syn"
          fi
        fi

        # decide how to execute 
        if [[ ${SGE} -eq 1 ]]; then
          if [[ ! -z ${SGE_QUEUE} ]]; then
            QUEUE=${SGE_QUEUE}
          else
            QUEUE=${SGE_QUEUE_LONG}
          fi           
          job_name="reg_${sub_id}"
          job="qsub -q ${QUEUE} -wd ${DIR_LOGS} -pe smp ${n_cpu} -N ${job_name} ${DIR_SCRIPTS}/bin/call_antsregistration --verbose"
        else
          job="call_antsregistration"
        fi

        echo "Registering $(basename ${moving}) to $(basename ${fixed}) [${reg_type}]"
        cmd="${job} ${fsl_flag} ${verb_flag} ${reg_type} -j ${n_cpu} ${fixed} ${moving} ${output_dir}/${base}_${ext}"

        if [[ ${verb} -eq 1 || ${echo_cmd} -eq 1 ]]; then
          echo
          echo "call_antsregistration:"
          echo "---------------------------------------------------------------------------------------------------"
          echo ${cmd}
          echo
        fi

        # run
        ${cmd}

        if [[ $? -ne 0 ]]; then
          echo "ERROR in `basename ${0}`: call_antsregistration exited with non-zero status"
          exit 1
        fi

        if [[ ${echo_cmd} -eq 0 ]]; then

          if [[ ${SGE} -eq 1 ]]; then
            echo "Waiting to check qstat.."
            sleep 10

            wait_for_qsub "${job_name}"
            if [[ $? -ne 0 ]]; then
              echo "ERROR in `basename ${0}`: wait_for_qsub exited with non-zero status"
              exit 1
            fi
          fi

          if [[ ${reg_type} == *"syn"* ]]; then
            mv ${output_dir}/${base}_${ext}1Warp.nii.gz ${outWarp} 2>/dev/null
            mv ${output_dir}/${base}_${ext}1InverseWarp.nii.gz ${outInvWarp} 2>/dev/null
          fi

          # we'll have this file regardless of registration type
          mv ${output_dir}/${base}_${ext}genaff.mat ${outGenAff} 2>/dev/null
          mv ${output_dir}/${base}_${ext}command.txt ${cmd_file} 2>/dev/null
        else
          echo "Make sure to re-run upon completion of registration for fix the filenaming:"
          echo " \"master -m 05b -s ${sub_id}\""
        fi

      else
        echo "Renaming \"${base}_${ext}genaff.mat\" to \"`basename ${outGenAff}`\""
        mv ${output_dir}/${base}_${ext}genaff.mat ${outGenAff} 2>/dev/null
        mv ${output_dir}/${base}_${ext}command.txt ${cmd_file} 2>/dev/null    
      fi

      # check if we got fsl output
      if [[ -f ${output_dir}/${base}_${ext}fsl.mat ]]; then
        mv ${output_dir}/${base}_${ext}fsl.mat ${outFSLAff} 2>/dev/null
      fi

    else
      echo "Warp and matrix files are present. Skipping antsRegistration."

      if [[ -f ${output_dir}/${base}_${ext}1Warp.nii.gz ]]; then
        mv ${output_dir}/${base}_${ext}1Warp.nii.gz ${outWarp} 2>/dev/null
        mv ${output_dir}/${base}_${ext}1InverseWarp.nii.gz ${outInvWarp} 2>/dev/null
      fi  
    fi

    if [[ ${verb} -eq 1 ]]; then
      echo "Verify with ITK-Snap by loading \"${outGenAff}\""
      echo "\"itksnap -g ${fixed} -o ${moving}\""
    fi

    if [[ ${write_output} -eq 1 ]]; then

      for out in ${WARP_2_MP2RAGE[@]}; do
        
        # check if file exists and warp it
        suff=`echo $moving | rev | cut -d"_" -f1 | rev | cut -d"." -f1`
        in_file=$(dirname ${moving})/$(basename ${moving} _${suff}.nii.gz)_${out}.nii.gz
        if [ -f ${in_file} ]; then

          # define output
          output=$(dirname ${moving})/${base}_acq-${ACQ[1]^^}_space-${ACQ[0]^^}_${out}.nii.gz

          # overwrite if requested
          if [[ ${OW} -eq 1 ]]; then
            rm ${output} 2>/dev/null
          fi

          # define command
          if [[ ! -f ${output} ]]; then
            if [[ ${reg_type} == "--syn" ]]; then
              matrices="${outGenAff} ${outWarp}"
              invert="0 0"
            else
              matrices="${outGenAff}"
              invert="0"
            fi          
            echo "Creating \"${output}\""
            call_antsapplytransforms -i ${invert} ${fixed} ${in_file} ${output} ${matrices}

            # if DATA == AVERAGE, copy masks to AVERAGE
            if [[ ${DATA} == "AVERAGE" ]]; then
              if [[ ${out} != "T1w" || ${out} != "T1map" ]]; then
                output2=$(dirname ${moving})/${base}_acq-AVERAGE_${out}.nii.gz
                cp ${output} ${output2}
              fi
            fi
          else
            echo "`basename ${output}` exists"
          fi
        fi
      done
    fi
  else

    if [[ ! -f ${fixed} ]]; then
      echo "Missing fixed image"
    elif [[ ! -f ${moving} ]]; then
      echo "Missing moving image"
    fi

  fi

done

#-----------------------------------------------------------------------------
# Calculate time spent using 'let'
echo
echo "---------------------------------------------------------------------------------------------------"
end=`date +%s`
end_date=`date`
printf "Done at ${end_date}\n"

let deltatime=end-start
let hours=deltatime/3600
let minutes=(deltatime/60)%60
let seconds=deltatime%60
printf "Time spent: %d:%02d:%02d\n" ${hours} ${minutes} ${seconds}
echo "---------------------------------------------------------------------------------------------------"
