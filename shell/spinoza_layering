#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
echo
call_loadsetup

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_layering

Equivolumetric layering with either nighres or Wagstyl's surface_tools, as specified by the third
argument. Surface_tools is based on FreeSurfer, so make sure that has run before it. This script is
by default in overwrite mode, meaning that the files created earlier will be overwritten when re-ran.
This doesn't take too long, so it doesn't really matter and prevents the need for an overwrite switch.
To disable, you can specify a condition before running this particular script.

Usage:
  spinoza_layering [options] <input dir> <software>

Arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or none)
  -l <nr_layers>      number of layers to estimate (defaults: nighres=10; FreeSurfer=5)
  -o                  overwrite existing files
  <input folder>      if software == 'nighres', then we need the nighres output folder (generally 
                      DIR_DATA_DERIV/nighres). If software == 'freesurfer', then we need the SUB-
                      JECTS_DIR
  <software>          Possible inputs for software are:
                        Nighres: "nighres", "Nighres", "nigh", "NIGHRES" for nighres or"
                        Suface tools: "surface", "surface_tools", "SURFACE", "SURFACE_TOOLS", or 
                                      "ST"

Example:
  spinoza_layering SUBJECTS_DIR surface
  spinoza_layering DIR_DATA_DERIV/nighres nighres

Notes:
  - The script will recognize any of the software inputs specified above, with these variations in
    capitalization.
  - The script will look for a surface_tools installation on the PATH and if it can't find it there,
    it will look for the first match in the HOME directory. To be sure, place the script either in
    the home directory or place it on the PATH.
  - If the script doesn't give an error before printing the starting time, it means it found the
    script.

---------------------------------------------------------------------------------------------------

USAGE
    exit 1

}
#---------------------------------------------------------------------------------------------------------
# Define possible inputs
function Options {
    cat <<EOF
Nighres: "nighres", "Nighres", "nigh", "NIGHRES" for nighres or"
Suface tools:"surface", "surface_tools", "SURFACE", "SURFACE_TOOLS", or "ST" for Wagstyl's surface tools"

EOF
    exit 1
}

if [[ $# -lt 2 ]] ; then
  echo NOT ENOUGH ARGUMENTS SPECIFIED
  Usage >&2
  exit 1
fi

# Check for subject & session flags
OW=0
while getopts os:n:l: argument
do
  case ${argument} in
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    o)  OW=1
          ;;         
    l)  nr_layers=${OPTARG}
          ;; 
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage >&2
  exit 1
fi

INPUT=${@:$OPTIND:1}
SOFTWARE=${@:$OPTIND+1:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

if [[ ${SOFTWARE,,} == "nighres" || ${SOFTWARE} == "nigh" ]]; then
  software="NIGHRES"
  if [[ -z ${nr_layers} ]]; then
    nr_layers=10
  fi
elif [[ ${SOFTWARE,,} == "surface" || ${SOFTWARE,,} == "surface_tools" || ${SOFTWARE,,} == "st" ]]; then
  software="SURFACE"
  if [[ -z ${nr_layers} ]]; then
    nr_layers=5
  fi
else
  if [[ ! -z ${SOFTWARE} ]]; then
    echo "You specified \"${SOFTWARE}\", accepted strings are:"
    Options >&2
    exit 1
  else
    echo "Please specify one of the following"
    Options >&2
    exit 1
  fi
fi

#-----------------------------------------------------------------------------
# Start clock
#-----------------------------------------------------------------------------

echo "==================================================================================================="
printf "NEW LAYERING WITH ${software^^}\n"
start=`date +%s`
start_date=`date`

printf "Started at ${start_date}\n"
echo "==================================================================================================="

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  if [[ ! -z ${sub} ]]; then
    sub_name=${SUBJECT_PREFIX}${subID}
    sub_id=${subID}
  else
    sub_name=$(basename ${subID})
    sub_id=`get_id ${sub_name} ${SUBJECT_PREFIX}`
  fi

  if [[ -z ${ses} ]]; then
    input_dir=${INPUT}/${sub_name}
    base="${sub_name}"
  else
    nr=`echo ${ses} | sed -e 's/^[[:space:]]*//'`

    # remove this statement if you have multiple freesurfer sessions
    if [[ $(basename ${INPUT}) == *"freesurfer"* ]]; then
      input_dir=${INPUT}/${sub_name}
    else
      input_dir=${INPUT}/${sub_name}/ses-${nr}
    fi

    base="${sub_name}_ses-${nr}"
  fi

  if [[ ${software,,} == "nighres" ]]; then

    #----------------------------------------------------------------------------------------------------------------------------------------------------------
    # Running equivolumetric layering with nighres

    if [[ ! -d ${input_dir}/cruise ]]; then
      echo "${sub_name}: Could not find nighres' CRUISE directory"
      continue
    fi

    declare -a LAYER=(gwb cgb)
    declare -a INPUTS=()
    for r in ${LAYER[@]}; do
      file=`find "${input_dir}/cruise" -type f \( -name "*acq-${DATA^^}*" -and -name "*${r}*" -and -name "*.nii.gz" \) 2>/dev/null`
      if [[ -f ${file} ]]; then
        INPUTS+=(${file})
      else
        echo "Could not find \"$r\" image in cruise directory. Make sure naming is correct"
        continue
      fi
    done

    if [[ -z "${INPUTS}" ]]; then
      echo "Did not find required inputs"
      continue
    fi

    output_root=${input_dir}/layering/${base}_acq-${DATA^^}_desc
    output=${output_root}-layering_depth.nii.gz

    if [[ ! -d $(dirname ${output_root}) ]]; then
      mkdir -p $(dirname ${output_root})
    fi

    if [[ ${OW} -eq 1 ]]; then
      rm ${output}
    fi

    if [[ ! -f ${output} ]]; then
      
      echo
      echo "**************************************** Processing ${sub_name} ***************************************"
      echo "Creating `basename ${output}` with ${nr_layers} layers"
      call_nighreslayering \
        -i ${INPUTS[0]} \
        -o ${INPUTS[1]} \
        -l ${nr_layers} \
        -d $(dirname ${output_root}) \
        -n $(basename ${output_root})

      if [[ $? != 0 ]]; then
        echo
        echo "---------------------------------------------------------------------------------------------------"
        echo "ERROR in `basename ${0}`: call_nighreslayering exited with non-zero status"
        exit 1
      fi

    else

      echo "${sub_name}: `basename ${output}` already exists"

    fi

  elif [[ ${software,,} == "surface" ]]; then

    echo
    echo "**************************************** Processing ${sub_name} ***************************************"  

    #----------------------------------------------------------------------------------------------------------------------------------------------------------
    # Running equivolumetric layering with surface tools

    if [[ ! -d ${input_dir} ]]; then
      echo "This program requires you to run FreeSurfer first. Couldn't find subject's directory"
      continue
    fi

    export SUBJECTS_DIR=${INPUT}

    # check if generate_equivolumetric_surfaces.py is on the PATH
    CMD="python ${PATH_HOME}/surface_tools/equivolumetric_surfaces/generate_equivolumetric_surfaces.py"

    # loop through hemis
    for i in "lh" "rh"; do

      # overwrite
      rm ${input_dir}/surf/${i}.equi* 2>/dev/null

      # run cmd
      echo "Running generate_equivolumetric_surfaces.py on ${i} with ${nr_layers} layers"
      run_cmd="""${CMD} \
        --smoothing  0 \
        ${input_dir}/surf/${i}.pial \
        ${input_dir}/surf/${i}.white \
        ${nr_layers} \
        ${i}.equi \
        --software freesurfer \
        --subject_id ${sub_name}"""
      
      # store command
      out_f=${input_dir}/scripts/${i}.equi.txt
      if [[ -f ${out_f} ]]; then  
        rm -r ${out_f}
      fi
      
      # run command
      echo ${run_cmd} >> ${input_dir}/scripts/${i}.equi.txt
      echo ${run_cmd}
      eval ${run_cmd}

      if [[ $? -ne 0 ]]; then
        echo "ERROR in `basename ${0}`: generate_equivolumetric_surfaces.py exited with non-zero status"
        exit 1
      fi

    done

    echo "Stored outputs in ${SUBJECTS_DIR}/${sub_name}/surf/?h.equi*"
    echo "Warp your surface to each individual layers using:"
    echo "for hemi in \"lh\" \"rh\"; do mri_vol2surf --src func.nii.gz --out ${hemi}.equi_intensity_??.gii --hemi lh --surf <subj>/surf/lh.equi??.pial --out_type gii; done #(where ?? is the equidistance, e.g., 0.5)"

  fi

done

#-----------------------------------------------------------------------------
# Calculate time spent using 'let'
echo
echo "---------------------------------------------------------------------------------------------------"
end=`date +%s`
end_date=`date`
printf "Done at ${end_date}\n"

let deltatime=end-start
let hours=deltatime/3600
let minutes=(deltatime/60)%60
let seconds=deltatime%60
printf "Time spent: %d:%02d:%02d\n" ${hours} ${minutes} ${seconds}
echo "---------------------------------------------------------------------------------------------------"
