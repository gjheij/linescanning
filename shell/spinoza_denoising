#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
echo
call_loadsetup
source call_bashhelper

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_denoising

wrapper for call_pybest that does the denoising of fMRI-data based on the confound file created
during the preprocessing with fmriprep.

Usage:
  spinoza_denoising <-s sub> <-n ses> <fmriprep directory> <pybest output directory>

Arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or none)
  -o                  overwrite existing files
  <project root>      base directory containing the derivatives and the subject's folders.
  <derivatives>       path to the derivatives folder

Eample:
  spinoza_denoising DIR_DATA_HOME DIR_DATA_DERIV
  spinoza_denoising -s 001 -n 1 DIR_DATA_HOME DIR_DATA_DERIV
  spinoza_denoising -o DIR_DATA_HOME DIR_DATA_DERIV

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

# Check for subject & session flags
OW=0
job="bash"
cpu=1
while getopts os:n: argument
do
  case ${argument} in
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    o)  OW=1
          ;;         
    c)  job="qsub -q ${SGE_QUEUE_LONG} -pe smp 10"
        in_setup="-v ${DIR_SCRIPTS}/shell/spinoza_setup"
        cpu=10
          ;;                    
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

# fetch positional arguments
FPREP=${@:$OPTIND:1}
DENOISE=${@:$OPTIND+1:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# Start clock
#-----------------------------------------------------------------------------

echo "==================================================================================================="
printf "DENOISING DATA WITH FMRIPREP-CONFOUNDS\n"
start=`date +%s`
start_date=`date`

printf "Started at ${start_date}\n"
echo "==================================================================================================="

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  if [[ ! -z ${sub} ]]; then
    sub_name=${PREFIX}${subID}
    sub_id=${subID}
  else
    sub_name=$(basename ${subID})
    sub_id=`get_id ${sub_name} ${PREFIX}`
  fi

  if [[ ! -z ${ses} ]]; then
    nr=`echo ${ses} | sed -e 's/^[[:space:]]*//'`
    base_path=${sub_name}/ses-${nr}
    base=${sub_name}_ses-${nr}
  else
    base_path=${sub_name}
    base=${sub_name}
  fi

  if [[ ${OW} -eq 1 ]]; then
    # overwrite mode enabled
    if [[ -d ${DENOISE}/${base_path} ]]; then
      rm -r ${DENOISE}/${base_path}
    fi
  fi

  if [[ ! -d ${DENOISE} ]]; then
    mkdir -p ${DENOISE}
  fi

  if [[ -d ${FPREP}/${base_path} ]]; then

    if [[ ! -d ${DENOISE}/${base_path} ]]; then

      echo
      echo "**************************************** Processing ${sub_name} ***************************************"
      echo "Running pybest denoising"

      # check if spinoza_setup contains PYBEST_SPACE and PYBEST_NORM
      if [[ -z ${PYBEST_SPACE} ]]; then
        PYBEST_SPACE="fsnative"
      fi

      if [[ -z ${PYBEST_SPACE} ]]; then
        PYBEST_NORM="zscore"
      fi

      # full path is needed for qsub
      ${job} ${DIR_SCRIPTS}/bin/call_pybest \
        -s ${sub_id} \
        -n "${nr}" \
        -o ${DENOISE} \
        -r ${PYBEST_SPACE} \
        -e ${PYBEST_ENV} \
        -f ${FPREP} \
        -c ${cpu} \
        -z ${PYBEST_NORM}

      if [[ $? != 0 ]]; then
        echo
        echo "---------------------------------------------------------------------------------------------------"
        echo "ERROR in `basename ${0}`: call_pybest exited with non-zero status"
        exit 1
      fi        

    else

      echo "${sub_name}: data already denoised"

    fi

  else

    echo "${sub_name}: might want to run fMRIprep first.."
    continue

  fi

done

#-----------------------------------------------------------------------------
# Calculate time spent using 'let'
echo
echo "---------------------------------------------------------------------------------------------------"
end=`date +%s`
end_date=`date`
printf "Done at ${end_date}\n"

let deltatime=end-start
let hours=deltatime/3600
let minutes=(deltatime/60)%60
let seconds=deltatime%60
printf "Time spent: %d:%02d:%02d\n" ${hours} ${minutes} ${seconds}
echo "---------------------------------------------------------------------------------------------------"
