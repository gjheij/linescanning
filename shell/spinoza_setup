#!/usr/bin/env bash

SETUP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SETUP_FILE="${SETUP_DIR}/spinoza_setup"
REPO_DIR=$(dirname ${SETUP_DIR})
PATH_HOME=$(dirname $(dirname ${SETUP_DIR}))
export PATH_HOME=${PATH_HOME}

# source helper functions
source ${REPO_DIR}/bin/call_bashhelper

if [[ $1 == "setup" ]]; then

  echo "==================================================================================================="
  echo "                            SETUP SCRIPT FOR LINE SCANNING REPOSITORY                              "
  echo "==================================================================================================="
  echo "Setting up ~/.bash_profile"
  # ignore permission changes in git
  git config core.fileMode false 2>/dev/null

  # make scripts executable
  chmod -R 775 ${REPO_DIR}/bin
  chmod -R 775 ${REPO_DIR}/shell

  # source call_bashhelper
  source ${REPO_DIR}/bin/call_bashhelper

  if [ -f ~/.bash_profile ]; then
    search_for="source ${SETUP_FILE}"
    case `grep -Fx "${search_for}" ~/.bash_profile >/dev/null; echo $?` in
      0)
        # code if found
        # echo "Line already present"
        ;;
      1)
        # code if not found
        (
        echo 
        echo "# Inserted via the linescanning-repository"
        echo "source ${SETUP_FILE}"
        ) >> ~/.bash_profile
        ;;
      *)
        # code if an error occurred
        echo "ERROR: Could not complete setup.."
        ;;
    esac
  else
      (
      echo "# .bash_profile"
      echo "# Inserted via the linescanning-repository"
      echo "source ${SETUP_FILE}"
      ) >> ~/.bash_profile
  fi

  # check itksnap installation
  check_itksnap=`check_function itksnap`
  if [[ ${check_itksnap} -eq 1 ]]; then
    echo "Please install ITK-Snap here: \"https://sourceforge.net/projects/itk-snap/files/itk-snap/3.8.0\""
  else
    echo "Found ITK-Snap installation: `which itksnap`"
  fi

  # activate conda environment
  ACTIVATE_CONDA=1
  if [[ ${ACTIVATE_CONDA} -eq 1 ]]; then

    echo
    echo "---------------------------------------------------------------------------------------------------"
    echo "Dealing with conda environment"
    
    # mamba is faster; check if we can use it
    check_mamba=`check_function mamba`
    cmd="conda"
    if [[ ${check_mamba} -eq 0 ]]; then
      cmd="mamba"
    fi

    env_name="ls"
    if [[ -z `conda info --envs | grep ${env_name}` ]]; then
      ${cmd} env create --file ${REPO_DIR}/environment.yml --prefix=~/.conda/envs/${env_name}
      if [[ $? -ne 0 ]]; then
        echo "ERROR: conda install from environment.yml file did not complete"
        exit 1
      fi
    else
      echo "WARNING: conda environment \"${env_name}\" already exists. Edit \"env_name\" in setup file and rerun"
      exit 1
    fi
    conda activate ${env_name}
  fi

  # setup python packages
  declare -a INSTALL_PACKAGES=("pRFpy" "Nideconv" "Pymp2rage" "Pybest" "Hedfpy" "Pycortex" "linescanning")
  echo
  echo "---------------------------------------------------------------------------------------------------"
  echo "Checking installation of [${INSTALL_PACKAGES[@]}]"
  cd ${PATH_HOME}
  for package in ${INSTALL_PACKAGES[@]}; do

    check=`pip list | grep -F ${package,,}`
    if [[ -z ${check} ]]; then
      echo "INSTALLING: ${package}.."        
      if [ ! -d ${PATH_HOME}/${package,,} ]; then
        PACKAGE_LINK=`cat ${REPO_DIR}/doc/source/links.rst | grep ${package,,} | cut -d' ' -f3`
        git clone ${PACKAGE_LINK}
      fi
      cd ${PATH_HOME}/${package,,}
      # switch to new-hrf branch of prfpy
      if [[ ${package,,} == "prfpy" ]]; then
        git checkout new_hrf
      fi
      python setup.py develop
      cd ..
    else
      echo "Found ${package} installation"
    fi
  done
  echo "Done. Now enter: \"source ~/.bash_profile\""
fi

#===================================================================================================
# VARIABLES
#===================================================================================================

# If you have access to SGE, leave to SGE; otherwise change to e.g., LOCAL
export PLACE="SGE"
export SGE_QUEUE_LONG="long.q@jupiter"
export SGE_QUEUE_SHORT="short.q@jupiter"

# MATLAB
export MRRECON=/packages/matlab/toolbox/MRecon/3.0.541  
export MATLAB_CMD="matlab -nosplash -nodisplay -batch" # find with 'which matlab'
export SPM_PATH=${PATH_HOME}/spm12    
export SKIP_LINES=30                                    

# fMRIPREP
export MRIQC_SIMG=${PATH_HOME}/mriqc/containers_bids-mriqc--0.15.1.simg
export FPREP_SIMG=${PATH_HOME}/fmriprep/containers_bids-fmriprep--21.0.2.simg
export FPREP_OUT_SPACES="fsnative fsaverage T1w func"
export FPREP_BINDING="/data1/projects"                                          # binding directory for singularity image
export CIFTI=170k                                                               # leave empty if you don't want cifti output
export DO_SYN=1                                                                 # set to zero if you do not want additional syn-distortion correction
export BOLD_T1W_INIT="register"                                                 # default = register; for partial FOV, set to 'header'

# PYBEST
export PYBEST_SPACE="fsnative"
export PYBEST_NORM="zscore"
export PYBEST_ENV="slowpy"

# PROJECT
export DIR_PROJECTS="/data1/projects/MicroFunc/Jurjen/projects"
export PROJECT="VE-pRF"
export TASK_SES1=("2R")
export TASK_SES2="LR"
export SUBJECT_PREFIX="sub-"
export COMBINE_SEGMENTATIONS="weighted"

# DATA TYPE(S)
export ACQ=("MP2RAGE")  # or ("MP2RAGE" "MP2RAGEME")
export DATA=${ACQ[0]}   # or MP2RAGEME/AVERAGE

# For DATA == AVERAGE we'll need multiple acquisitions
if [[ ${DATA} == "AVERAGE" ]]; then
  if [[ `echo ${#ACQ[@]}` -ne 2 ]]; then
    echo "Average of what..? \"ACQ\" variable in spinoza_setup has ${#ACQ[@]} item(s) [\"${ACQ[@]}\"]"
    exit 1
  fi
fi

#===================================================================================================
# PATHS
#===================================================================================================

export DIR_SCRIPTS=${REPO_DIR}
export DIR_DATA_HOME=${DIR_PROJECTS}/${PROJECT}
export DIR_LOGS=${DIR_DATA_HOME}/code/logs
export DIR_DATA_SOURCE=${DIR_DATA_HOME}/sourcedata
export DIR_DATA_DERIV=${DIR_DATA_HOME}/derivatives
export DIR_DATA_ATLAS=${PATH_HOME}/atlas/MICCAI2012-Multi-Atlas-Challenge-Data
export SOURCEDATA=${DIR_DATA_HOME}
export DERIVATIVES=${DIR_DATA_DERIV}
export MASKS=${DIR_DATA_DERIV}/manual_masks
export ANTS=${DIR_DATA_DERIV}/ants
export FS=${DIR_DATA_DERIV}/freesurfer
export SUBJECTS_DIR=${FS}
export ANTS=${DIR_DATA_DERIV}/ants
export AVG=${DIR_DATA_DERIV}/average
export MASKED_AVG=${DIR_DATA_DERIV}/masked_average
export PYMP2RAGE=${DIR_DATA_DERIV}/pymp2rage
export NIGHRES=${DIR_DATA_DERIV}/nighres
export FSL=${DIR_DATA_DERIV}/fsl
export SKULLSTRIP=${DIR_DATA_DERIV}/skullstripped
export CTX=${DIR_DATA_DERIV}/pycortex
export PRF=${DIR_DATA_DERIV}/prf

# Make executables available in environment
export PATH=${PATH}:${DIR_SCRIPTS}/bin
export PATH=${PATH}:${DIR_SCRIPTS}/shell

# chmod -R 775 ${DIR_SCRIPTS}/bin
# chmod -R 775 ${DIR_SCRIPTS}/shell

# Store acquisitions file file in data folder
if [[ -f ${DIR_SCRIPTS}/misc/acq.txt ]]; then
  rm -r ${DIR_SCRIPTS}/misc/acq.txt 2>/dev/null
fi

# set SSH_KEY for start_ssh
export SSH_KEY="${HOME}/.ssh/hp_windows"

# source bash helper functions
source call_bashhelper