#!/usr/bin/env bash

SETUP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SETUP_FILE="${SETUP_DIR}/spinoza_setup"
REPO_DIR=$(dirname ${SETUP_DIR})
PATH_HOME=$(dirname $(dirname ${SETUP_DIR}))
export PATH_HOME=${PATH_HOME}

if [[ $1 == "setup" ]]; then

  echo "==================================================================================================="
  echo "                            SETUP SCRIPT FOR LINE SCANNING REPOSITORY                              "
  echo "==================================================================================================="
  echo "Setting up ~/.bash_profile"
  # ignore permission changes in git
  git config core.fileMode false 2>/dev/null

  # make scripts executable
  chmod -R 775 ${REPO_DIR}/bin
  chmod -R 775 ${REPO_DIR}/shell

  # source call_bashhelper
  source ${REPO_DIR}/bin/call_bashhelper

  if [ -f ~/.bash_profile ]; then
    search_for="source ${SETUP_FILE}"
    case `grep -Fx "${search_for}" ~/.bash_profile >/dev/null; echo $?` in
      0)
        # code if found
        # echo "Line already present"
        ;;
      1)
        # code if not found
        (
        echo 
        echo "# Inserted via the linescanning-repository"
        echo "source ${SETUP_FILE}"
        ) >> ~/.bash_profile
        ;;
      *)
        # code if an error occurred
        echo "ERROR: Could not complete setup.."
        ;;
    esac
  else
      (
      echo "# .bash_profile"
      echo "# Inserted via the linescanning-repository"
      echo "source ${SETUP_FILE}"
      ) >> ~/.bash_profile
  fi

  # check itksnap installation
  check_itksnap=`check_function itksnap`
  if [[ ${check_itksnap} -eq 1 ]]; then
    echo "Please install ITK-Snap here: \"https://sourceforge.net/projects/itk-snap/files/itk-snap/3.8.0\""
  else
    echo "Found ITK-Snap installation: `which itksnap`"
  fi

  # activate conda environment
  ACTIVATE_CONDA=0
  if [[ ${ACTIVATE_CONDA} -eq 1 ]]; then

    echo
    echo "---------------------------------------------------------------------------------------------------"
    echo "Dealing with conda environment"

    env_name="test_install"
    if [[ -z `conda info --envs | grep ${env_name}` ]]; then
      conda env create --name ${env_name} --file ${REPO_DIR}/environment.yml 
      if [[ $? -ne 0 ]]; then
        echo "ERROR: conda install from environment.yml file did not complete"
        exit 1
      fi
    else
      echo "ERROR: conda environment \"${env_name}\" already exists. Edit \"env_name\" in setup file and rerun"
      exit 1
    fi
    conda activate ${env_name}
  fi

  # setup python packages
  declare -a INSTALL_PACKAGES=("Pycortex" "pRFpy" "Nideconv" "Pymp2rage" "Pybest" "Nighres")
  echo
  echo "---------------------------------------------------------------------------------------------------"
  echo "Checking specific python packages"
  for package in ${INSTALL_PACKAGES[@]}; do

    cd ${PATH_HOME}

    PACKAGE_LINK=`cat ${REPO_DIR}/doc/source/links.rst | grep ${package,,} | cut -d' ' -f3`
    # pycortex's package name == 'cortex'
    if [[ ${package,,} != "pycortex" ]]; then

      # pybest = command-line function
      if [[ ${package,,} == "pybest" ]]; then
        pybest_exists=`check_function pybest`
        if [[ $? -ne 0 ]]; then
          echo "INSTALLING: pybest.."
          if [ ! -d ${PATH_HOME}/${package,,} ]; then
            git clone ${PACKAGE_LINK}
          fi
          cd ${PATH_HOME}/${package,,}
          pip install -e .
        else
          echo "Found pybest installation"
        fi
      # nighres requires special installation
      elif [[ ${package,,} == "nighres" ]]; then
        python -c "import ${package,,}" 2>/dev/null
        if [[ $? -ne 0 ]]; then
          echo
          echo "INSTALLING: Nighres.."
          if [ ! -d ${PATH_HOME}/${package,,} ]; then
            git clone ${PACKAGE_LINK}
          fi
          cd ${PATH_HOME}/${package,,}
          ./build.sh
          if [[ $? -ne 0 ]]; then
            echo "ERROR Nighres built INCOMPLETE: I'm guessing you need to set the JCC_JDK variable and/or install JCC"
            continue
          fi
          pip install -e .
        else
          echo "Found nighres installation"
        fi
      else
        # regular python package install
        python -c "import ${package,,}" 2>/dev/null
        if [[ $? -ne 0 ]]; then
          echo "INSTALLING: ${package}.."        
          if [ ! -d ${PATH_HOME}/${package,,} ]; then
            git clone ${PACKAGE_LINK}
          fi
          cd ${PATH_HOME}/${package,,}
          pip install -e .
        else
          echo "Found ${package} installation"
        fi
      fi
    else
      # pycortex check
      python -c "import cortex" 2>/dev/null
      if [[ $? -ne 0 ]]; then
        echo "INSTALLING: ${package}.."        
          if [ ! -d ${PATH_HOME}/${package,,} ]; then
            git clone ${PACKAGE_LINK}
          fi
          cd ${PATH_HOME}/${package,,}
        pip install -e .
      else
        echo "Found Pycortex installation"
      fi
    fi

  done

  python -c "import linescanning"
  if [[ $? -ne 0 ]]; then
    echo
    echo "---------------------------------------------------------------------------------------------------"
    echo "Installing linescanning.."
    cd ${REPO_DIR}
    pip install -e .
  else
    echo "Found linescanning installation"
  fi

  echo "Done. Now enter: \"source ~/.bash_profile\""
  
fi

#===================================================================================================
# VARIABLES
#===================================================================================================

# If you have access to SGE, leave to SGE; otherwise change to e.g., LOCAL
export PLACE=SGE
export SGE_QUEUE_LONG="long.q@jupiter"
export SGE_QUEUE_SHORT="short.q@jupiter"

# set SGE paths
# if [[ $1 == "setup" ]]; then
#   for file in ${REPO_DIR}/bin/* ${REPO_DIR}/shell/*; do
#     if [[ ! -f ${REPO_DIR}/shell/spinoza_setup ]]; then
#       sed -i "s|LONG_QUEUE|${LONG_QUEUE}|g" ${file}
#       sed -i "s|SHORT_QUEUE|${SHORT_QUEUE}|g" ${file}
#     fi
#   done
# fi

# MATLAB
export MRRECON=/packages/matlab/toolbox/MRecon/3.0.541  
export MATLAB_DIR=/packages/matlab/R2020b               
export SPM_PATH=${PATH_HOME}/programs/packages/spm12    
export SKIP_LINES=30                                    

# fMRIPREP
export MRIQC_SIMG=${PATH_HOME}/programs/packages/mriqc/containers_bids-mriqc--0.15.1.simg
export FPREP_SIMG=${PATH_HOME}/programs/packages/fmriprep/containers_bids-fmriprep--20.2.5.simg
export FPREP_OUT_SPACES="fsnative fsaverage MNI152NLin6Asym:res-1"
export FPREP_BINDING="/data1/projects" # binding directory for singularity image
export CIFTI=170k # leave empty if you don't want cifti output
export DO_SYN=1 # set to zero if you do not want additional syn-distortion correction

# PYBEST
export PYBEST_SPACE="fsnative"
export PYBEST_NORM="zscore"

# PROJECT
export DIR_PROJECTS=$(dirname $(dirname ${PATH_HOME}))/projects 
export PROJECT=hemifield # ANAT_SEG-Raw #URIS-MDD #hemifield
export TASK_SES1="2R"
export TASK_SES2="LR"
export PREFIX="sub-"
export COMBINE_SEGMENTATIONS="weighted"

# DATA TYPE(S)
declare -a ACQ=("MP2RAGE") # or ("MP2RAGE" "MEMP2RAGE")
export DATA=${ACQ[0]} # or MP2RAGEME/AVERAGE

# For DATA == AVERAGE we'll need multiple acquisitions
if [[ ${DATA} == "AVERAGE" ]]; then
  if [[ `echo ${#ACQ[@]}` -ne 2 ]]; then
    echo "Average of what..? \"ACQ\" variable in spinoza_setup has ${#ACQ[@]} items"
    exit 1
  fi
fi

#===================================================================================================
# PATHS
#===================================================================================================

export DIR_SCRIPTS=${REPO_DIR}
export DIR_DATA_HOME=${DIR_PROJECTS}/${PROJECT}
export DIR_LOGS=${DIR_DATA_HOME}/code/logs
export DIR_DATA_SOURCE=${DIR_DATA_HOME}/sourcedata
export DIR_DATA_DERIV=${DIR_DATA_HOME}/derivatives
export DIR_DATA_ATLAS=${PATH_HOME}/atlas/MICCAI2012-Multi-Atlas-Challenge-Data
export SOURCEDATA=${DIR_DATA_HOME}
export DERIVATIVES=${DIR_DATA_DERIV}
export MASKS=${DIR_DATA_DERIV}/manual_masks
export ANTS=${DIR_DATA_DERIV}/ants
export FS=${DIR_DATA_DERIV}/freesurfer
export SUBJECTS_DIR=${FS}
export ANTS=${DIR_DATA_DERIV}/ants
export AVG=${DIR_DATA_DERIV}/average
export MASKED_AVG=${DIR_DATA_DERIV}/masked_average
export PYMP2RAGE=${DIR_DATA_DERIV}/pymp2rage
export NIGHRES=${DIR_DATA_DERIV}/nighres
export FSL=${DIR_DATA_DERIV}/fsl
export SKULLSTRIP=${DIR_DATA_DERIV}/skullstripped
export CTX=${DIR_DATA_DERIV}/pycortex
export PRF=${DIR_DATA_DERIV}/prf

# Make executables available in environment
export PATH=${PATH}:${DIR_SCRIPTS}/bin
export PATH=${PATH}:${DIR_SCRIPTS}/shell

# chmod -R 775 ${DIR_SCRIPTS}/bin
# chmod -R 775 ${DIR_SCRIPTS}/shell

# Store acquisitions file file in data folder
if [[ -f ${DIR_SCRIPTS}/misc/acq.txt ]]; then
  rm -r ${DIR_SCRIPTS}/misc/acq.txt 2>/dev/null
fi

touch ${DIR_SCRIPTS}/misc/acq.txt
j=0
for i in `seq 1 ${#ACQ[@]}`; do
  echo "ACQ${i}=${ACQ[j]}" >> ${DIR_SCRIPTS}/misc/acq.txt
  (( j++ ))
done

while IFS= read -r line; do export ${line}; done < ${DIR_SCRIPTS}/misc/acq.txt
# source ${DIR_SCRIPTS}/bin/utils/acq.txt

# set SSH_KEY for start_ssh
export SSH_KEY="${HOME}/.ssh/hp_windows"

# source bash helper functions
source call_bashhelper