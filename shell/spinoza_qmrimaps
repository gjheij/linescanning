#!/usr/bin/env bash

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
echo
source ${SETUP_FILE}

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_qmrimaps

wrapper for estimation of T1 and other parametric maps from the (ME)MP2RAGE sequences by throwing
the two inversion and phase images in PYMP2RAGE (https://github.com/Gilles86/pymp2rage).

Usage:
  spinoza_qmrimaps [options] <project root> <derivatives>

Arguments:
  -s <subject>        subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>        session ID (e.g., 1, 2, or none)
  -o|--ow             overwrite existing T1w/T1map files
  -f|--full           overwrite all existing files (including masks)
  -u|--ups            use settings for universal pulse (UP) [parameters are hardcoded]
  --skip_bg           Do not create masks from INV2-image to remove noise from MP2RAGE   
  <project root>      directory containing the T1w and T2w files; should generally be pymp2rage-
                      folder
  <derivatives>       path to output mask directory  

Example:
  spinoza_qmrimaps DIR_DATA_HOME DERIVATIVES/pymp2rage
  spinoza_qmrimaps DIR_DATA_HOME DIR_DATA_DERIV
  spinoza_qmrimaps -s 999 -n 1 DIR_DATA_HOME DIR_DATA_DERIV/pymp2rage

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

# Check for subject flag
UPs=""
OW=0
FULL_OW=0
SKIP_BG="-c"
while getopts :-:oufs:n: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in     
        ow)
          OW=1
          ;;  
        full)
          FULL_OW=1
          ;;    
        ups)
          UPs="--ups"
          ;;     
        skip_bg)
          SKIP_BG="--skip_bg"
          ;;                                                                                                 
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}, did you mean \"--lines\"?"
            exit 1
          fi
          ;;  
      esac;;    
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;   
    u)  UPs="--ups"
          ;;  
    o)  OW=1
          ;;         
    f)  FULL_OW=1
          ;;                           
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage >&2
  exit 1
fi

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${INPUT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# Start clock
#-----------------------------------------------------------------------------

echo "==================================================================================================="
printf "Calculate T1's from ${DATA}\n"
start=`date +%s`
start_date=`date`

printf "Started at ${start_date}\n"
echo "==================================================================================================="

#-----------------------------------------------------------------------------
# Run it
for subID in ${search}; do

  # collect subject name
  if [[ ! -z ${sub} ]]; then
    sub_name=${SUBJECT_PREFIX}${subID}
  else
    sub_name=$(basename ${subID})
  fi

  if [[ ! -z ${ses} ]]; then
    nr=`echo ${ses} | sed -e 's/^[[:space:]]*//'`
    base_path=${sub_name}/ses-${nr}
    base=${sub_name}_ses-${nr}
  else
    base_path=${sub_name}
    base=${sub_name}
  fi

  input_dir=${INPUT}/${base_path}
  output_dir=${OUTPUT}/${base_path}

  # check aggressive overwrite mode
  if [[ ${FULL_OW} -eq 1 ]]; then
    echo "Full overwrite mode activated"
    rm -r ${output_dir} 2>/dev/null
  fi

  if [[ ! -d ${input_dir} ]]; then
    echo "${sub_name}: could not find input directory \"${input_dir}\""
    continue
  else
    echo
    echo "**************************************** Processing ${sub_name} ***************************************"
  fi
  
  # loop through available datatype (see spinoza_setup)
  for a in ${ACQ[@]}; do

    t1w=`find -L "${output_dir}" -maxdepth 1 -type f \( -name "*acq-${a^^}_*" -and -name "*T1w.nii.gz" -and -not -name "*space-*" \) 2>/dev/null`
    t1map=`find -L "${output_dir}" -maxdepth 1 -type f \( -name "*acq-${a^^}_*" -and -name "*T1map.nii.gz" -and -not -name "*space-*" \) 2>/dev/null`    
    NoF=`find -L "${input_dir}" -type f \( -iname "*acq-${a}*" -and -not -name "*T1w*" -and -name "*.nii.gz" \) | wc -l 2>/dev/null`
    
    # set output name based on acquisition strategy
    output_base=${base}_acq-${a^^}

    # check if we should overwrite
    if [[ ${OW} -eq 1 ]]; then
      echo "Partial overwrite mode activated"
      rm ${t1w} ${t1map} 2>/dev/null
    fi

    if [[ ! -f ${t1w} || ! -f ${t1map} ]]; then

      if [[ ${NoF} -eq 0 ]]; then
        echo "${sub_name}: ${NoF} files available for ${a^^}"
        break
      else
        if [[ ! -d ${output_dir} ]]; then
          mkdir -p ${output_dir}
        fi

        cmd="""call_${a,,} \
          -i ${input_dir} \
          -o ${output_dir} \
          -b ${output_base} \
          ${UPs} \
          ${SKIP_BG}"""
        
        # Execute command
        echo ${cmd}
        ${cmd}
      fi

    else
      echo "${output_base}_T1w.nii.gz already exist"
    fi

  done

  # copy T2w-file to pymp2rage folder for later convenience
  t2=`find -L "${input_dir}" -type f \( -name "*T2w.nii.gz" \) 2>/dev/null`
  if [ ! -z ${t2} ]; then
    ct=0; for ii in ${t2[@]}; do ((ct++)); done
    ix=0
    if [[ ${ct} -gt 1 ]]; then
      echo "Found multiple T2-images; taking last one"
      ix=$((${#t2[@]}-1))
    fi
    cp ${t2[ix]} ${output_dir} 2>/dev/null  
  fi

  # copy FLAIR-file to pymp2rage folder for later convenience
  flair=(`find -L "${input_dir}" -type f \( -name "*FLAIR.nii.gz" \) 2>/dev/null`)
  if [[ ! -z ${flair} ]]; then
    ct=0; for ii in ${flair[@]}; do ((ct++)); done
    ix=0
    if [[ ${ct} -gt 1 ]]; then
      echo "Found multiple FLAIR-images; taking last one"
      ix=$((${#flair[@]}-1))
    fi
    cp ${flair[ix]} ${output_dir} 2>/dev/null
  fi  

done

#-----------------------------------------------------------------------------
# Calculate time spent using 'let'
echo
echo "---------------------------------------------------------------------------------------------------"
end=`date +%s`
end_date=`date`
printf "Done at ${end_date}\n"

let deltatime=end-start
let hours=deltatime/3600
let minutes=(deltatime/60)%60
let seconds=deltatime%60
printf "Time spent: %d:%02d:%02d\n" ${hours} ${minutes} ${seconds}
echo "---------------------------------------------------------------------------------------------------"
