#!/bin/bash
#$ -S /bin/bash
#$ -cwd
#$ -j Y
#$ -V
#$ -pe smp 5
#
# Allocate input arguments to variables
#
while getopts wcjqom:s:h:n:t:l:v:p:x:u: arg
do
  case ${arg} in
    m)  MOD=${OPTARG}
          ;;
    s)  SUB=${OPTARG}
          ;;
    h)  HEMI=${OPTARG}
          ;;
    n)  SES=${OPTARG}
          ;;
    o)  OVERWRITE=${OPTARG}
          ;;
    t)  TYPE=${OPTARG}
          ;;
    l)  WHICH_MOD=${OPTARG}
          ;;
    v)  VERTICES=${OPTARG}
          ;;
    p)  PRF_MODEL=${OPTARG}
          ;;
    c)  CAT_RUN=${OPTARG}
          ;;
    x)  KWARGS=${OPTARG}
          ;;
    u)  CONF=${OPTARG}
          ;;
  esac
done

source call_bashhelper

# Run all modules if the "ALL" flag was specified
if [[ ${MOD} == "ALL" ]]; then
  MOD="02,03,04,06,07,08,09,10,11,12,14,15,16,17,18,19,20,21,22,23,24"
elif [[ ${MOD} == "PRE"  ]]; then
  MOD="02,03,04,06"
elif [[ ${MOD} == "BFC"  ]]; then
  MOD="08,09,10"
elif [[ ${MOD} == "MAS"  ]]; then
  MOD="11,12,13"
elif [[ ${MOD} == "SES"  ]]; then
  MOD="14,15,16,17,18"
elif [[ ${MOD} == "SEG"  ]]; then
  MOD="19,20"
elif [[ ${MOD} == "CTX"  ]]; then
  MOD="20,21,22"
elif [[ ${MOD} == "GDH"  ]]; then
  MOD="14,19,20,21,22,23"
else
  MOD=${MOD}
fi

FLAG_executeModule="${MOD}"

start=`date +%s`
start_date=`date`

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

===================================================================================================
                            MASTER SCRIPT FOR LINE SCANNING ANALYSIS
===================================================================================================

Main script governing all (pre-)processing steps for high resolution anatomical data, as well as 
whole-brain fMRI data analyses (specifically population receptive field [pRF]) and linescanning
data. All modules can be called with master -m <module>, which in it's bare form with loop through
the subjects it can find in the specified input directories. You can also include an -s flag to 
process a single subject. See below for additional settings. Please read through it's module what
it's default settings are and what you'd need to do to get it running for you.

Have fun!

Args:
  -m <module>       always required, specifies which module to run. Multiple modules should be com-
                    ma separated
  -h <hemisphere>   used for lineplanning, denotes which hemisphere to process
  -o <overwrite>    used for multiple modules to overwrite (i.e., delete) files
  -n <session>      session nr, used to create file structure according to BIDS
  -t <type>         used for fMRIprep, to run either the 'anat' workflow only, or also include func
                    data ('func)
  -l <which mod>    look for a module number given a string to search for (e.g., master -l layer)
  -q <info mod>     query the usage-information of a given module number: e.g., master -m 00 -q
                    brings up the help-text from module 00 (spinoza_lineplanning)
  -v <vertices>     manually insert vertices to use as "best_vertex" (module 18). Should be format-
                    ted as -v "lh,rh" (please use two vertices; one for left hemi and one for right
                    hemi > makes life easier)
  -p <prf_model>    switch to specify what type of model to use for the pRF-modeling. For now, the
                    accepted options are 'gauss' for Gaussian model, and 'norm' for Normalization
                    model. Should/can be use for module 17, pRF-fitting
  -c <cat_run>      Do full processing with CAT12, assuming module 8 was skipped. This does itera-
                    tive SANLM-filtering, bias correction, and intensity normalization. Can some-
                    times be overkill, so generally we use CAT12 for the additional segmentations
                    and brain extraction
  -w <wagstyl>      Use Wagstyl's equivolumetric layering for layerification. Use Nighres otherwise
  -x <**kwargs>     Can be used for a variety of options by setting it to ANYTHING other than empty. 
                    Usages include:
                      - spinoza_scanner2bids; denote the session number when you have a regular 
                        pRF-session, as the "-n" flag is used to specify this. 
                      - spinoza_qmrimaps; turn on Universal Pulses
                      - spinoza_fmriprep; remove surface_recon_wf folder. Handy for re-running with
                        new reconstruction
                      - spinoza_bestvertex; disable FreeView during vertex selection
                      - spinoza_extractregions: skip nighres, only do combination of segmentations.
                        Works with '-o' flag.                
                      - spinoza_profiling; specify the type of file to use
  -u <config>       specify configuration file for fMRIprep (see linescanning/misc for examp-
                    les). If not specified, no configuration will be used. If ses-1 is specified,
                    linescanning/misc/fmriprep_config.json is used; above that, fmriprep_con-
                    fig2.json is used. Enter '-u none' if you have multiple sessions and you want
                    to process everything without filtering

Usage:
  master -m <MODULES TO RUN>
  master -m 01,02,03,04 (comma-separated for running multiple modules in succession)
  master -m 00 -q   (print help-text of module 00)
  master -l mgdm    (fetch module number mgdm-module)
  master -m 02 -n prf -x 2

Additional options:
  - Specify a subject to run (for certain modules):   master -m <module> -s <subj-ID>
  - Specify a hemisphere (for certain modules):       master -m <module> -h left
  - Disable overwrite mode (for certain modules):     master -m <module> -o n
  - Specify a particular session to use:              master -m <module> -n 1
  - Specify processing type fMRIprep (anat|func)      master -m <module> -t anat

Available modules:                                     Script                           Time (pp)
  - 00: Register anat ses-1 to ms ses-1 for planning   (spinoza_lineplanning)
  - 01: Make new session for subject                   (spinoza_newBIDSsession)
  - 02: Convert raw files to nifti                     (spinoza_scanner2bids)
  - 03: Reconstruction of line data                    (spinoza_linereconstruction)
  - 04: Estimate T1's from mp2rage and memp2rage       (spinoza_qmrimaps)               00:01:30
  - 05: Register T1 from memp2rage to T1 from mp2rage  (spinoza_registration)           00:03:00
  - 06: Register T1 from mp2rage to MNI152             (spinoza_registration)             -
  - 07: Averaging of (me)mp2rages and other qMRI-maps  (spinoza_averagesanatomies)      00:03:00
  - 08: Bias correction + SANLM denoising              (spinoza_biassanlm)              00:07:00
  - 09: Brain extract (CAT12 || ANTs || FSL)           (spinoza_brainextraction)        00:10:00
  - 10: Noise level estimation                         (spinoza_noiselevelestimation)   00:00:30
  - 11: Dura estimation and skull estimations          (spinoza_createduraskullmasks)   00:08:00
  - 12: Create mask of sagittal sinus                  (spinoza_createsagsinusmask)     00:03:00
  - 13: Combine all masks and apply to average         (spinoza_masking)                00:02:30
  - 14: Surface segmentation with FreeSurfer           (spinoza_segmentfreesurfer)      09:30:00
  - 15: Preprocessing with fMRIprep                    (spinoza_fmriprep)               14:00:00
  - 16: Data denoising with pybest                     (spinoza_denoising)              00:05:00
  - 17: pRF-fitting with pRFpy                         (spinoza_fitprfs)                00:07:00
  - 18: Determine best vertex with pycortex            (spinoza_bestvertex)             00:01:30
  - 19: Tissue segmentation with FAST                  (spinoza_segmentfast)            00:17:00
  - 20: Tissue segmentation with MGDM                  (spinoza_segmentmgdm)            00:11:45
  - 21: Region extraction with nighres                 (spinoza_extractregions)         00:02:00
  - 22: Cortex reconstruction with nighres             (spinoza_cortexreconstruction)   00:05:30
  - 23: Layering with nighres/surface_tools            (spinoza_layering)               00:07:30
  - 24: Subcortex parcellation with nighres            (spinoza_segmentsubcortex)       00:10:00
  - 25: Project line to surface                        (spinoza_line2surface)           00:02:00
  - 26: Sample a dataset across depth with Nighres     (spinoza_profiling)              00:20:00

Notes:
  - Module 5 (register T1 to MNI152) and 13 (brain extract T1 with ANTs) are relatively obsolete
    These commands are therefore commented out.
  - Time = approximate run time per subject > Run time of total pipeline is about 1hr30 on SGE
  - There are two modes we can run this pipeline in, to be specified in the setup:
    a session where we have both MP2RAGE and MP2RAGEME data, and a solo MP2RAGE mode. This can be
    specified by setting the "DATA" variable in the setup script.
    You can see if it was the MP2RAGEME-mode with the "space-average" flag, while the MP2RAGE-mode
    is annotated by "space-mp2rage".
  - To know which mode we're running, type from your programs directory "call_whichmode"

Edits:
  - 20/12/2021: added '-u' flag for custom configurations file for fMRIprep
  - 29/10/2021: added '-x' flag for various options. Mainly to specify the session number for
                pRF-sessions, as you'd have to specify '-n prf' as session, but you'll probably
                like to specify a session number too. You can do that by specifying '-n prf -x 1'
  - 20/10/2021: specified input directory for URIS-MDD project for module 8 and 9. This project
                is not run through Pymp2rage, so needed adjustment. 
                Set cat12-processing to 'brain' by default, as running spinoza_biassanlm before
                CAT12 (spinoza_brainextraction) is preferred.
                Assign 'spinoza_sinusfrommni' to module 7, rather than 'spinoza_averageanatomies', 
                which is a pretty redundant module by now.
  - 18/10/2021: added the '-w' flag to specify Wagstyl's equivolumetric layering for layering mo-
                dule.
  - 18/08/2021: added the '-p' flag to specify the kind of model to use during pRF-fitting. 'Gauss'
                or 'norm'
  - 17/06/2021: added module 26, spinoza_profiling, to sample the values of a particular dataset
                across depth using call_nighresprofsamp to create profile of this dataset. Currently
                using this for URIS to create profiles of T1-values across depth
  - 06/04/2021: added '-l' and '-q' flags for master-command; with 'master -l <string>' you can
                look for a module number given a string. With 'master -m <module> -q' you can ask
                to print the help-stuff from the specified modules
  - 15/03/2021: added '-t' flag for fMRIprep module to run either 'anat' or 'func' workflows
  - 10/02/2021: added subcortex parcellation module after 'layering' module. With that, i moved the
                spinoza_line2surface module to module 25
  - 21/01/2021: added session-switch to most modules to account for situations where one might
                have multiple sessions or even none. Default is set to '1', so if you want to pro-
                cess a different session, specify so with the '-n' flag when calling "master -m X"
  - 20/01/2021: added subject-switch to more modules: 'qmrimaps', 'registration', 'biascorrection',
                'brainextraction', 'createduraskullmask', 'createsagsinusmask', 'denoising', 'fitprfs',
                'bestvertex', 'segmentfast'
                changed 'spinoza_estimateunit1' to 'spinoza_qmrimaps'
  - 14/01/2021: added subject-switches to 'masking', 'fmriprep', 'mgdm', 'region' modules, so that
                in addition to positional arguments a '-s' switch can be specified to loop only over
                the input subject, not the entire 'sub-' list. This '-s' flag HAS to be specified
                before the positional arguments!
  - 12/01/2021: added overwrite mode for the GDH-pipeline, in addition to nicer specification of
                paths in the FreeSurfer and Nighres modules (better path specification instead of
                'just' DIR_DATA_HOME and DIR_DATA_DERIV)
  - 15/12/2020: added overwrite mode for certain modules (00 and 13)
  - 10/12/2020: added module to do recon after nifti-conversion (moved other modules down)
  - 25/10/2020: added module to do pRF-fitting with pRFpy (moved other modules down)
  - 24/10/2020: added module to do denoising with pybest (moved other modules down)
  - 21/10/2020: added module to project line to surface with registration cascade
  - 30/09/2020: added the module to determine the best vertex with pycortex as module 14
  - 23/09/2020: removed bias field correction for UNIT1 module, as we'll do that with fMRIprep
                leaving out freesurfer segmentation from the SEG-module. Included in fMRIprep

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}


#---------------------------------------------------------------------------------------------------
# Error handling
if [[ $# -lt 2 ]] ; then
  echo
  echo "NEED AT LEAST ONE MODULE. echoING HELP AND EXITING"
  Usage >&2
  exit 1
fi

#---------------------------------------------------------------------------------------------------
# Check for which-module switch
if [[ ! -z ${WHICH_MOD} ]]; then
  mod_nr=`get_module_nr ${WHICH_MOD}`
  if [[ ! -z ${mod_nr} ]]; then
    echo "module ${mod_nr} contains \"${WHICH_MOD}\""
  else
    echo "could not find a module associated with \"${WHICH_MOD}\""
  fi

fi

#---------------------------------------------------------------------------------------------------------
# check if there's is a setup file containing the major paths and source it if it exists
# DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
#
# if [[ $(basename ${DIR}) != "shell" ]]; then
#   echo "ERROR: please run master from linescanning/shell"
#   exit 1
# else
#   source $(dirname ${DIR})/bin/call_loadsetup && loadsetup
# fi

call_loadsetup

#---------------------------------------------------------------------------------------------------
# STEP 00: Optimal line planning procedure with registration of anat ses-1 to ms ses-2
module=00

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}
if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_lineplanning
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Optimal line planning procedure with registration of anat ses-1 to ms ses-X"

  #--------------------------------------------------------------------------------------------------------------------------------------------------
  # LOG OF COMMANDS:

  if [[ -z ${SUB} ]]; then
    echo "ERROR: Need a subject number for this module. Specify the subject number with the -s flag in the master script"
    echo "  e.g., ./master -m 00 -s 001"
    exit 1
  fi

  if [[ -z ${HEMI} ]]; then
    echo "ERROR: Need a hemisphere for this module. Specify the subject number with the -h flag in the master script"
    echo "  e.g., ./master -m 00 -s 001 -h left"
    exit 1
  fi

  if [[ -z ${SES} ]]; then
    read -p "Session number not specified; defaulting to \"ses-2\". Sure you want to continue..? (y/n)? " choice
    case "${choice}" in
      y|Y ) c=1;;
      n|N ) c=0;;
      * ) c="invalid";;
    esac

    if [[ ${c} -eq 1 ]]; then
      ses_nr=2
    elif [[ ${c} == "invalid" ]]; then
      echo "Your answer was invalid. Quitting.. Use \"-n X\" to specify your desired session"
      exit 1
    else
      echo "You selected \"no\". Quitting.. Use \"-n X\" to specify your desired session"
      exit 1
    fi
  else
    ses_nr=${SES}
  fi

  # force overwrite (default = yes); no saves time while debugging. Just leave it empty..
  if [[ "${@}" == *"-o"* ]]; then
    echo "Overwrite mode enabled (default)"
    OW="-o"
  else
    OW=""
  fi
  
  subject=${PREFIX}${SUB}
  spinoza_lineplanning ${OW} \
                       -s ${subject} \
                       -n ${ses_nr} \
                       -i ${DIR_DATA_SOURCE}/${subject}/ses-${ses_nr}/planning \
                       -p ${DIR_DATA_DERIV}/pycortex/${subject}/line_pycortex.csv \
                       -h ${HEMI}


  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 01: Make new session for subject
module=01

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_newBIDSsession
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Create folder structure for new session"

  if [[ -z ${SUB} ]]; then
    echo "ERROR: Need a subject number for this module. Specify the subject number with the -s flag in the master script"
    echo "  e.g., ./master -m 01 -s 001"
    exit 1
  fi

  if [[ -z ${SES} ]]; then
    echo "ERROR: Need a session number for this module. Specify the subject number with the -n flag in the master script"
    echo "  e.g., ./master -m 01 -n 1"
    exit 1
  fi

  spinoza_newBIDSsession ${SUB} ${SES}\

  echo "[${module}] DONE"

fi

#---------------------------------------------------------------------------------------------------
# STEP 02: Convert raw files to nifti
module=02

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_scanner2bids
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Convert raw files to nifti"

  if [[ -z ${SES} ]]; then
    echo "ERROR: Need a session number for this module. Specify the subject number with the -n flag in the master script"
    echo "  e.g., ./master -m 02 -n 1"
    exit 1
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  if [[ -z ${KWARGS} ]]; then
    KWARGS=""
  else
    KWARGS="-n ${KWARGS}"
  fi  

  if [[ "${@}" == *"-o"* ]]; then
    echo "Overwrite mode enabled (not default)"
    OW="-o"
  else
    OW=""
  fi  

  spinoza_scanner2bids ${SUBJECT} ${KWARGS} ${OW} ${DIR_DATA_HOME} ${DIR_DATA_SOURCE} ${SES}

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 03: Reconstruct line-data (scripts Luisa)
module=03

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_linereconstruction
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Reconstruct line data with MRecon"

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  if [[ -z ${SES} ]]; then
    SESSION="-n 2"
  else
    SESSION="-n ${SES}"
  fi

  if [[ "${@}" == *"-o"* ]]; then
    echo "Overwrite mode enabled (default)"
    OW="-o"
  else
    OW=""
  fi

  if [[ "${@}" == *"-j"* ]]; then
    SGE="-j"
  else
    SGE=""
  fi    

  spinoza_linereconstruction ${SUBJECT} ${SESSION} ${OW} ${SGE} ${DIR_DATA_HOME} ${DIR_DATA_SOURCE}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_linereconstruction exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 04: Estimate T1's from mp2rage and memp2rage and do some multiparametric mapping
module=04

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_qmrimaps
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Multiparametric mapping"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  if [[ -z ${KWARGS} ]]; then
    UPs=""
  else
    UPs="-u"
  fi

  spinoza_qmrimaps ${SUBJECT} ${SESSION} ${UPs} ${DIR_DATA_HOME} ${DIR_DATA_DERIV}/pymp2rage

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_qmrimaps exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 05: Register T1 from memp2rage to T1 from mp2rage
module=05

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_registration
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Register T1 from mp2rage to MNI152 for sagittal sinus mask"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  if [[ ${DATA:u} == "AVERAGE" ]]; then
    spinoza_registration ${SUBJECT} ${SESSION} ${DIR_DATA_DERIV}/pymp2rage ${DIR_DATA_DERIV}/ants

    if [[ $? -ne 0 ]]; then
      echo "ERROR in master: spinoza_registration exited with non-zero status"
      exit 1
    fi

  else
    echo "The variable \"DATA\" is \"${DATA}\"; must be \"AVERAGE\" for this module."
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 06: Register T1 from mp2rage to MNI152 for sagittal sinus mask
module=06

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_registration
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Register T1 from mp2rage to MNI152 for sagittal sinus mask"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi
  
  if [[ -d ${DIR_DATA_DERIV}/pymp2rage ]]; then
    spinoza_registration ${SUBJECT} ${SESSION} ${DIR_DATA_DERIV}/pymp2rage ${DIR_DATA_DERIV}/ants mni
  else
    spinoza_registration ${SUBJECT} ${SESSION} ${DIR_DATA_HOME} ${DIR_DATA_DERIV}/ants mni
  fi

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_registration exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 07: Create sagittal sinus mask using the MNI-mask & T1w/T2w-ratio
module=07

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_sinusfrommni
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Create sagittal sinus mask using the MNI-mask & T1w/T2w-ratio"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  # if [[ ${DATA:u} == "AVERAGE" ]]; then
  #   spinoza_averageanatomies ${SUBJECT} ${SESSION} ${DIR_DATA_DERIV}/ants ${DIR_DATA_DERIV}/average

  #   if [[ $? -ne 0 ]]; then
  #     echo "ERROR in master: spinoza_averageanatomies exited with non-zero status"
  #     exit 1
  #   fi

  # else
  #   echo "The variable \"DATA\" is \"${DATA}\"; must be \"AVERAGE\" for this module."
  # fi

  if [[ "${@}" == *"-o"* ]]; then
    echo "Overwrite mode enabled (default)"
    OW="-o"
  else
    OW=""
  fi

  if [[ -d ${DIR_DATA_DERIV}/pymp2rage ]]; then
    spinoza_sinusfrommni ${SUBJECT} ${SESSION} ${OW} ${DIR_DATA_DERIV}/pymp2rage ${DIR_DATA_DERIV}/ants ${DIR_DATA_DERIV}/manual_masks  
  else
    spinoza_sinusfrommni ${SUBJECT} ${SESSION} ${OW} ${DIR_DATA_HOME} ${DIR_DATA_DERIV}/ants ${DIR_DATA_DERIV}/manual_masks
  fi

  if [[ $? -ne 0 ]]; then
    echo "ERROR in `basename ${0}`: spinoza_sinusfrommni exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 08: Perform bias field correction with ANTs' N4 algorithm on INV2
module=08

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_biassanlm
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Perform bias field correction and SANLM-filtering"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  if [[ ! -z ${KWARGS} ]]; then
    NO_BIAS="-b"
  else
    NO_BIAS=""
  fi

  if [[ -d ${DIR_DATA_DERIV}/pymp2rage ]]; then
    spinoza_biassanlm ${SUBJECT} ${SESSION} ${NO_BIAS} ${DIR_DATA_DERIV}/pymp2rage ${DIR_DATA_DERIV}/denoised
  else
    spinoza_biassanlm ${SUBJECT} ${SESSION} ${NO_BIAS} ${DIR_DATA_HOME} ${DIR_DATA_DERIV}/denoised
  fi

  # spinoza_biascorrection ${SUBJECT} ${SESSION} ${DIR_DATA_HOME} ${DIR_DATA_DERIV}/ants inv-2

  if [[ $? -ne 0 ]]; then
    echo "ERROR in `basename ${0}`: spinoza_biassanlm exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 09: Brain extraction
module=09

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_brainextraction
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Brain extract MP2RAGE-INV2 with ANTs|FSL|CAT12"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  if [[ "${@}" == *"-o"* ]]; then
    echo "Overwrite mode enabled (default)"
    OW="-o"
  else
    OW=""
  fi

  DO_STUFF="cat12"
  if [[ ${DO_STUFF} ==  "inv2" ]]; then
    spinoza_brainextraction ${SUBJECT} ${SESSION} ${DIR_DATA_DERIV}/ants ${DIR_DATA_DERIV}/skullstripped ${DIR_DATA_DERIV}/manual_masks FSL
  elif [[ ${DO_STUFF} == "cat12" ]]; then

    if [[ "${@}" == *"-c"* ]]; then
      CAT_RUN="-m full"
    else
      CAT_RUN=""
    fi

    spinoza_brainextraction ${SUBJECT} ${SESSION} ${OW} ${CAT_RUN} ${DIR_DATA_DERIV}/denoised ${DIR_DATA_DERIV}/cat12 ${DIR_DATA_DERIV}/manual_masks cat12

  fi

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_brainextraction exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 10: Do noise level estimation with AFNI's automask function
module=10

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_noiselevelestimation
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Noise level estimation with AFNI's automask function"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  # spinoza_noiselevelestimation ${SUBJECT} ${SESSION} ${DIR_DATA_HOME} ${DIR_DATA_DERIV} 0.5
  # if [[ $? -ne 0 ]]; then
  #   echo "ERROR in master: spinoza_noiselevelestimation exited with non-zero status"
  #   exit 1
  # fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 11: Use nighres to get skull and dura mask
module=11

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_createskullduramasks
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Use nighres to get skull and dura mask"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  spinoza_createskullduramasks ${SUBJECT} ${SESSION} ${DIR_DATA_DERIV}/cat12 ${DIR_DATA_HOME} ${DIR_DATA_DERIV}/nighres ${DIR_DATA_DERIV}/manual_masks

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_createskullduramasks exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 12: Create mask of the sagittal sinus with manual edits in ITKsnap
module=12

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_createsagsinusmask
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Create sagittal sinus mask from R2*-image"

  # DATA = MP2RAGE    > arg1 = DIR_DATA_DERIV/pymp2rage
  # DATA = MEMP2RAGE  > arg1 = DIR_DATA_DERIV/pymp2rage
  # DATA = AVERAGE    > arg1 = DIR_DATA_DERIV/ants

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  spinoza_createsagsinusmask ${SUBJECT} ${SESSION} ${DIR_DATA_DERIV}/cat12 ${DIR_DATA_DERIV}/manual_masks itk

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_createsagsinusmask exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 13: Combine all masks and apply to average
module=13

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_masking
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Combine all masks and apply to average"

  if [[ "${@}" == *"-o"* ]]; then
    echo "Overwrite mode enabled (default)"
    OW="-o"
  else
    OW=""
  fi

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  spinoza_masking ${SUBJECT} ${SESSION} ${OW} ${DIR_DATA_DERIV}/cat12 ${DIR_DATA_DERIV}/masked_${space,,} ${DIR_DATA_DERIV}/manual_masks ${DIR_DATA_DERIV}/skullstripped

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_masking exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 14: FreeSurfer
module=14

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_segmentfreesurfer
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Run FreeSurfer outside of fMRIprep"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  spinoza_segmentfreesurfer ${SUBJECT} ${SESSION} ${DIR_DATA_DERIV}/masked_${space,,} all ${DIR_DATA_HOME}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_segmentfreesurfer exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 15: Preprocess data with fMRIprep
module=15

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_fmriprep
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Preprocess session 1 data with fMRIprep"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  # first set default configuration files; overwrite later if we don't want it
  if [[ $((${SES})) -gt 1 ]]; then
    # dealing with a non-standard acquisition
    confFile="-c ${DIR_SCRIPTS}/misc/fmriprep_config2.json"
  else
    confFile="-c ${DIR_SCRIPTS}/misc/fmriprep_config.json"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  if [[ -z ${TYPE} ]]; then
    TYPE="anat"
  else
    if [[ ${TYPE,,} == "func" ]] || [[ ${TYPE,,} == "anat" ]]; then
      TYPE=${TYPE}
    else
      echo
      echo "ERROR: You specified \"${TYPE}\", should be either \"anat\" or \"func\""
      exit 1
    fi
  fi

  if [[ ! -z ${KWARGS} ]]; then
    REMOVE_WF="-r"
  else
    REMOVE_WF=""
  fi

  # decide on config file (overwrite earlier defaults)
  if [[ ! -z ${CONF} ]]; then
    if [[ ${CONF,,} == "none" ]]; then
      confFile=""
    else
      if [[ -f ${CONF} ]]; then
        confFile="-c ${CONF}"
      else
        echo "ERROR: Could not find config file \"${confFile}\""
        exit 1
      fi
    fi
  fi

  if [[ -d ${DIR_DATA_DERIV}/masked_${space,,} ]]; then
    ANAT_DIR=${DIR_DATA_DERIV}/masked_${space,,}
  else
    ANAT_DIR=${DIR_DATA_HOME}
  fi

  spinoza_fmriprep ${SUBJECT} ${SESSION} ${confFile} ${REMOVE_WF} -f ${DIR_DATA_HOME} -m ${TYPE} ${ANAT_DIR} ${DIR_DATA_DERIV} ${DIR_DATA_HOME}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_fmriprep exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 16: fMRI-data denoising with pybest using fmriprep's output
module=16

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_denoising
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Data denoising with pybest"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  # force overwrite (default = yes); no saves time while debugging. Just leave it empty..
  if [[ "${@}" == *"-o"* ]]; then
    echo "Overwrite mode enabled (default)"
    OW="-o"
  else
    OW=""
  fi

  spinoza_denoising ${SUBJECT} ${SESSION} ${OW} ${DIR_DATA_DERIV}/fmriprep ${DIR_DATA_DERIV}/pybest

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_denoising exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 17: pRF-fitting with pRFpy
module=17

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_fitprfs
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] pRF-fitting with pRFpy"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  if [[ -z ${PRF_MODEL} ]]; then
    MODEL=""
  else
    MODEL="-m ${PRF_MODEL}"
  fi

  # insert grid-only flag if master -m 17 -x grid is used
  if [[ ${KWARGS,,} == "grid" ]]; then
    KWARGS="-g"
  else
    KWARGS=""
  fi     

  # force overwrite (default = yes); no saves time while debugging. Just leave it empty..
  if [[ "${@}" == *"-o"* ]]; then
    echo "Overwrite mode enabled (default)"
    OW="-o"
  else
    OW=""
  fi

  spinoza_fitprfs ${SUBJECT} ${SESSION} ${KWARGS} ${OW} ${MODEL} ${DIR_DATA_DERIV}/prf ${DIR_DATA_DERIV}/pybest ${DIR_DATA_SOURCE}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_fitprfs exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 18: Determine best vertex with pycortex
module=18

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_bestvertex
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Determine best vertex with pycortex"

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${VERTICES} ]]; then
    VERT=""
  else
    VERT="-v ${VERTICES}"
  fi

  # force overwrite (default = yes); no saves time while debugging. Just leave it empty..
  if [[ "${@}" == *"-o"* ]]; then
    OW="-o"
  else
    OW=""
  fi

  if [[ ! -z ${KWARGS} ]]; then
    KWARGS="-f"
  else
    KWARGS=${KWARGS}
  fi      

  spinoza_bestvertex ${SUBJECT} ${SESSION} ${VERT} ${KWARGS} ${OW} ${DIR_DATA_HOME} ${DIR_DATA_DERIV} "V1_exvivo.thresh"

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_bestvertex exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 19: FAST segmentation with FSL
module=19

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_segmentfast
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] FAST segmentation with FSL"

  # force overwrite (default = yes); no saves time while debugging. Just leave it empty..
  if [[ "${@}" == *"-o"* ]]; then
    echo "Overwrite mode enabled (default)"
    OW="-o"
  else
    OW=""
  fi

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  spinoza_segmentfast ${SUBJECT} ${SESSION} ${OW} ${SKULLSTRIP} ${DIR_DATA_DERIV}/fsl

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_segmentfast exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 20: MGDM segmentation with nighres
module=20

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_segmentmgdm
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] MGDM segmentation with nighres"

  # force overwrite (default = yes); no saves time while debugging. Just leave it empty..
  if [[ "${@}" == *"-o"* ]]; then
    echo "Overwrite mode enabled (default)"
    OW="-o"
  else
    OW=""
  fi

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  if [[ ${PROJECT} == "URIS-MDD" ]]; then
    spinoza_segmentmgdm ${SUBJECT} ${SESSION} ${OW} -t "gdh" ${DIR_DATA_DERIV}/skullstripped ${DIR_DATA_DERIV}/nighres ${DIR_DATA_DERIV}/manual_masks
  else
    spinoza_segmentmgdm ${SUBJECT} ${SESSION} ${OW} ${DIR_DATA_DERIV}/skullstripped ${DIR_DATA_DERIV}/nighres ${DIR_DATA_DERIV}/manual_masks
  fi

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_segmentmgdm exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 21: Region extraction with nighres
module=21

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_extractregions
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Region extraction with nighres"

  # force overwrite (default = yes); no saves time while debugging. Just leave it empty..
  if [[ "${@}" == *"-o"* ]]; then
    echo "Overwrite mode enabled (default)"
    OW="-o"
  else
    OW=""
  fi

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  if [[ ! -z ${KWARGS} ]]; then
    KWARGS="-c"
  else
    KWARGS=""
  fi    

  roi="cerebrum"
  spinoza_extractregions ${SUBJECT} ${SESSION} ${OW} ${KWARGS} -f ${DIR_DATA_DERIV}/fmriprep ${DIR_DATA_DERIV}/nighres ${DIR_DATA_DERIV}/manual_masks ${roi}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_extractregions exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 22: Cortex reconstruction with nighres
module=22

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_cortexreconstruction
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Cortex reconstruction with nighres"

  # force overwrite (default = yes); no saves time while debugging. Just leave it empty..
  if [[ "${@}" == *"-o"* ]]; then
    echo "Overwrite mode enabled (default)"
    OW="-o"
  else
    OW=""
  fi

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  spinoza_cortexreconstruction ${SUBJECT} ${SESSION} ${OW} ${DIR_DATA_DERIV}/manual_masks ${DIR_DATA_DERIV}/nighres cerebellum

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_cortexreconstruction exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 23: Equivolumetric layering with either nighres or Wagstyl's surface_tools
module=23

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_layering
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Equivolumetric layering"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  if [[ "${@}" == *"-w"* ]]; then
    spinoza_layering ${SUBJECT} ${SESSION} ${FS} st
  else
    spinoza_layering ${SUBJECT} ${SESSION} ${DIR_DATA_DERIV}/nighres nighres
  fi
  
  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_layering exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 24: Subcortex parcellation with MASSP
module=24

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_segmentsubcortex
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Subcortex parcellation with MASSP"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  spinoza_segmentsubcortex ${SUBJECT} ${SESSION} ${DIR_DATA_HOME} ${DIR_DATA_DERIV}/skullstripped ${DIR_DATA_DERIV}/nighres

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_segmentsubcortex exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 25: Project line to surface with a registration cascade
module=25

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_line2surface
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Registration cascade to project line to surface"

  if [[ -z ${SUB} ]]; then
    echo "ERROR: Need a subject number for this module. Specify the subject number with the -s flag in the master script"
    echo "  e.g., ./master -m 24 -s 001"
    exit 1
  fi

  # input anat as defined in module 00
  spinoza_line2surface -s ${subject} -y ${DIR_DATA_HOME}/${subject}/ses-2/anat/${subject}_ses-2_acq-MP2RAGE_T1w.nii.gz -o ${CTX} -i ${NIGHRES}/${subject}/ses-2

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_line2surface exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi

#---------------------------------------------------------------------------------------------------
# STEP 26: Project line to surface with a registration cascade
module=26

# Check whether the module should be executed
echo ${FLAG_executeModule} | grep -q ${module}

if [[ $? -eq 0 ]]; then

  if [[ "${@}" == *"-q"* ]]; then
    spinoza_profiling
    exit 1
  fi

  echo "---------------------------------------------------------------------------------------------------"
  echo "[${module}] Profile sampling using Nighres"

  if [[ -z ${SES} ]]; then
    # Going to assume ses-1 here
    SESSION="-n 1"
  else
    SESSION="-n ${SES}"
  fi

  if [[ -z ${SUB} ]]; then
    SUBJECT=""
  else
    SUBJECT="-s ${SUB}"
  fi

  if [[ "${@}" == *"-o"* ]]; then
    echo "Overwrite mode enabled (default)"
    OW="-o"
  else
    OW=""
  fi

  if [[ -z ${KWARGS} ]]; then
    KWARGS="T2starmap"
  else
    KWARGS=${KWARGS}
  fi    

  # spinoza_profiling ${SUBJECT} ${SESSION} ${OW} ${DIR_DATA_DERIV}/nighres ${DIR_DATA_HOME} T1map
  spinoza_profiling ${SUBJECT} ${SESSION} ${OW} ${DIR_DATA_DERIV}/nighres ${DIR_DATA_HOME} ${KWARGS}

  if [[ $? -ne 0 ]]; then
    echo "ERROR in master: spinoza_segmentsubcortex exited with non-zero status"
    exit 1
  fi

  echo "[${module}] DONE" && echo

fi
