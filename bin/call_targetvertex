#!/usr/bin/env python

import ast
import os
import numpy as np
import sys, getopt
from linescanning import optimal
import warnings
warnings.filterwarnings('ignore')
opj = os.path.join

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_targetvertex

This script calculates the orientation of the line in the first session anatomy based on the sur-
faces as outputted by FreeSurfer and later also the pRF-maps. Eventually it will create a csv-
file containing the most important information about the orientation of the line. The main ope-
rations will be governed by the classes in linescanning/optimal.py. Aside from functional proper-
ties, we can now also set cut off criteria for cortical thickness and sulcal depth. If you do not 
wish to apply a certain filter, just leave it empty and press ENTER. That way, the default value 
(i.e., no thresholding) will be used.

Parameters
----------
    -s|--sub        Subject name as defined in FreeSurfer directory
    -d|--deriv      Path to all derivatives (e.g., freesurfer/pycortex/prf)
    -r|--roi        ROI to be used; must be a label present in <fs_dir>/<subject>/label; default 
                    = V1_exvivo.thresh. It should be following the nomenclature of FreeSurfer but 
                    omitting the 'lh'/'rh' to include both hemispheresin the analysis
    -o|--out        Output file containing translation and rotation values
    -u|--use-prf    Include pRF in the calculation of the best vertex even if you have a pRF-para-
                    meter file to only use surface (anatomical) information
    -v|--vert       list of manually specified vertices instead of based on surface calculation.
                    use the format [5875,8872] with the first vertex in left hemisphere and se-
                    cond in right hemisphere.
    -f|--freeview   Disable FreeView while verifying vertex location. Only do this if you already 
                    know where it's located!
    -p|--prf_file   File containing the pRF-estimates. Required if '--use-prf' is specified
    -e|--use_epi    Use EPI intensity data from fmriprep

Returns
----------
a csv-file called line_pycortex.csv in the pycortex/sub-xxx directory specifying the orientation 
of the line in the first session anatomy

Examples
----------
call_targetvertex -s sub-001 -d /dir/to/derivatives -p prf_params.pkl --use-prf
call_targetvertex -s sub-001 -d /dir/to/derivatives 

Notes
----------
- You only need to specify the paths up until the sub-xxx, assuming a BIDS-like structure
- There are various types of vertex-selection:
    > pRF and surface:
        use both the information from pRF and surface calculations (default). For this we need a 
        pRF-parameter file from call_prf. Additionally, we need the surfaces from FreeSurfer
    > pRF-only:
        will still require the same information as above, but instead you can leave the thres-
        hold for structural properties to default
    > surface-only:
        will require the FreeSurfer surfaces, but if the pRF file is present, set the thres-
        holds to default to not interfere with the mask
    > curvature-only:
        leave all thresholds to default to only look for minimal curvature

---------------------------------------------------------------------------------------------------
    """

    subject     = None
    out         = None
    roi         = "V1_exvivo.thresh"
    use_prf     = False
    use_epi     = False
    verts       = None
    open_fv     = True
    deriv       = None
    prf_file    = None
    srf_flag    = False

    try:
        opts = getopt.getopt(argv,"fuhd:s:t:r:o:b:v:m:n:p:",["help", "deriv=", "sub=", "roi=", "out=", "vert=", "use-prf", "no-freeview", "prf_file=", "use-epi", "srf"])[0]
    except getopt.GetoptError:
        print("ERROR IN ARGUMENT HANDLING!")
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--sub"):
            subject = arg       
        elif opt in ("-r", "--roi"):
            roi = arg
        elif opt in ("-o", "--out"):
            out = arg
        elif opt in ("-d", "--deriv"):
            deriv = arg
        elif opt in ("-p", "--prf_file"):
            prf_file = arg
        elif opt in ("-e", "--use-epi"):
            use_epi = True
        elif opt in ("-u", "--use-prf"):
            use_prf = True                        
        elif opt in ("-f", "--no-freeview"):
            open_fv = False
        elif opt in ("--vert"):
            verts = arg
        elif opt in ("--srf"):
            srf_flag = True            

    if len(argv) < 1:
        print("\nNEED AT LEAST A SUBJECT ID")
        print(main.__doc__)
        sys.exit()

    #----------------------------------------------------------------------------------------------------------------
    # Set inputs
    if verts:
        try:
            verts = np.array(ast.literal_eval(verts))
        except:
            raise ValueError(f"You used '{verts}'. Make sure to use '[x,y,z]' (comma-separated and no spaces)")
    
    optimal.TargetVertex(
        subject,
        prf_file=prf_file,
        use_epi=use_epi,
        deriv=deriv, 
        vert=verts,
        use_prf=use_prf,
        out=out,
        roi=roi,
        webshow=open_fv,
        srf=srf_flag)

if __name__ == "__main__":
    main(sys.argv[1:])
