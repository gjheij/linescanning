#!/usr/bin/env bash
#$ -S /bin/bash
#$ -j Y
#$ -cwd
#$ -V

source ${SETUP_FILE}

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_pybest

wrapper for pybest that takes the output from fMRIprep and denoises the data. The output of this
script is a set up numpy arrays that can be loaded in by prf_fitting.ipynb. It is important to
have pybest in a conda environment, as it uses the newest version of Nilearn which has not been
released yet (https://github.com/nilearn/nilearn). By default, call_pybest will look for an envi-
ronment called fmriprep_denoising, but you can specify your own environment as long as it has py-
best in it. Check for instruction this page https://github.com/lukassnoek/pybest. As far as I've 
tested, it only works with surface files. Volumetric data outputs pepper corn noise pattern.

Usage:
  call_pybest -r <subject number> -n <session number> -o <output directory> -s <space>
              -f <fprep dir> -c <slots>

Arguments:
  -s <sub number>     number of subject's FreeSurfer directory from which you can omit "sub-" (e.g.,
                      for "sub-001", enter "001"). If left empty pybest will process everything it
                      can find in the fmriprep folder
  -n <ses number>     session number. If left empty or 'all', pybest will process everything it 
                      can find in the fmriprep folder.
  -o <output dir>     path to output directory. By default it will create a subject-specific folder,
                      but you can set where that subject folder is going to go. By default this
                      script will output to /projectroot/derivatives/pybest
  -r <space>          the space to process. fMRIprep outputs several kinds of standard spaces such
                      as the MNI152NLin2009cAsym, or FSL-templates, but also fsnative. The latter
                      is the default, because we want to project the results in pycortex.
  -f <fprep dir>      path to fmriprep derivatives directory. Will look by default in the /project/
                      derivatives/fmriprep
  -c <n_slots>        number of slots to use when we're on a cluster
  -p <n_comps>        number of components to use for decomposition. Default = 10
  -t <task ID>        limit pybest processing to a specific task. Default is all tasks in TASK_SES1
                      in the spinoza_setup-file Can also be comma-separated list: task1,task2  
  --raw               undo the z-scoring done by pybest (call_unzscore)

Example:
  call_pybest -s "001" -n "1" -o /derivatives/pybest -r "fsnative" -f /derivatives/fmriprep -c 10
  call_pybest -s "001" -n "1" -o /derivatives/pybest -p 25 -f /derivatives/fmriprep -c 10

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

# set defaults that will be overwritten if flags are given
task_ids=""
sub_input=""
cpu_input=""
ses_input=""
ses_raw=""
output_dir=${DIR_DATA_DERIV}/pybest
input_dir=${DIR_DATA_DERIV}/fmriprep
raw=1
n_comps=10
post_only=0
pre_only=0
pyb_only=0
while getopts :-:s:n:o:f:c:v:r:t:p: arg; do
  case $arg in
    -)
      case "${OPTARG}" in
        no_raw)
          raw=0
          ;;  
        fsaverage)
          in_space="fsaverage"
          ;; 
        fsnative)
          in_space="fsnative"
          ;;
        post_only)
          post_only=1
          ;;
        pre_only)
          pre_only=1
          ;;
        pyb_only)
          pyb_only=1
          ;;                    
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;
      esac;;   
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    o)  outputdir=${OPTARG}
          ;;
    r)  in_space=${OPTARG}
          ;;
    f)  fprepdir=${OPTARG}
          ;;
    c)  n_slots=${OPTARG}
          ;;
    t)  task_ids=${OPTARG}
          ;;  
    p)  n_comps=${OPTARG}
          ;;                    
  esac
done

if [[ $# -lt 4 ]] ; then
  Usage >&2
  exit 1
fi

if [[ -z ${task_ids} ]]; then
  task_ids=${TASK_SES1[@]}
else
  # read specified tasks into array
  IFS=', ' read -r -a tasks <<< "${task_ids}"
  task_ids=${tasks[@]}
  unset IFS
fi

# Make sure we run the specified subject or all subjects pybest can find will be
# processed
if [[ ! -z ${sub} ]]; then
  sub_input="--subject ${sub}"
fi

# Make sure we run the specified session or all sessions pybest can find will be
# processed
base_dir="sub-${sub}/"
if [[ ! -z ${ses} ]]; then
  if [[ ${ses} != "all" ]]; then
    ses_input="--session ${ses}"
    ses_raw="-n ${ses}"
    base_dir+="ses-${ses}"
  fi
fi

# Set output directory if specified, otherwise default to /derivatives/pybest
if [[ ! -z ${outputdir} ]]; then
  output_dir=${outputdir}
fi

# Set input directory if specified, otherwise default to /derivatives/fmriprep
if [[ ! -z ${fprepdir} ]]; then
  input_dir=${fprepdir}
fi

# Make sure we run with the specified amount of slots
if [[ ! -z ${n_slots} ]]; then
  cpu_input="--n-cpus ${n_slots}"
fi

#
if [[ ! -d ${output_dir}/sub-${sub} ]]; then
  mkdir -p ${output_dir}/sub-${sub}
fi 

# define rules
execute_pre=1
if [[ ${post_only} -eq 1 || ${pyb_only} -eq 1 ]]; then
  execute_pre=0
fi

execute_pyb=1
if [[ ${post_only} -eq 1 || ${pre_only} -eq 1 ]]; then
  execute_pyb=0
fi

execute_post=1
if [[ ${pyb_only} -eq 1 || ${pre_only} -eq 1 ]]; then
  execute_post=0
fi    

# loop through tasks; I know pybest can do ALL tasks at once, but it's nice to have a limiter in here
for task_id in ${task_ids[@]}; do
  echo "Running pybest on task: \"${task_id}\""
  if [[ ${in_space} == "fsnative" || ${in_space} == "fsaverage" ]]; then
    
    # save standard deviation and mean in tmp/ folder (pkl files)
    if [[ ${execute_pre} -eq 1 ]]; then
      if [ ${raw} -eq 1 ]; then
        echo "Saving average/standard deviation"
        call_unzscore \
          -s ${sub} \
          ${ses_raw} \
          -o ${outputdir} \
          -f ${input_dir} \
          -t ${task_id} \
          -p ${in_space} \
          --pre

        if [[ $? -ne 0 ]]; then
          echo "ERROR in `basename ${0}`: call_unzscore (--pre) existed with non-zero status"
          exit 1
        fi
      fi
    fi

    if [[ ${execute_pyb} -eq 1 ]]; then

      for hemi in "L" "R"; do

        echo "Dealing with hemi-${hemi}"
        cmd="""pybest \
          ${sub_input} \
          ${ses_input} \
          --task ${task_id} \
          --space ${in_space} \
          --hemi ${hemi} \
          ${cpu_input} \
          --verbose ERROR \
          --save-all \
          --out-dir ${outputdir} \
          ${input_dir} \
          --n-comps ${n_comps}"""

        echo ${cmd}
        ${cmd}

        if [[ $? -ne 0 ]]; then
          echo "ERROR in `basename ${0}`: pybest existed with non-zero status"
          exit 1
        fi

      done
    fi
    
    if [[ ${execute_post} -eq 1 ]]; then
      # undo z-scoring
      if [ ${raw} -eq 1 ]; then
        echo "Un-zcoring output from pybest"

        call_unzscore \
          -s ${sub} \
          ${ses_raw} \
          -o ${output_dir} \
          -f ${input_dir} \
          -t ${task_id} \
          -p ${in_space} \
          --post

        if [[ $? -ne 0 ]]; then
          echo "ERROR in `basename ${0}`: call_unzscore (--post) existed with non-zero status"
          exit 1
        fi          
      fi
    fi
    echo "Done"
    
  else

    # save standard deviation and mean in tmp/ folder (pkl files)
    if [[ ${execute_pre} -eq 1 ]]; then
      if [ ${raw} -eq 1 ]; then
        echo "Saving average/standard deviation"
        call_unzscore \
          -s ${sub} \
          ${ses_raw} \
          -o ${outputdir} \
          -f ${input_dir} \
          -t ${task_id} \
          -p ${in_space} \
          --pre

        if [[ $? -ne 0 ]]; then
          echo "ERROR in `basename ${0}`: call_unzscore (--pre) existed with non-zero status"
          exit 1
        fi         
      fi
    fi

    if [[ ${execute_pyb} -eq 1 ]]; then
      # we got volumetric data, so stuff gets a bit more exotic
      cmd="""pybest \
        ${sub_input} \
        ${ses_input} \
        --out-dir ${outputdir} \
        --task ${task_id} \
        --space ${in_space} \
        --verbose ERROR \
        --save-all \
        ${input_dir} \
        --n-comps ${n_comps}"""

      echo ${cmd}
      ${cmd}

      if [[ $? -ne 0 ]]; then
        echo "ERROR in `basename ${0}`: pybest existed with non-zero status"
        exit 1
      fi 
    fi

    # undo z-scoring
    if [[ ${execute_post} -eq 1 ]]; then
      if [ ${raw} -eq 1 ]; then
        echo "Un-zcoring output from pybest"

        call_unzscore \
          -s ${sub} \
          ${ses_raw} \
          -o ${output_dir} \
          -f ${input_dir} \
          -t ${task_id} \
          -p ${in_space} \
          --post

        if [[ $? -ne 0 ]]; then
          echo "ERROR in `basename ${0}`: call_unzscore (--post) existed with non-zero status"
          exit 1
        fi
      fi

      echo "Done"
            
    fi       

    # apply mask; safe in 'masked'
    out_dir=${output_dir}/${base_dir}
    mask=(`find -L ${out_dir}/preproc -type f -name "*task-${task_id}*" -and -name "*desc-preproc_mask.nii.gz" 2>/dev/null`)

    n_masks=${#mask[@]}
    if [[ ${n_masks} -gt 0 ]]; then
      if [[ ${n_masks} -gt 1 ]]; then
        echo "Found multiple masks in \"${output_dir}\""
        for i in ${mask[@]}; do
          echo " $i"
        done
      else
        echo "Applying \"${mask}\" to nifti-files"

        # dir is different depending on unzcoring or not.
        if [[ ${raw} -eq 1 ]]; then
          ddir="unzscored"
        else
          ddir="denoising"
        fi

        # search for bold files
        bold_files=(`find -L ${out_dir}/${ddir} -type f -name "*task-${task_id}*" -and -name "*desc-denoised_bold.nii.gz" 2>/dev/null`)
        if [[ ${#bold_files[@]} -gt 0 ]]; then

          for bold in ${bold_files[@]}; do
            masked_bold=$(dirname $(dirname ${bold}))/masked/$(basename ${bold})
            if [[ ! -d $(dirname ${masked_bold}) ]]; then
              mkdir -p $(dirname ${masked_bold})
            fi

            # define and run cmd
            echo " Writing ${masked_bold}"
            cmd="""fslmaths ${bold} -mas ${mask} ${masked_bold}"""
            eval ${cmd}

            # check if execution was ok
            if [[ $? -ne 0 ]]; then
              echo "ERROR in `basename ${0}`: fslmaths exited with non-zero status"
              exit 1
            fi

          done
          echo "Done"
        else
          echo "ERROR in `basename ${0}`: could not find files with \"*${ddir}/*\" and \"*desc-denoised_bold.nii.gz\" in \"${out_dir}\"" 
          exit 1
        fi
      fi
    else
      echo "Could not find file with \"*desc-preproc_mask.nii.gz\" in \"${out_dir}/preproc\""
    fi
  fi
done
