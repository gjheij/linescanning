#!/usr/bin/env bash
#$ -S /bin/bash
#$ -j Y
#$ -cwd
#$ -V

source ${DIR_SCRIPTS}/shell/spinoza_setup

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_pybest

wrapper for pybest that takes the output from fMRIprep and denoises the data. The output of this
script is a set up numpy arrays that can be loaded in by prf_fitting.ipynb. It is important to
have pybest in a conda environment, as it uses the newest version of Nilearn which has not been
released yet (https://github.com/nilearn/nilearn). By default, call_pybest will look for an envi-
ronment called fmriprep_denoising, but you can specify your own environment as long as it has py-
best in it. Check for instruction this page https://github.com/lukassnoek/pybest.

Usage:
  call_pybest -r <subject number> -n <session number> -o <output directory> -s <space>
              -f <fprep dir> -c <slots> -e <environment>

Arguments:
  -s <sub number>     number of subject's FreeSurfer directory from which you can omit "sub-" (e.g.,
                      for "sub-001", enter "001"). If left empty pybest will process everything it
                      can find in the fmriprep folder
  -n <ses number>     session number. If left empty pybest will process everything it can find in
                      the fmriprep folder.
  -o <output dir>     path to output directory. By default it will create a subject-specific folder,
                      but you can set where that subject folder is going to go. By default this
                      script will output to /projectroot/derivatives/pybest
  -r <space>          the space to process. fMRIprep outputs several kinds of standard spaces such
                      as the MNI152NLin2009cAsym, or FSL-templates, but also fsnative. The latter
                      is the default, because we want to project the results in pycortex.
  -f <fprep dir>      path to fmriprep derivatives directory. Will look by default in the /project/
                      derivatives/fmriprep
  -c <n_slots>        number of slots to use when we're on a cluster
  -e <environment>    string containing the name of the conda environment. We will check with conda
                      info --envs if the environment exists. By default we will look for something
                      containing fmriprep_denoising if left blank
  --psc               convert data to percent signal change. Default of pybest is zscore.

Example:
  call_pybest -s "001" -n "1" -o /derivatives/pybest -r "fsnative" -f /derivatives/fmriprep -c 10
  call_pybest -s "001" -n "1" -o /derivatives/pybest -r "fsnative" -f /derivatives/fmriprep -c 10
              -e pybest
  call_pybest -s "001" -o /derivatives/pybest -r "MNI152NLin2009cAsym" -f /derivatives/fmriprep

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

# set defaults that will be overwritten if flags are given
task_ids=${TASK_SES1[@]}
sub_input=""
cpu_input=""
check_env="base"
ses_input=""
output_dir=${DIR_DATA_DERIV}/pybest
input_dir=${DIR_DATA_DERIV}/fmriprep
psc=0
while getopts :-:s:n:o:s:f:c:e:z:v:r:t: arg; do
  case $arg in
    -)
      case "${OPTARG}" in
        psc)
          psc=1
          ;;                                               
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;
      esac;;   
    s)  sub=${OPTARG}
          ;;
    n)  ses=${OPTARG}
          ;;
    o)  outputdir=${OPTARG}
          ;;
    r)  in_space=${OPTARG}
          ;;
    f)  fprepdir=${OPTARG}
          ;;
    c)  n_slots=${OPTARG}
          ;;
    e)  env=${OPTARG}
          ;;
    z)  normalization=${OPTARG}
          ;;
    t)  task_ids=(${OPTARG})
          ;;          
  esac
done

if [[ $# -lt 4 ]] ; then
  Usage >&2
  exit 1
fi

#-----------------------------------------------------------------------------
## ACTIVATE ENVIRONMENT WITH PYBEST IN IT (default is fmriprep_denoising)
# Check if specified environment exists, otherwise check for default
if [[ ! -z $env ]]; then
  check_env=${env}
fi

conda_env=`conda info --envs | grep -A0 "${check_env}" | cut -d' ' -f1  `
if [[ -z ${conda_env} ]]; then
  echo
  echo "ERROR in `basename ${0}`: could not find conda environment \"${check_env}\""
  exit 1
fi

# Make sure we run the specified subject or all subjects pybest can find will be
# processed
if [[ ! -z ${sub} ]]; then
  sub_input="--subject ${sub}"
fi

# Make sure we run the specified session or all sessions pybest can find will be
# processed
if [[ ! -z ${ses} ]]; then
  ses_input="--session ${ses}"
  base_dir="sub-${sub}/ses-${ses}"
else
  base_dir="sub-${sub}"
fi

# Set output directory if specified, otherwise default to /derivatives/pybest
if [[ ! -z ${outputdir} ]]; then
  output_dir=${outputdir}
fi

# Set input directory if specified, otherwise default to /derivatives/pybest
if [[ ! -z ${fprepdir} ]]; then
  input_dir=${fprepdir}
fi

# Make sure we run with the specified amount of slots
if [[ ! -z ${n_slots} ]]; then
  cpu_input="--n-cpus ${n_slots}"
fi

#
# source activate ${env}
source activate ${conda_env}
if [[ ! -d ${output_dir}/sub-${sub} ]]; then
  mkdir -p ${output_dir}/sub-${sub}
fi 

if [ ! -d ${input_dir}/${base_dir}/func ]; then
  echo "ERROR in `basename ${0}`: input \"${input_dir}/${base_dir}/func\" does not exist. Run e.g., \"master -m 15 -s ${sub} -t func\" for preprocessing with fMRIPrep"
  exit 1
fi

# loop through tasks; I know pybest can do ALL tasks at once, but it's nice to have a limiter in here
for task_id in ${task_ids[@]}; do
  echo "Running pybest on task: \"${task_id}\""
  if [[ ${in_space} == "fsnative" || ${in_space} == "fsaverage" ]]; then
    for hemi in "L" "R"; do

      if [ ${psc} -eq 1 ]; then
        echo "Saving average/standard deviation"
        call_pybest2psc \
          -s ${sub} \
          -n ${ses} \
          -o ${DIR_DATA_DERIV}/pybest \
          -f ${input_dir} \
          -t ${task_id} \
          -p ${in_space} \
          -h ${hemi} \
          --pre
      fi

      pybest ${sub_input} ${ses_input} --task ${task_id} --space ${in_space} --hemi ${hemi} ${cpu_input} --verbose ERROR --save-all ${input_dir}

      if [ ${psc} -eq 1 ]; then
        echo "Un-zcoring output from pybest"
        call_pybest2psc \
          -s ${sub} \
          -n ${ses} \
          -o ${DIR_DATA_DERIV}/pybest \
          -f ${input_dir} \
          -t ${task_id} \
          -p ${in_space} \
          -h ${hemi} \
          --post
      fi

    done
  else
    pybest ${sub_input} ${ses_input} --task ${task_id} --space ${in_space} --verbose ERROR --save-all ${input_dir}
  fi
done