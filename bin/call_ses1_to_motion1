#!/usr/bin/env bash

source call_bashhelper

function Usage {
  cat <<USAGE

---------------------------------------------------------------------------------------------------
call_ses1_to_motion1

This script warps session 1 anatomy as per output for pymp2rage to the first multi-slice image of 
a given session

It will look for the following files:
  - ses-1 anat: derivatives/<anat_stage>/<subject>/ses-1  (uses 'find_hierarchical_anatomy' func-
                tion if certain stages are not present. Will look in 'denoised' first, then 'pymp-
                2rage', then 'anat' in DIR_DATA_HOME)
  - ses-X anat: $DIR_DATA_HOME/<subject>/ses-X/anat/*motion1*

And output a transformation matrix as:
  $CTX/transforms/<subject>_from-ses1_to-motion1_desc-genaff.mat

Arguments:
  <subject>    subject ID, e.g., sub-001
  <ses nr>     session number, e.g., 2

Usage:
  call_ses1_to_motion1 <subject> <ses_nr>

Example:
  call_ses1_to_motion1 sub-001 2

---------------------------------------------------------------------------------------------------

USAGE
  exit 1
}

if [[ $# -lt 1 ]] ; then
  Usage >&2
  exit 1
fi

#-----------------------------------------------------------------------------
# Check some directories/files
if [[ ! -d $CTX/${1} ]]; then
  call_ctximport -s ${1}
fi

# find anatomy directory hierarchically
INPUT_DIR=`find_hierarchical_anatomy 3`

ses1=`find ${INPUT_DIR}/${1}/ses-1 -type f -name "${1}*" -and -name "*T1w.nii.gz" 2>/dev/null`
ses2=`find ${DIR_DATA_HOME}/${1}/ses-${2}/anat -type f -name "${1}*" -and -name "*motion1*" -and -name "*.nii.gz" 2>/dev/null`

if [[ -z ${ses1} ]] || [[ -z ${ses2} ]]; then
  echo "ERROR in `basename ${0}`: could not find ses-1 or ses-${2} anatomy"
  exit 1
fi

aff=${CTX}/${1}/transforms/${1}_from-ses1_to-ses${2}_rec-motion1_desc-genaff.mat
if [[ ! -d $(dirname ${aff}) ]]; then
  mkdir -p $(dirname ${aff})
fi

echo "run \"itksnap -g ${ses2} -o ${ses1}\" to verify registration"
echo
cmd="call_antsregistration ${ses2} ${ses1} $(dirname ${aff})/$(basename ${aff} genaff.mat) rigid"
echo ${cmd}
exec ${cmd}
