#!/usr/bin/env python

# # ME-MP2RAGE
#
# `MEMP2RAGE` is a subclass of `MP2RAGE` to can deal with multi-echo MP2RAGE data.
# In such a dataset, you collect multiple echoes for the second inversion time. These echoes are all T2\*-weighted
# and by fitting an exponentially decaying curve to their signal intensities, you can estimate the quantitative
# T2\* map of the image.
#
# Note that segmentation of gray vs white matter, as well as subcortical nuclei can be considerably improved by not using only T1, but also T2(\*) information.
#
# We start by importing the MEMP2RAGE-class (rather than the MP2RAGE-class).

from pymp2rage import MEMP2RAGE
import os
import pathlib
import sys, getopt
import json
import warnings
from bids import BIDSLayout
from nilearn import image
import nibabel as nb
import platform
from bids import BIDSLayout
import numpy as np
from linescanning.utils import get_file_from_substring, remove_files
warnings.filterwarnings("ignore")
opj = os.path.join
osj = os.sep.join
opb = os.path.basename

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_mp2rageme

This script is a wrapper for the memp2rage object that can calculate a Unified T1-weighted image and 
a quantitative T1 map, based on the magnitude and phase-information of the two volumes of a MP2RAGE-
sequence (Marques et al., 2010). It can also further correct this map for B1 inhomogenieties using 
a B1 map (Marques et al., 2014) and calculated several parametric maps (R2*, t1map, t2*)

Args:
    -s|--subject <sub>      subject ID (in digits; 'sub-' is appended) [default = '999']. Needed to 
                            for the json-files
    -i|--inputdir <dir>     project root directory with the subject-directories on which we need 
                            to run the script. <subject> will be appended, as well as the session 
                            nr if specified
    -o|--outputdir <dir>    path to output directory; you should specify <subject>/<ses-?> yourself
    -b|--outputbase <name>  if you don't want <subject_ID>_ses-<session>_acq-MP2RAGE, specify a dif-
                            ferent prefix for output files
    -c|--mask               make INV2 mask with SPM+FSL to remove background noise induced by the 
                            combination of INV-images. Note that not doing this will results in pat-
                            terns of noise around the brain which will confuse automated segmentation 
                            softwares 

Outputs:
    r2star (Nifti1Image):       Relaxation map (1/T2*)
    t2star (Nifti1Image):       T2*-weighted image
    t2starmap (Nifti1Image):    Quantitative T2* map
    t1map (Nifti1Image):        Quantitative T1 map
    t1w_uni (Nifti1Image):      Bias-field corrected T1-weighted image
    s0 (Nifti1Image):           Residual (S0) map

Example:
    call_mp2rageme -s sub-999 -i $DIR_DATA_HOME -o $DIR_DATA_DERIV/pymp2rage -b sub-999_acq-MP2-
    RAGME
    call_mp2rageme -s sub-999 -i $DIR_DATA_HOME -o $DIR_DATA_DERIV/pymp2rage -b sub-999_acq-MP2-
    RAGME -c

Notes:
    Assumes you ran spinoza_scanner2bids before. If not, change the required filenames in the
    script; by default, we'll look for files with 'acq-MP2RAGEME' and 'inv' in the filename. In to-
    tal, there must be 10 files: 2x INV1, 8x INV2 (mag/phase for different echo times 1,2,3,4):
    - INV1          ('inv-1_part-mag')
    - INV1ph        ('inv-1_part-phase')
    - INV2 e1-4,    ('inv-2_echo-[1-4]_part-mag')
    - INV2ph e1-4   ('inv-2_echo-[1-4]_part-phase')
---------------------------------------------------------------------------------------------------
    """

    inputdir    = ''
    subject     = ''
    outputdir   = None
    outputbase  = "sample_desc"
    do_stuff    = False

    try:
        opts = getopt.getopt(argv,"hci:s:n:o:b:",["help", "inputdir=", "subject=", "outputdir=", "outputbase=", "ups", "mask"])[0]
    except getopt.GetoptError:
        print("ERROR while handling arguments; did you specify an illegal/non-defined argument?")
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-i", "--inputdir"):
            inputdir = arg
        elif opt in ("-o", "--outputdir"):
            outputdir = arg
        elif opt in ("-s", "--subject"):
            subject = arg
        elif opt in ("-b", "--outputbase"):
            outputbase = arg
        elif opt in ("-c", "--mask"):
            do_stuff = True

    if len(argv) < 6:
        print("NOT ENOUGH ARGUMENTS SPECIFIED")
        print(main.__doc__)
        sys.exit(1)

    # Define paths to images
    bids_fn = BIDSLayout(opj(inputdir), validate=False).get(extension=['nii.gz'], return_type='file')
    select_fn = get_file_from_substring(['inv', 'acq-MP2RAGEME'], bids_fn)
    select_fn.sort()

    if len(select_fn) != 10:
        print("For MEMP2RAGE-reconstruction we should have 10 files; got {}".format(len(select_fn)))
        sys.exit(1)

    print("Loading all images to the memp2rage object")
    memp2rage = MEMP2RAGE(
        echo_times=[0.006, 0.0145, 0.023, 0.0315], # TEs of second inversion in seconds
        MPRAGE_tr=6.723,
        invtimesAB=[0.67, 3.68],
        flipangleABdegree=[4,4],
        nZslices=150,
        FLASH_tr=[0.0062, 0.031246], # TRs of the first and second GRE block are
        inv1=select_fn[0],
        inv1ph=select_fn[1],
        inv2=[select_fn[2],select_fn[4],select_fn[6],select_fn[8]],
        inv2ph=[select_fn[3],select_fn[5],select_fn[7],select_fn[9]]
        )

    # create output directory
    pathlib.Path(outputdir).mkdir(parents=True, exist_ok=True)

    # Calculate and right multiparametric maps to outputdir
    OUTPUT  = {
        'r2starmap':   opj(outputdir, f'{outputbase}_R2starmap.nii.gz'),
        't1w_uni':     opj(outputdir, f'{outputbase}_T1w.nii.gz'),
        't1map':       opj(outputdir, f'{outputbase}_T1map.nii.gz'),
        't2starw':     opj(outputdir, f'{outputbase}_T2starw.nii.gz'),
        't2starmap':   opj(outputdir, f'{outputbase}_T2starmap.nii.gz'),
        's0':          opj(outputdir, f'{outputbase}_S0.nii.gz')
        }

    def write_nifti(FILE, DESC):
        if os.path.isfile(FILE):
            print(" {} already exists".format(opb(FILE)))
        else:
            print(" writing " + opb(FILE))

            base_path = None
            sp = select_fn[0].split(os.sep)
            for i in sp:

                # try to read prefix
                try:
                    pref = os.environ.get("SUBJECT_PREFIX")
                except:
                    pref = "sub-"

                if i.startswith(pref) and not i.endswith('.nii.gz'):
                    base_path = osj(sp[sp.index(i)+1:-1])
                    break

            if DESC == 'r2starmap':
                memp2rage.r2starmap.to_filename(FILE)
                params = {
                    "BasedOn": [opj(base_path, opb(select_fn[i])) for i in np.arange(2,10,2)],
                    "EstimationReference": "Caan et al., 2019",
                    "EstimationAlgorithm": "Ordinary Least Squares in Log-space",
                    "EstimationSoftwareName": "pymp2rage",
                    "EstimationSoftwareVer": "v0.1",
                    "EstimationSoftwareLang": "python {}".format(platform.python_version()),
                    "EstimationSoftwareEnv": "{}".format(platform.platform())
                }

                JSON_FILE = FILE.split('.')[0]+'.json'
                if os.path.isfile(JSON_FILE):
                    print(f" {opb(JSON_FILE)} already exists")
                else:
                    print(f" writing {opb(JSON_FILE)}")

                with open(JSON_FILE, "w+") as file:
                    json.dump(params, file, indent=4)

            elif DESC == 't1w_uni':
                memp2rage.t1w_uni.to_filename(FILE)
                params = {
                    "BasedOn": [opj(base_path, opb(select_fn[i])) for i in range(4)],
                    "EstimationReference": "Caan et al., 2019",
                    "EstimationAlgorithm": "memp2rage unified T1-weighted image",
                    "EstimationSoftwareName": "pymp2rage",
                    "EstimationSoftwareVer": "v0.1",
                    "EstimationSoftwareLang": "python {}".format(platform.python_version()),
                    "EstimationSoftwareEnv": "{}".format(platform.platform())
                }

                JSON_FILE = FILE.split('.')[0]+'.json'
                if os.path.isfile(JSON_FILE):
                    print(f" {opb(JSON_FILE)} already exists")
                else:
                    print(f" writing {opb(JSON_FILE)}")

                with open(JSON_FILE, "w+") as file:
                    json.dump(params, file, indent=4)

            elif DESC == 't1map':
                memp2rage.t1map.to_filename(FILE)
                params = {
                    "BasedOn": [opj(base_path, opb(select_fn[i])) for i in range(4)],
                    "EstimationReference": "Caan et al., 2019",
                    "EstimationAlgorithm": "memp2rage T1 map",
                    "EstimationSoftwareName": "pymp2rage",
                    "EstimationSoftwareVer": "v0.1",
                    "EstimationSoftwareLang": "python {}".format(platform.python_version()),
                    "EstimationSoftwareEnv": "{}".format(platform.platform())
                }

                JSON_FILE = FILE.split('.')[0]+'.json'
                if os.path.isfile(JSON_FILE):
                    print(f" {opb(JSON_FILE)} already exists")
                else:
                    print(f" writing {opb(JSON_FILE)}")

                with open(JSON_FILE, "w+") as file:
                    json.dump(params, file, indent=4)

            elif DESC == 't2starw':
                pass
                memp2rage.t2starw.to_filename(FILE)
                params = {
                    "BasedOn": [opj(base_path, opb(select_fn[i])) for i in np.arange(2,10,2)],
                    "EstimationReference": "Caan et al., 2019",
                    "EstimationAlgorithm": "Ordinary Least Squares in Log-space",
                    "EstimationSoftwareName": "pymp2rage",
                    "EstimationSoftwareVer": "v0.1",
                    "EstimationSoftwareLang": "python {}".format(platform.python_version()),
                    "EstimationSoftwareEnv": "{}".format(platform.platform())
                }

                JSON_FILE = FILE.split('.')[0]+'.json'
                if os.path.isfile(JSON_FILE):
                    print(f" {opb(JSON_FILE)} already exists")
                else:
                    print(" writing " + opb(JSON_FILE))

                with open(JSON_FILE, "w+") as file:
                    json.dump(params, file, indent=4)

            elif DESC == 't2starmap':
                memp2rage.t2starmap.to_filename(FILE)
                params = {
                    "BasedOn": [opj(base_path, opb(select_fn[i])) for i in range(4)],
                    "EstimationReference": "Caan et al., 2019",
                    "EstimationAlgorithm": "MP2RAGE unified T1-weighted image",
                    "EstimationSoftwareName": "pymp2rage",
                    "EstimationSoftwareVer": "v0.1",
                    "EstimationSoftwareLang": "python {}".format(platform.python_version()),
                    "EstimationSoftwareEnv": "{}".format(platform.platform())
                }

                JSON_FILE = FILE.split('.')[0]+'.json'
                if os.path.isfile(JSON_FILE):
                    print(f" {opb(JSON_FILE)} already exists")
                else:
                    print(f" writing {opb(JSON_FILE)}")

                with open(JSON_FILE, "w+") as file:
                    json.dump(params, file, indent=4)

            elif DESC == 's0':
                pass
                memp2rage.s0.to_filename(FILE)
                params = {
                    "BasedOn": [opj(base_path, opb(select_fn[i])) for i in np.arange(2,10,2)],
                    "EstimationReference": "Caan et al., 2019",
                    "EstimationAlgorithm": "Ordinary Least Squares in Log-space",
                    "EstimationSoftwareName": "pymp2rage",
                    "EstimationSoftwareVer": "v0.1",
                    "EstimationSoftwareLang": "python {}".format(platform.python_version()),
                    "EstimationSoftwareEnv": "{}".format(platform.platform())
                }

                JSON_FILE = FILE.split('.')[0]+'.json'
                if os.path.isfile(JSON_FILE):
                    print(f" {opb(JSON_FILE)} already exists")
                else:
                    print(f" writing {opb(JSON_FILE)}")

                with open(JSON_FILE, "w+") as file:
                    json.dump(params, file, indent=4)

    print("Creating output files")
    for p in OUTPUT:
        write_nifti(OUTPUT[p], p)
        
    if do_stuff:
        brainmask = opj(outputdir, f'{outputbase}_desc-spm_mask.nii.gz')
        print(brainmask)
        if not os.path.exists(brainmask):

            try:
                print(f"Make FSL mask from {select_fn[2]}")
                cmd = f"bet2 {select_fn[2]} {opj(outputdir, 'tmp')} -m -f 0.2"
                os.system(cmd)
            except:
                pass
            
            try:
                print(f"Make SPM mask from {select_fn[2]}")
                cmd = f'call_spmmask {select_fn[2]} {brainmask} y'
                os.system(cmd)
            except:
                pass
            
            # SPM-mask sometimes gets rid of a part of the cerebellum; adding FSL's bet2 mask to it improves this area, 
            # but also leaves in more dura. This will be removed, however, during the CAT12 stage
            if os.path.exists(brainmask) and os.path.exists(opj(outputdir, 'tmp_mask.nii.gz')):
                
                print("Combining SPM & FSL mask to include cerebellum too")

                new_mask = image.math_img('(spm + fsl) > 0', spm=brainmask, fsl=opj(outputdir, 'tmp_mask.nii.gz'))
                new_mask.to_filename(brainmask)

                # remove files starting with 'tmp'
                remove_files(outputdir, 'tmp', ext=False)

        # remove pepper noise pattern around brain
        print("Removing noise pattern around the brain")
        os.system(f"call_rmbackground -t {OUTPUT['t1w_uni']} -m {brainmask} -i {select_fn[2]} -o {OUTPUT['t1w_uni']}")
        print("TIP: check the brain mask; if needed, edit it, remove T1w.nii.gz-file and re-run")

        # truncate image intensities
        cmd = f"ImageMath 3 {OUTPUT['t1w_uni']} TruncateImageIntensity {OUTPUT['t1w_uni']} 0.01 0.999 256"
        try:
            print("Winsorizing image intensities [0.01,0.999] with 256 bins")
            os.system(cmd)
        except:
            print("Could not run 'ImageMath' to truncate image intensities. Check the contrast and use 'call_clipimage' if the image is too dark..")

    print("Done")

if __name__ == "__main__":
    main(sys.argv[1:])
