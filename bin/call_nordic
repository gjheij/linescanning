#!/bin/bash
#$ -S /bin/bash
#$ -cwd
#$ -j Y
#$ -V

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_nordic

Applies the NORDIC algorithm to whole-brain data. Requires the magnitude image, the phase image, and
an output name. We'll try to read the run-ID from the input file to create a template script. This
can be useful when you want to submit multiple NORDIC processes to a cluster as it avoids that the
template script is overwritten before another has initiated. If you want .nii output from NORDIC, 
rather than .nii.gz, set the output file to .nii. Internally, we'll convert any .nii file to .nii.gz
for other operations. If the output file has .nii extension, the final output will not be gzip'ed

Args:
  --mag     use magnitude only
  --tsnr    make tSNR images before and after NORDIC
  <mag>     magnitude image
  <phase>   phase image
  <output>  nordic'ed output

Usage:
  call_nordic [options] <mag file> <phase file> <nordic output>

Example:
  call_nordic func_mag.nii.gz func_phase.nii.gz func_nordic.nii.gz          # mag + phase
  call_nordic --mag func_mag.nii.gz func_phase.nii.gz func_nordic.nii.gz    # mag only
  call_nordic --tsnr func_mag.nii.gz func_phase.nii.gz func_nordic.nii.gz   # calculate tSNR

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

#-----------------------------------------------------------------------------
# Deal with arguments
mag_only=0
make_tsnr=0
while getopts :-:hmv: arg; do
  case ${arg} in
    -)
      case "${OPTARG}" in
        mag)
          mag_only=1
          ;;  
        tsnr)
          make_tsnr=1
          ;;   
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;
      esac;;    
    m)  mag_only=1
        ;;
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage >&2
  exit 1
fi

IMG_MAGN=${@:$OPTIND:1}
IMG_PHASE=${@:$OPTIND+1:1}
IMG_NORDIC=${@:$OPTIND+2:1}

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Add entire path if just filename is specified
fn_mag=`fetch_filepath ${IMG_MAGN}`
fn_phase=`fetch_filepath ${IMG_PHASE}`
fn_nordic=`fetch_filepath ${IMG_NORDIC}`

ext_mag=`fetch_extension ${IMG_MAGN}`
if [[ ${ext_mag} == "gz" ]]; then
  nii_mag=".nii.gz"
else
  nii_mag=".nii"
  gzip ${fn_mag}
fi

ext_ph=`fetch_extension ${IMG_PHASE}`
if [[ ${ext_ph} == "nii" ]]; then
  gzip ${fn_phase}
fi

# check if datatype != FLOAT64; might crash..
dtype=`fslval ${fn_mag} data_type`
if [ ${dtype} == "FLOAT64" ]; then
  echo "Changing data_type of magnitude-image from float64 to uint16"
  call_setdtype ${fn_mag}
fi

json_mag=$(dirname ${fn_mag})/$(basename ${fn_mag} ${nii_mag}).json
call_json ${json_mag} "Nordic" "off"

#-----------------------------------------------------------------------------
# Get extension from input file
ext_nordic=`fetch_extension ${fn_nordic}`

# nordic output
if [[ ${ext_nordic} == "gz" ]]; then
  nii_ext=".nii.gz"
else
  nii_ext=".nii"
fi
fn_nordic=$(dirname ${fn_nordic})/$(basename ${fn_nordic} ${nii_ext})

# try to get run-ID from input file
run_id=`run_id ${fn_nordic}`

#-----------------------------------------------------------------------------
# Create new script (matlab scripts cannot have hyphens, so switch them out for underscores..)
new_script=$(dirname ${fn_mag})/$(echo "$(basename ${fn_mag} .nii.gz)" | tr '-' '_').m #nordic${run_id}.m
if [[ -f ${new_script} ]]; then
  rm -r ${new_script}
fi

#-----------------------------------------------------------------------------
# Run new script
if [[ -f ${fn_mag} && -f ${fn_phase} ]]; then

  make_nordic_script ${fn_mag} ${fn_phase} ${fn_nordic} ${mag_only} ${new_script}

  # calculate tSNR before nordic
  if [[ ${make_tsnr} -eq 1 ]]; then
    echo "Calculating tSNR pre-NORDIC"
    call_tsnr2 --clean ${fn_mag} $(dirname ${fn_mag})/$(basename ${fn_mag} ${nii_ext})_tsnr_pre_nordic${nii_ext}
  fi
  
  # call_matlab = in call_bashhelper
  call_matlab ${new_script}

  if [[ $? -ne 0 ]]; then
    echo "ERROR: matlab exited with non-zero status"
    exit 1
  fi

else
  echo "Missing files for NORDIC; need a magnitude & phase image, got \"${IMG_MAGN}\" and \"${IMG_PHASE}\""
fi

#-----------------------------------------------------------------------------
# Reset extension

if [[ ${ext_nordic} == "gz" ]]; then
  gzip ${fn_nordic}.nii 2>/dev/null
  echo "Compressing NORDIC'ed output"
  nord_file=${fn_nordic}${nii_ext}
else
  nord_file=${fn_nordic}${nii_ext}
fi

# add json message
if [[ ${mag_only} -eq 1 ]]; then
  msg="Magnitude only"
else
  msg="Phase+Magnitude"
fi

call_json ${fn_nordic}.json "Nordic" ${msg}

# make post NORDIC tSNR
if [[ ${make_tsnr} -eq 1 ]]; then
  echo "Calculating tSNR post-NORDIC"
  call_tsnr2 --clean ${nord_file} $(dirname ${fn_mag})/$(basename ${fn_mag} ${nii_ext})_tsnr_post_nordic${nii_ext}
fi

# copy geometry from input image
fslcpgeom ${nord_file} ${nord_file}