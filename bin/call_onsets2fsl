#!/usr/bin/env python
#$ -j Y
#$ -cwd
#$ -V

import mkl
mkl.set_num_threads=1

import ast
import os
import sys
import getopt
from linescanning import (
    utils,
    dataset)
opj = os.path.join

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_onsets2fsl

This script converts tsv-files from ExpTools2 to 3-column event-files that are compatible with FSL.
Just give a path, and all tsv-files found will be convertedor a very select part of the dataset. 

Parameters
----------        
  -i|--in       subject-directory containing the files that need to be run through Topup. Defaults 
                to DIR_DATA_HOME as per spinoza_setup; can also by a tsv-file
  -o|--out      output directory containing the topup'ed data. Easiest is to give the fMRIPrep fol-
                der, it will be formatted accordingly automatically. Defaults to <input_dir>/events
  --verbose     turn on verbose
  --ix          take number of ev as output name, rather than actual event name. This can be useful
                in cases where your events consist of long float numbers
  --phase_onset flag to define the phase from which to extract the onset files. Usually, you have 
                an experiment with 2 phases: stimulus (0) and inter-trial intervals (1). Sometimes 
                these phases are swapped, so you can use this flag to tell the function which phase
                was the stimulus onset
    
Example
----------
>>> call_onsets2fsl --in $DIR_DATA_HOME/sub-001/ses-2
>>> call_onsets2fsl --in $DIR_DATA_HOME/sub-001/ses-2 --ix
>>> call_onsets2fsl --in $DIR_DATA_HOME/sub-001/ses-2/sub-001_task-stim_run-1_events.tsv --phase_
    onset 0

---------------------------------------------------------------------------------------------------
"""

    inputdir = None
    outputdir = None
    verbose = False
    duration = "stim"
    add_button = False
    maxdepth = None
    exclude = None
    add_search = None
    button_duration = 1
    from_event = True
    phase_onset = 1

    try:
        opts = getopt.getopt(argv,"hi:o:",["help", "in=", "out=", "verbose", "button", "maxdepth=", "exclude=", "filters=", "duration=", "button_duration=","ix", "phase_onset="])[0]
    except getopt.GetoptError:
        print("ERROR while reading arguments; did you specify an illegal argument?")
        print(main.__doc__)
        sys.exit(2)
    
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-i", "--in"):
            inputdir = arg
        elif opt in ("-o", "--out"):
            outputdir = arg
        elif opt in ("-d", "--duration"):
            duration = float(arg)
        elif opt in ("--verbose"):
            verbose = True
        elif opt in ("--button"):
            add_button = True
        elif opt in ("--maxdepth"):
            maxdepth = int(arg)
        elif opt in ("--exclude"):
            exclude = arg
        elif opt in ("--filters"):
            add_search = arg            
        elif opt in ("--button_duration"):
            button_duration = float(arg)  
        elif opt in ("--ix"):
            from_event = False
        elif opt in ("--phase_onset"):
            phase_onset = int(arg)
        
    if len(argv) < 1:
        print(main.__doc__)
        sys.exit()

    # check if directory exists
    if not os.path.exists(inputdir):
        raise ValueError(f"Directory '{inputdir}' does not exist")
    
    # parse out comma's
    if isinstance(add_search, str):
        if "," in add_search:
            add_search = add_search.split(",")
    
    if isinstance(exclude, str):
        if "," in exclude:
            exclude = exclude.split(",")
    
    # check if input is file or directory
    if os.path.isfile(inputdir):
        inputdir = os.path.abspath(inputdir)
        tsv_files = inputdir

        # set default output directory
        if not isinstance(outputdir, str):
            outputdir = opj(os.path.dirname(inputdir), "events")

    else:

        # set default output directory
        if not isinstance(outputdir, str):
            outputdir = opj(inputdir, "events")

        # find all tsv- 
        tsv_files = utils.FindFiles(inputdir, extension="tsv", exclude=exclude, filters=add_search).files

    # make directory
    if not os.path.exists(outputdir):
        os.makedirs(outputdir)

    if isinstance(tsv_files, list):
        if len(tsv_files) < 1:
            raise ValueError(f"Could not find files ending with '*tsv' in '{inputdir}' (exclude = {exclude} | filters = {add_search})")
        
    # plop in object
    exp_ = dataset.ParseExpToolsFile(
        tsv_files, 
        use_bids=True, 
        stim_duration=duration,
        verbose=verbose,
        button=add_button,
        button_duration=button_duration,
        phase_onset=phase_onset
    )

    # save as 3 column format
    exp_.onsets_to_fsl(
        output_dir=outputdir,
        duration=duration,
        from_event=from_event
    )
    
if __name__ == "__main__":
    main(sys.argv[1:])
