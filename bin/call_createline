#!/usr/bin/env python

import os, sys
import numpy as np
import nibabel as nb
from linescanning.image import create_line_from_slice

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_createline

This super short script creates a nifti image of the line-contours based on the single slice image.
It assumes your slice gap was 4 voxels, +2 and -2 from the middle. It returns a nifti image with
high values of where the box was.

Args:
    <input file>        string-like path to file to extract from
    <output file>       string-like path to output new volume to
    <line width>        int value of line thickness (default 4, larger for visibility purposes). It
                        will add half of the <width> in both directions from the center, so <width>
                        has to be a divideable by 2. Even numbers only!
    <foldover>          foldover direction, can be 'FH', 'AP', or 'LR'. Could be read from the
                        sub-xxx_desc-info.csv file.

Outputs
    output file         new volume containing the extracted data from input file

Usage:
    call_createline <input> <output> <width> <foldover direction>

Example:
    call_createline input.nii.gz output.nii.gz 16 FH

---------------------------------------------------------------------------------------------------

    """

    in_file     = None
    out_file    = None
    width       = 16
    fold        = "FH"

    if len(argv) < 2:
        print("NOT ENOUGH ARGUMENTS SPECIFIED")
        print(main.__doc__)
        sys.exit()
    elif len(argv) == 4:
        in_file     = argv[0]
        out_file    = argv[1]
        width       = argv[2]
        fold        = argv[3]
    elif len(argv) == 2:
        in_file     = argv[0]
        out_file    = argv[1] 

    if os.path.exists(in_file):
        create_line_from_slice(in_file, out_file=out_file, width=width, fold=fold)
    else:
        raise FileNotFoundError(f"Could not find specified file: {in_file}")

if __name__ == "__main__":
    main(sys.argv[1:])
