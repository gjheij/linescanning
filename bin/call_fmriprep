#!/bin/bash
#$ -S /bin/bash
#$ -cwd
#$ -j Y
#$ -V
#$ -pe smp 5
#Template provided by Daniel Levitas of Indiana University
#Edits by Andrew Jahn, University of Michigan, 07.22.2020

call_loadsetup

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_fmriprep

Wrapper for the fmriprep which is either run locally or submitted to a SGE-cluster by specifying the
last argument as 'SGE' or 'local'. Default is SGE, so if you're on the cluster you can leave it emp-
ty. Do you want to run it locally, make sure you have all dependencies installed and specify the flag
'local'.

There's also a bunch of other things you can customize, but to keep it as simple as possible without
making it similar to the fmriprep call itself, see arguments for customizable options

Arguments:
  -s <sub number>   number of subject's directory from which you can omit "sub-" (e.g., for "sub-001",
                    enter "001")
  -m <mode>         run anatomical workflow only ('anat') or run everything (leave empty). Default is
                    'anat' to get the segmentations right
  -r <root>         project root directory from which to run fmriprep. Default is DIR_DATA_HOME
  -d <derivatives>  derivatives directory. Default is DIR_DATA_DERIV
  -c <SGE|local>    if 'SGE', the script is submitted, while if 'local' is specified, the script is
                    run locally. Takes ages, therefore 'SGE' is default
  -i <simg>         singularity image that can be specified if -c flag is set to SGE
  -b <binding>      binding point that can be specified if -c flag is set to SGE
  -w <work>         working directory to store intermediate files. Default is PATH_HOME/programs/
                    packages/fmriprep
  -l <license>      path to freesurfer license. Make sure license is after the path specified with the
                    -b flag (binding point) if SGE is specified!
  -x <config>       specify config file to guide fMRIprep
  -t <task ID>      limit the preprocessing to a certain task; instead of this flag you can also 
                    use a configuration file to make the criteria more explicit                
  -u                skip fMRIPrep, but re-do the 'boldref'-images and copy the bold-to-T1w warps

Example:
  call_fmriprep -s 001 (simplest form, runs the entire pipeline)
  call_fmriprep -s 001 -m anat (runs anatomical workflows only)

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

#-----------------------------------------------------------------------------
# Deal with arguments
WARP_ONLY=0
bbr_flag=""
while getopts :-:us:m:r:d:c:i:b:w:l:x:t: arg
do
  case ${arg} in
    -)
      case "${OPTARG}" in
        no_bbr)
          bbr_flag="--force-no-bbr"
          # cannot use no-bbr and header registration so make init variable empty
          BOLD_T1W_INIT=""
          ;;
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}" >&2
          fi
          ;;
      esac;;    
    s)  subj_ID=${OPTARG}
          ;;
    m)  MODE=${OPTARG}
          ;;
    r)  ROOT=${OPTARG}
          ;;
    d)  DERIV=${OPTARG}
          ;;
    c)  SGE=${OPTARG}
          ;;
    i)  IMG=${OPTARG}
          ;;
    b)  BIND=${OPTARG}
          ;;
    w)  WORK=${OPTARG}
          ;;
    l)  LIC=${OPTARG}
          ;;
    x)  CONFIG=${OPTARG}
          ;;
    t)  TASK_ID=${OPTARG}
          ;;
    u)  WARP_ONLY=1
          ;;            
  esac
done

if [[ $# -lt 1 ]] ; then
  Usage >&2
  exit 1
fi

#-----------------------------------------------------------------------------
source call_bashhelper # gives access to default fMRIprep container

#-----------------------------------------------------------------------------
if [[ -z ${subj_ID} ]]; then
  echo "Need at least a subject ID!"
  Usage >&2
  exit 1
fi

#-----------------------------------------------------------------------------
# Set default mode if none specified
if [[ -z ${MODE} ]]; then
  mode="anat"
else
  mode=${MODE}
fi

#-----------------------------------------------------------------------------
# Set default project root directory if none specified
if [[ -z ${ROOT} ]]; then
  project=${DIR_DATA_HOME}
else
  project=${ROOT}
fi

if [[ ! -d ${project} ]]; then
  mkdir -p ${project}
fi

#-----------------------------------------------------------------------------
# Set default derivatives directory if none specified
if [[ -z ${DERIV} ]]; then
  derivatives=${DIR_DATA_DERIV}
else
  derivatives=${DERIV}
fi

if [[ ! -d ${derivatives} ]]; then
  mkdir -p ${derivatives}
fi

#-----------------------------------------------------------------------------
# Set default working directory if none specified
if [[ -z ${WORK} ]]; then
  work=${PATH_HOME}/fmriprep/${PROJECT}
else
  work=${WORK}
fi

if [[ ! -d ${work} ]]; then
  mkdir -p ${work}
fi

#-----------------------------------------------------------------------------
# Set default FS-license if none specified
if [[ -z ${LIC} ]]; then
  license=${DIR_SCRIPTS}/misc/license.txt
else
  license=${LIC}
fi

#-----------------------------------------------------------------------------
# Set default system if none specified
if [[ -z ${SGE} ]]; then
  system="SGE"
else
  system=${SGE}
fi

#-----------------------------------------------------------------------------
# Check if we need to output CIFTIs
if [[ -z ${CIFTI} ]]; then
  cifti_flag=""
else
  cifti_flag="--cifti-output ${CIFTI}"
fi

#-----------------------------------------------------------------------------
# Check if we received configuration file
if [[ -z ${CONFIG} ]]; then
  config_flag=""
else
  config_flag="--bids-filter-file ${CONFIG}"
fi

#-----------------------------------------------------------------------------
# Check if we received task ID
if [[ ! -z ${TASK_ID} ]]; then
  task_flag="--task-id ${TASK_ID}"
else
  task_flag=""
fi

#-----------------------------------------------------------------------------
# Check if we need to output CIFTIs
if [[ -z ${DO_SYN} ]]; then
  syn_flag="--use-syn-sdc"
else
  if [[ ${DO_SYN} -eq 1 ]]; then
    syn_flag="--use-syn-sdc"
  else
    syn_flag=""
  fi
fi

#-----------------------------------------------------------------------------
# Check how to initialize bold-to-T1w registration
if [[ -z ${BOLD_T1W_INIT} ]]; then
  init_flag=""
else
  if [[ ${BOLD_T1W_INIT} == "register" ]] || [[ ${BOLD_T1W_INIT} == "header" ]]; then
    init_flag="--bold2t1w-init ${BOLD_T1W_INIT}"
  else
    init_flag=""
  fi
fi

if [[ ${WARP_ONLY} -eq 0 ]]; then

  # Define command line
  if [ ${system} == "SGE" ]; then


    #-----------------------------------------------------------------------------
    # Set default binding point if none specified
    if [[ -z ${BIND} ]]; then
      binding=${PATH_HOME}
    else
      binding=${BIND}
    fi

    #-----------------------------------------------------------------------------
    # Set default container if none specified
    if [[ -z ${IMG} ]]; then
      fprep_container=${FPREP_SIMG}
    else
      fprep_container=${IMG}
    fi

    if [[ ! -f ${fprep_container} ]]; then
      echo "Could not find singularity image \"${fprep_container}\" for fmriprep.."
      exit 1
    fi

    # define SGE command
    run_cmd="singularity run --cleanenv -B ${binding}:${binding} ${fprep_container}"
    
  elif [[ ${system} == "local" ]]; then
    run_cmd="fmriprep"
  else
    echo "ERROR in `basename ${0}`: Unknown option ${system}. Please specify \"local\", or \"SGE\""
  fi

  if [[ ${mode} == "anat" ]]; then
    anat_only_flag="--anat-only"
  else
    anat_only_flag="" 
  fi

  # set nthreads
  nthreads=15
  nthread_flag="--nthreads ${nthreads}"

  # output directory structure has changed after v21: https://github.com/nipreps/fmriprep/releases/tag/21.0.0
  VERSION=`${run_cmd} --version | cut -d" " -f2 | cut -d"." -f1`
  if [[ `echo "${VERSION//[!0-9]/}"` -lt "21" ]]; then
    output_dir=${derivatives}
  else
    output_dir=${derivatives}/fmriprep
  fi

  # execute the fMRIPrep command
  ${run_cmd} \
    ${project} \
    ${output_dir} \
    participant \
    --participant-label ${subj_ID} \
    --skip-bids-validation \
    --md-only-boilerplate \
    --fs-license-file ${license} \
    --output-spaces ${FPREP_OUT_SPACES} \
    --fs-subjects-dir ${FS} \
    --stop-on-first-crash \
    ${bbr_flag} \
    ${cifti_flag} \
    ${syn_flag} \
    ${config_flag} \
    ${task_flag} \
    ${init_flag} \
    ${anat_only_flag} \
    ${nthread_flag} \
    -w ${work}
  
  if [[ $? != 0 ]]; then
    echo
    echo "---------------------------------------------------------------------------------------------------"
    echo "ERROR in `basename ${0}`: job submission/execution was unsuccessful"
    exit 1
  fi    

else
  echo "Skipping fMRIPrep, continuing to \"boldref\" and \"bold-to-T1w\" files"
fi

#-----------------------------------------------------------------------------
# fMRIPrep's boldref seems to be messy lately (snow-like noise pattern instead of an image)
bold_files=`find ${output_dir}/*${subj_ID}/ -type f -name "*preproc_bold.nii.gz" 2>/dev/null`
IFS=$'\n' bold_files=($(sort <<<"${bold_files[*]}"))
unset IFS

if [ ! -z ${bold_files} ]; then
  echo "Overwriting fMRIPrep's \"boldref\"-files"
  for bold in ${bold_files[@]}; do
    boldref=$(dirname ${bold})/$(basename ${bold} _desc-preproc_bold.nii.gz)_boldref.nii.gz
    fslmaths ${bold} -Tmean ${boldref}
  done
fi

#-----------------------------------------------------------------------------
# copy the bold-to-T1w warps from the fmriprep_wf
if [ -z ${PREFIX} ]; then
  pref="sub-"
else
  pref=${PREFIX}
fi

# see https://github.com/nipreps/fmriprep/issues/2189#issuecomment-646620788
xfms=`find ${work}/fmriprep*wf/single_subject_${subj_ID}_wf/func_preproc*/bold_reg_wf/bbreg_wf/concat_xfm -type f -name "out_fwd.tfm" 2>/dev/null`
if [[ ! -z ${xfms} ]]; then
  echo "Copying from-bold_to-T1w tfm-files"
  for xfm in ${xfms[@]}; do
    wf_name=`python -c "from linescanning.utils import disassemble_fmriprep_wf; print(disassemble_fmriprep_wf('${xfm}', '${subj_ID}', prefix='${pref}'))"`
    
    # check ses-flag
    if [[ ${wf_name} == *"ses-"* ]]; then
      ses_id=`echo ${wf_name} | cut -d'_' -f2`
    else
      ses_id=""
    fi

    out_xfm=${output_dir}/${pref}${subj_ID}/${ses_id}/func/${wf_name}_from-bold_to-T1w_mode-image_xfm.txt
    cp ${xfm} ${out_xfm}

  done

fi