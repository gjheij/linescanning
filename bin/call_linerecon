#!/usr/bin/env bash
#$ -S /bin/bash
#$ -cwd
#$ -q all.q
#$ -j Y
#$ -V

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_linerecon

wrapper for the reconstruction of line-data using a matlab template. For now, we can only run it
on the Spinoza server, maybe we can port it to local processing as well some day. For now we also
need to submit it to the minerva server by specifying -q all.q@minerva, because that's the only
place MRecon seems to work.

Usage:
  call_linerecon [options] <raw data> <lsd image> <output file>

Arguments:
  -m <nr_echoes>    number of echoes in a multi-echo acquisition. Leave empty if acquisition was 
                    single-echo
  -r <run>          When running multiple reconstructions in parallel, it can help to add a run ID 
                    so that the script-naming doesn't get mixed up.
  <raw data>        path to raw files on which to run reconstruction. Needs to contain .lab files of
                    the "recon"-slice (slice with rest-slabs on) and the .lab file of the functional
                    run ("bold"-file)
  <lsd data>        path to file with slice + saturation slabs (LSD-image). Generally is called some-
                    thing with "desc-recon", and should be run-specific to avoid any minor changes 
                    between runs
  <basename>        basename for output. Will automatically store the output in a .mat file, so spe-
                    cify up until .mat
  --debug           don't submit job, just print inputs/outputs
  -n|--no_nordic    skip NORDIC during reconstruction

Example:
  call_linerecon bold.lab lsd.lab func.mat
  call_linerecon -n -m 5 bold.lab lsd.lab func.mat

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

# Deal with arguments
do_nordic="on"
DEBUG=0
while getopts :-:hnm:r: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        debug)
          DEBUG=1
          ;;
        no_nordic)
          do_nordic="off"
          ;;                                                                      
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;
      esac;;  
    m)  n_echos=${OPTARG}
          ;;       
    r)  run_id=${OPTARG}
          ;;
    n)  do_nordic="off"
          ;;
  esac
done

if [[ "${@}" == *"-h"* ]]; then
  Usage >&2
  exit 1
fi

if [[ $# -lt 4 ]] ; then
  Usage >&2
  exit 1
fi

RAW=${@:$OPTIND:1}
LSD=${@:$OPTIND+1:1}
OUT=${@:$OPTIND+2:1}

if [[ -z ${n_echos} ]]; then
  multiecho=0
else
  multiecho=1
fi

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Start loop
newrecon=$(dirname ${RAW})/tmp${run_id}.m
if [[ -f ${newrecon} ]]; then
  rm -r ${newrecon}
fi

# make single-/multi-echo script
if [[ -f ${RAW} && -f ${LSD} ]]; then

  echo "Inputs:"
  echo " bold   = ${RAW}"
  echo " LSD    = ${LSD}"
  echo " Out    = ${OUT}.mat"
  echo " Nordic = ${do_nordic}"
  echo " Echos  = ${n_echos}"

  if [[ ${multiecho} -eq 0 ]]; then
    (
    echo "%% paths"
    echo "addpath(getenv('MRRECON')) %working without patch or with seline patch"
    echo "addpath(getenv('MATLAB_DIR'))"
    echo "addpath('/data1/projects/MicroFunc/common');"
    echo "addpath(genpath(fullfile(getenv('PATH_HOME'), 'programs', 'luisa')))"
    echo "disp(\"Starting recon\")"
    echo "filelocation = '$(dirname ${RAW})/';"
    echo ""
    echo "% py_PAR   = 'RECON_PAR'; % sub-xxx_desc-recon.PAR"
    echo "py_lab   = '$(basename ${RAW})';  % sub-xxx_desc-recon.LAB"
    echo "nopy_lab = '$(basename ${LSD})'; % sub-xxx_task-2R_bold.LAB"
    echo "nordic   = '${do_nordic}';"
    echo ""
    echo "Nc = 32; % nr of channels"
    echo "TR = 105; %TR in ms"
    echo "sp_res = 0.25; %line resolution [mm]"
    echo "gausskernel = 24;"
    echo ""
    echo "Data_pc       = basic_recon(py_lab,filelocation, Nc);"
    echo "nord_tresh    = 9; %not used now, since you are selecting the NORDIC threshold based on the scree plot"
    echo "varargin_par  = {Data_pc, nord_tresh};"
    echo "Data_wcsmtSNR = LS_recon_1way(nopy_lab, filelocation, Nc, 'all', TR, gausskernel, 'no', 'wcsmtSNR', nordic, varargin_par);"
    echo ""
    echo "save('${OUT}','Data_wcsmtSNR');"
    echo "disp(\"Done\")"
    ) >> ${newrecon}
  
  elif [[ ${multiecho} -eq 1 ]]; then
    ## INSERT MULTIECHO PIPELINE
    (
    echo "%% paths"
    echo "addpath(getenv('MRRECON')) %working without patch or with seline patch"
    echo "addpath(getenv('MATLAB_DIR'))"
    echo "addpath('/data1/projects/MicroFunc/common');"
    echo "addpath(genpath(fullfile(getenv('PATH_HOME'), 'programs', 'luisa')))"
    echo "disp(\"Starting recon\")"
    echo "filelocation = '$(dirname ${RAW})/';"
    echo ""
    echo "% py_PAR   = 'RECON_PAR'; % sub-xxx_desc-recon.PAR"
    echo "py_lab   = '$(basename ${LSD})';  % sub-xxx_desc-recon.LAB"
    echo "nopy_lab = '$(basename ${RAW})'; % sub-xxx_task-2R_bold.LAB"
    echo "nordic   = '${do_nordic}';"
    echo ""
    echo "Nc = 32; % nr of channels"
    echo "TR = 105; %TR in ms"
    echo "sp_res = 0.25; %line resolution [mm]"
    echo "gausskernel = 24;"
    echo "Nechos = ${n_echos};"
    echo ""
    echo "Data_pc        = basic_recon(py_lab,filelocation, Nc);"
    echo "csm4ls_sm_cplx = coil_sens_MELS(abs(Data_pc), gausskernel);"
    echo "nord_tresh     = 9; %not used now, since you are selecting the NORDIC threshold based on the scree plot"
    echo "varargin_par   = {'before', nord_tresh};"
    echo "if strcmp(nordic,'off')"
    echo "Data = GELINEME_NORDIC_FastRecon(csm4ls_sm_cplx, nopy_lab, filelocation, Nc, Nechos, TR, sp_res, 'off', nordic, varargin_par);"
    echo "else"
    echo "[Data, removed_comp] = GELINEME_NORDIC_FastRecon(csm4ls_sm_cplx, nopy_lab, filelocation, Nc, Nechos, TR, sp_res, 'off', nordic, varargin_par);"
    echo "end"
    echo ""
    echo "TE1 = 6.*10^(-3);"
    echo "deltaTE= 8.*10^(-3);"
    echo "echotimes = TE1(1):deltaTE(1):(TE1(1)+deltaTE(1)*(Nechos(1)-1));"
    echo "Data_comb = CombineEchoes_nofor_LS(Data, echotimes, 'SoS');"
    echo "save('${OUT}','Data_comb');"
    echo "disp(\"Done\")"
    ) >> ${newrecon}
  fi

  if [[ $DEBUG -eq 0 ]]; then
    echo "Initiating call to Matlab"
    call_matlab ${newrecon} 
  fi

else

  if [[ ! -f ${LSD} ]]; then
    txt="LSD-"
  elif [[ ! -f ${RAW} ]]; then
    txt="BOLD-"
  fi

  echo
  echo "---------------------------------------------------------------------------------------------------"
  echo "ERROR in `basename ${0}`: could not find ${txt}file"
  exit 1

fi