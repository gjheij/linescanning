#!/usr/bin/env python

import sys, getopt
import os
from nilearn import image
from scipy import ndimage
import pathlib
from linescanning import utils
import warnings
warnings.filterwarnings("ignore")
opj = os.path.join

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_gdhmasking

This script masks the input T1w-image according to the method from Gilles. You can find the original 
at https://github.com/VU-Cog-Sci/mp2rage_preprocessing/blob/master/analysis/mask_mp2rage.py. If no 
T1w image is specified, we'll iteratively look through the following directories: 'denoised', 'py-
mp2rage', then 'DIR_DATA_HOME'. Default INV2-image will be read from 'DIR_DATA_HOME/<subject>/<ses-
sion>/anat', default mask folder is DIR_DATA_DERIV/manual_masks (see linescanning/shell/spinoza_set
up) where these variables point to.

Parameters
----------
  -s|--subj       subject number
  -n|--ses        session number
  -i|--inv        second inversion image
  -t|--t1w        T1-weighted image
  -d|--masks      Directory containing the following masks:
                    - Dura mask    '_desc-cat_dura'/'_desc-dura'/'_desc-dura_dil'
                    - T1w mask     '_desc-bet_mask'
                    - Sinus mask   '_desc_sagittalsinus'/'_desc-mni_sinus'
  -o|--output     Output basename (leave empty to overwrite inputs = default). This will cause the 
                  T1w-masked image to end up in the same folder as the mask itself! Just leave it 
                  empty..
                    - masked T1w: suffixed with _masked.nii.gz
                    - mask:       suffixed with _brainmask.nii.gz
  --no_manual     Do not do any further manual edits; use the masks as is

Returns
----------
  - masked T1w image
  - brainmask

Example
----------
  call_gdhmasking -s sub-001 -n 1 -i inv2.nii.gz -u T1w.nii.gz -d /dir/with/masks

Notes
---------
Need at least the subject number!
if left to empty, it will look by default for the following files:
  - inv2   > /data_home/<subject>/ses-<ses>/anat/inv2.nii.gz
  - t1w    > /denoised|pymp2rage/<subject>/ses-<ses>/T1w.nii.gz
  - masks  > /manual_masks/<subject>/ses-<ses>

---------------------------------------------------------------------------------------------------
    """

    subject = None
    ses     = None
    inv2    = None
    t1w_fn  = None
    masks   = None
    output  = None
    manual  = True

    try:
        opts = getopt.getopt(argv,"hs:n:i:t:m:d:o:",["subj=", "ses=", "inv=", "t1w=", "masks=", "output=", "no_manual"])[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-h':
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--subj"):
            subject = arg
        elif opt in ("-n", "--ses"):
            ses = arg
        elif opt in ("-i", "--inv"):
            inv2 = arg
        elif opt in ("-t", "--t1w"):
            t1w_fn = arg
        elif opt in ("-d", "--masks"):
            masks = arg
        elif opt in ("-o", "--output"):
            output = arg
        elif opt in ("--no_manual"):
            manual = arg            

    if len(argv) < 1:
        print("\nNOT ENOUGH ARGUMENTS SPECIFIED")
        print(main.__doc__)
        sys.exit()

    if subject == None:
        raise ValueError("Need at the bare minimum at subject ID")

    if ses == None:
        sub_dir = subject
        base    = f"{subject}"
    else:
        sub_dir = opj(subject, f'ses-{ses}')
        base    = f"{subject}_ses-{ses}"

    # This stuff will create some default options if they are left empty. It assumes that you have the variables
    # from spinoza_setup available in your environment. If not, it will throw a key-error
    if inv2 == None:
        data_home = opj(
            os.environ.get("DIR_DATA_HOME"),
            sub_dir,
            "anat")

        inv2 = utils.get_file_from_substring(
          ["inv-2", "part-mag", ".nii.gz"], 
          data_home,
          exclude="space-")

    acq_tag = os.environ.get("DATA")
    if t1w_fn == None:
        data_proj = opj(os.environ.get("DIR_DATA_HOME"))
        
        # try to iteratively search for T1w; first 'denoising', then 'pymp2rage', finally 'DIR_DATA_HOME'
        if isinstance(data_proj, str):
            
            for ii in ["denoised", "pymp2rage", "bids"]:
                if ii != "bids":
                    search_dir = opj(
                        data_proj,
                        "derivatives",
                        ii,
                        sub_dir)
                else:
                    search_dir = opj(data_proj, sub_dir, "anat")

                if os.path.exists(search_dir):
                    t1w_fn = utils.get_file_from_substring(
                        [f"acq-{os.environ.get('DATA')}_", "T1w.nii.gz"],
                        search_dir,
                        exclude="space-")
                    
                    # keep looking until we find a string
                    if isinstance(t1w_fn, str):
                        if os.path.exists(t1w_fn):
                            break

    if masks == None:
        masks   = opj(os.environ['MASKS'], sub_dir)

    if output == None:
        masked_out = opj(
          os.environ.get('DIR_DATA_DERIV'), 
          f"masked_{acq_tag.lower()}",
          sub_dir, 
          "anat", 
          f"{base}_acq-{acq_tag}_desc-masked_T1w.nii.gz")

        mask_out = opj(
          os.environ.get('MASKS'), 
          f"masked_{acq_tag.lower()}",
          sub_dir, 
          f"{base}_acq-{acq_tag}_desc-brainmask.nii.gz")          

        mask_out = opj(os.environ['MASKS'], sub_dir, "{s}_acq-{a}_desc-brainmask.nii.gz".format(s=base, a=os.environ.get("DATA")))
    else:
        masked_out = output + "masked_T1w.nii.gz"
        mask_out = output + "brainmask.nii.gz"

    # Start procedure
    print("Starting procedure ..")

    all_masks = {}
    for j in os.listdir(masks):

        for i in ['cat_dura', 'dura_orig', 'dura_dil', 'cat_mask', 'spm_mask', '-outside', 'sinus', 'inside']:

            if i in j:
                if os.environ.get("DATA").upper() in j:
                    all_masks[i] = opj(masks, j)

    # Check which masks we actually have
    try:
        dura_mask   = all_masks['dura_dil']         # use the dilated dura by default
    except:
        try:
            dura_mask   = all_masks['cat_dura']     # if dilated doesn't exist, use the dura from CAT
        except:
            try:
                all_masks['dura_orig']              # if THAT also doesn't exist, run spinoza_createskullduramasks
            except:
                print("Could not find any dura image. It's most likely you don't have a T2w-image, so run spinoza_createskullduramasks (module 11)")
                print(" - If you do have a T2-image, run spinoza_registration (module 6) and spinoza_sinusfrommni (module 7), to create a dura mask")
                print(" - If you do not have INV2-images, but you do have a T2w and ran module 07, then copy the 'sinus_mni'-file as 'cat_dura'")
                sys.exit(1)

    try:
        t1w_mask = all_masks['cat_mask']
    except:
        try:
            t1w_mask = all_masks['gdh_mask']
        except:
            t1w_mask = None

    try:
        inv2_mask = all_masks['spm_mask']
    except:
        inv2_mask = None

    try:
        outside = all_masks['-outside']
    except:
        try:
            outside = all_masks['sinus']
        except:
            print(f"Could not find mask with 'sinus' in '{masks}'. Setting 'dura'-mask as 'sinus'-mask")
            outside = dura_mask

    try:
        inside = all_masks['inside']
    except:
        inside = None

    print("Loading in masks")
    for i,t in zip(
        [dura_mask, t1w_mask, outside, inside, inv2_mask], 
        ["dura", "t1w", "outside", "inside", "inv2"]):
        if isinstance(i, str):
            print(f" {t}: {i}")#.format(file=os.path.basename(i)))

    print("Fetching structural files")
    for i,t in zip([inv2, t1w_fn], ["inv2", "T1w"]):
        if isinstance(i, str):
            print(f" found: {i}")#.format(file=os.path.basename(i)))
        else:
            print(f"Missing '{t}'-file..")

    if not os.path.exists(os.path.dirname(masked_out)):
        pathlib.Path(os.path.dirname(masked_out)).mkdir(parents=True, exist_ok=True)

    # print("   Remove ugly background noise")
    if inside:
        t1w_mask = image.math_img(
            '(t1w_mask + inside) > 0',
            t1w_mask=t1w_mask,
            inside=inside)

    if inv2_mask:
        t1w_mask = image.math_img(
            '(t1w_mask + inv2) > 0',
            t1w_mask=t1w_mask,
            inv2=inv2_mask)                                    
    
    # cat12 mask can be more robust against intensity issues
    # if cat12:
    #     t1w_mask = image.math_img('(t1w_mask + cat12) > 0',
    #                                 t1w_mask=t1w_mask,
    #                                 cat12=cat12)                        
                                    
    outside_fn = opj(masks, "{s}_acq-{a}_desc-outside.nii.gz".format(s=base, a=os.environ.get("DATA")))

    if not "-outside" in outside:

        print("Creating outside mask")

        if not "dura_dil" in dura_mask:
            # Dilate dura mask
            dilated_dura_mask = ndimage.binary_dilation(
                image.load_img(dura_mask).get_fdata(),
                iterations=2)

            dilated_dura_mask = image.new_img_like(dura_mask, dilated_dura_mask)

            # Make a mask of dilated dura, but only outwards
            dilated_dura_mask = image.math_img(
                '(dilated_dura_mask - (t1w_mask - dura_mask)) > 0',
                t1w_mask=t1w_mask,
                dura_mask=dura_mask,
                dilated_dura_mask=dilated_dura_mask)

            if inside:
                dilated_dura_mask = image.math_img(
                    'dilated_dura_mask - inside > 0',
                    dilated_dura_mask=dilated_dura_mask,
                    inside=inside)

            dura_fn = opj(os.path.dirname(mask_out), "{s}_acq-{a}_desc-dura_dilated.nii.gz".format(s=base, a=os.environ.get('DATA')))
            dilated_dura_mask.to_filename(dura_fn)
            dura_mask = dura_fn

        # Create one 'outside' mask consisting of dilated dura mask and sinus
        outside = image.math_img(
            '(dura + sinus) > 0',
            dura=dura_mask,
            sinus=outside)

        outside.to_filename(outside_fn)
        try:
            print("Copying geometry from input T1w-image")
            os.system(f"fslcpgeom {t1w_fn} {outside_fn}")
        except:
            print("WARNING: could not copy geometry from {} to {}".format(t1w_fn, outside_fn))

        if manual:
          try:
              print("Manually edit the outside mask in ITKSnap")
              cmd_txt = "itksnap -g {anat} -s {dura}".format(anat=t1w_fn, dura=outside_fn)
              os.system(cmd_txt)
          except:
              print("Could not initiate ITKsnap to manually edit outside mask")

    # Stuff like dura should be put to 0, not just multiplied with INV2
    print("Set sagittal sinus and dura stuff to zero")
    t1w = image.math_img(
        't1w * (np.ones_like(t1w) - outside)',
        t1w=t1w_fn,
        outside=outside_fn)

    t1w_mask = image.math_img(
        't1w_mask - outside > 0',
        t1w_mask=t1w_mask,
        outside=outside_fn)

    t1w_mask.to_filename(mask_out)

    if inv2 != None:
        new_t1w = image.math_img(
            't1w * t1w_mask * np.mean(inv2[t1w_mask == 1]/np.max(inv2)) + t1w * inv2/np.max(inv2) * (1-t1w_mask)',
            t1w=t1w,
            t1w_mask=t1w_mask,
            inv2=inv2)
        new_t1w.to_filename(masked_out)
    else:
        t1w.to_filename(masked_out)

    print("Masking procedure completed")

if __name__ == "__main__":
    main(sys.argv[1:])
