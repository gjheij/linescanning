#!/bin/bash

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_injectmatrices

Follow workflow https://mumfordbrainstats.tumblr.com/post/166054797696/feat-registration-workaround
To use fMRIprep output in FEAT. Uses the mean of the functional run as 'standard', rather than the
MNI152-image.

Args:
  -p <project dir>  project root folder (defaults to DIR_DATA_HOME)
  -l <level1 tag>   tag for level1 analysis (e.g., 'level1' [default] or 'level1_confounds')
  -f <feat dir>     directory where your subject-specific feat-directories live (defaults to DIR-
                    DATA_HOME/derivatives/feat/<level1_tag>)

Example:
  ./call_injectmatrices # run script for all .feat-folders in DIR_DATA_HOME/derivatives/feat/<level1_tag>
  ./call_injectmatrices -p feat_dir/sub-01 # run script for all feat-folders in 'feat_dir/sub-01'
  ./call_injectmatrices --mni # run script for all feat-folders in 'feat_dir/sub-01'

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

SPACE=""
# Check for subject & session flags
while getopts :-:hs:l:n:r:f:p:t: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        help)
          HELP=1
          ;;                      
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}" >&2
          fi
          ;;
      esac;;   
    h)  HELP=1
        ;;                
    l)  L1_tag=${OPTARG}
          ;;
    f)  ft_dir=${OPTARG}
          ;;
    p)  project_dir=${OPTARG}
          ;;
  esac
done

# define single-use functon
function fix_reg_dir {
  feat_dir=${1}
  if [[ -d ${feat_dir} ]]; then

    echo "Processing ${feat_dir}"

    # remove standard dir
    if [[ -d ${feat_dir}/reg_standard ]]; then
      echo " Removing \"reg_standard\" directory"
      rm -r ${feat_dir}/reg_standard 2>/dev/null
    fi

    # create reg dir
    if [[ ! -d ${feat_dir}/reg ]]; then
      mkdir -p ${feat_dir}/reg
    fi

    # echo " Removing matrix files from reg directory"
    rm -r ${feat_dir}/reg/*.mat 2>/dev/null
    rm -r ${feat_dir}/reg/standard.nii.gz 2>/dev/null

    # echo " Copying identity matrix to reg directory"
    cp $FSLDIR/etc/flirtsch/ident.mat ${feat_dir}/reg/example_func2standard.mat

    # echo " Renaming mean_func to standard to prevent interpolation"
    cp ${feat_dir}/mean_func.nii.gz ${feat_dir}/reg/standard.nii.gz

    # updatefeatreg
    updatefeatreg ${feat_dir}
    
  else
    echo "Feat directory does not exists"
  fi
}

if [[ ${HELP} -eq 1 ]]; then
  Usage >&2
  exit 1
fi

# specify defaults
if [[ -z ${project_dir} ]]; then
  project_dir=${DIR_DATA_HOME}
fi

# set level1 tag
if [[ -z ${L1_tag} ]]; then
  L1_tag="level1"
else
  L1_tag=${L1_tag}
fi

# set full directory
if [[ -z ${ft_dir} ]]; then
  ft_dir=${project_dir}/derivatives/feat/${L1_tag}
fi

if [[ ! -d ${ft_dir} ]]; then
  echo "Directory \"${ft_dir}\" does not exist.."
  exit 1
fi

# find all .feat directories and run command
all_feats=(`find ${ft_dir} -type d -name "*.feat"`)
for ft in ${all_feats[@]}; do
  fix_reg_dir ${ft}
done

echo "Done"
