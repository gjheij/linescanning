#!/usr/bin/env python
#$ -j Y
#$ -cwd
#$ -V

import mkl
mkl.set_num_threads=1

import os
import sys
import getopt
from linescanning import fmriprep
import shutil
opj = os.path.join

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_topup

This script runs only the initializing nodes from fMRIPrep. E.g., is will do all the header stuff, 
validation, but most most importantly, motion correction and topup. Under the hood, it utilizes the
functions in 'linescanning.fmriprep', which are literally the workflows from fMRIPrep, but with all
other irrelevant stuff commented out (it's still there just in case). 

Input needs to be the full project root directory so the correct fieldmaps can be found. Using the 
fmriprep_config?.json files you can select particular subsets of the entire dataset. E.g., I only 
use this script for my limited FOV data, as the brainmasking fails on that data causing aCompCor to
fail. Therefore, I just need motion-corrected, topup data for a very select part of the dataset. 

Parameters
----------
  -s|--sub      subject ID
  -n|--ses      session ID; will be used to construct a bids-filter dictionary. We'll first check
                if a filter file is specified with (--filter). If not, and session has been speci-
                fied, func/fmap fields will be filtered with `session`
  -a|--acq      acq ID; will be used to construct a bids-filter dictionary            
  -i|--in       subject-directory containing the files that need to be run through Topup. Defaults 
                to DIR_DATA_HOME as per spinoza_setup
  -o|--out      output directory containing the topup'ed data. Easiest is to give the fMRIPrep fol-
                der, it will be formatted accordingly automatically. Defaults to <input_dir>/deriva-
                tives/fmriprep
  -w|--work     working directory where fMRIPrep's intermediate files are stored; default is some 
                folder in /tmp
  -b|--filters  bids filter file (maps to --bids-filter-file from fMRIPrep); allows you to select 
                particular files
  -o|--ow       overwrite intermediate files
                        
Example
----------
>>> call_topup -s 001 --filters misc/fmriprep_config1.json
>>> call_topup -s 001 -i DIR_DATA_HOME -o DIR_DATA_DERIV/fmriprep -w DIR_DATA_SOURCE/sub-001/ses-2
>>> call_topup -s 001 -i DIR_DATA_HOME -o DIR_DATA_DERIV/fmriprep -b misc/fmriprep_config1.json

---------------------------------------------------------------------------------------------------
"""

    subject = None
    session = None
    acquisition = None
    inputdir = os.environ.get("DIR_DATA_HOME")
    outputdir = opj(os.environ.get("DIR_DATA_DERIV"), "fmriprep")
    workdir = None
    bids_filters = None
    overwrite = False

    try:
        opts = getopt.getopt(argv,"ohs:n:i:o:w:b:a:",["help", "sub=", "ses=", "acq=", "in=", "out=", "work=", "filters=", "ow"])[0]
    except getopt.GetoptError:
        print("ERROR while reading arguments; did you specify an illegal argument?")
        print(main.__doc__)
        sys.exit(2)
    
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--sub"):
            subject = arg
        elif opt in ("-n", "--ses"):
            session = int(arg)
        elif opt in ("-a", "--acq"):
            acquisition = arg
        elif opt in ("-i", "--in"):
            inputdir = arg
        elif opt in ("-o", "--out"):
            outputdir = arg
        elif opt in ("-w", "--work"):
            workdir = arg
        elif opt in ("-b", "--filters"):
            bids_filters = arg
        elif opt in ("-o", "--ow"):
            overwrite = True

    if len(argv) < 1:
        print(main.__doc__)
        sys.exit()
    
    if not isinstance(bids_filters, str):
        bids_filters = {
            "bold": {
                "datatype": "func",
                "suffix": "bold"
            },
            "fmap": {
                "datatype": "fmap",
                "suffix": "epi"
            }
        }

        if isinstance(session, int):
            for el in ["bold","fmap"]:
                bids_filters[el]["session"] = str(session)

        if isinstance(acquisition, str):
            for el in ["bold","fmap"]:
                bids_filters[el]["acquisition"] = str(acquisition)

    wf = fmriprep.init_single_subject_wf(
        subject, 
        bids_dir=inputdir,
        fmriprep_dir=outputdir,
        bids_filters=bids_filters,
        workdir=workdir)
    
    if overwrite:
        fname = opj(workdir, wf.name)
        if os.path.exists(fname):
            print(f"deleting {fname}")
            shutil.rmtree(fname)

    wf.run()

if __name__ == "__main__":
    main(sys.argv[1:])
