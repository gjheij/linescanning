#!/bin/bash
#$ -S /bin/bash
#$ -cwd
#$ -j Y
#$ -V
#$ -pe smp 5
#Template provided by Daniel Levitas of Indiana University
#Edits by Andrew Jahn, University of Michigan, 07.22.2020

call_loadsetup
source call_bashhelper

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_mriqc

MRIQC extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional 
MRI (magnetic resonance imaging) data. There's also a bunch of other things you can customize, but 
to keep it as simple as possible without making it similar to the fmriprep call itself, see arguments 
for customizable options.

Arguments:
--anat_only       Only include anatomical images in the process (default is everything it can find)
--func_only       Only include functional images in the process (default is everything it can find)
-s <sub number>   number of subject's directory from which you can omit "sub-" (e.g., for "sub-001",
                  enter "001"); use 'group' if you want group statistics
--fd              only get FD(VARS)-timecourse file(s) without initializing MRIqc
-n <ses number>   session ID (without 'ses-'); if not specified, all sessions will be checked for
                  usable data
-j <cpus>         number of cores to use (default is 1)
-r <root>         project root directory from which to run fmriprep. Default is DIR_DATA_HOME
-d <derivatives>  derivatives directory. Default is DIR_DATA_DERIV
-i <simg>         singularity image that can be specified if -c flag is set to SGE
-b <binding>      binding point that can be specified if -c flag is set to SGE
-w <work>         working directory to store intermediate files. Default is PATH_HOME/programs/
                  packages/mriqc             
Example:
  call_mriqc -s 001       (simplest form, runs the entire pipeline)
  call_mriqc -s 001 -n 1  (only include session 1 data)
  call_mriqc -s 001 -r /path/to/project -d /path/to/project/derivatives -b /data1 -w /tmp

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

#-----------------------------------------------------------------------------
# Deal with arguments
mod_flag=""
n_cpus=1
fd_only=0
while getopts :-:ts:n:r:d:i:b:w:j: arg
do
  case ${arg} in
    -)
      case "${OPTARG}" in     
        anat_only)
          mod_flag="--modalities T1w T2w"
          ;;   
        func_only)
          mod_flag="--modalities bold"
          ;;     
        fd)
          fd_only=1
          ;;                              
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            Usage >&2
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;
      esac;;    
    s)  subj_ID=${OPTARG}
          ;;
    n)  ses_ID=${OPTARG}
          ;;						
    r)  ROOT=${OPTARG}
          ;;
    d)  DERIV=${OPTARG}
          ;;
    i)  IMG=${OPTARG}
          ;;
    b)  BIND=${OPTARG}
          ;;
    w)  WORK=${OPTARG}
          ;;  
    j)  n_cpus=${OPTARG}
          ;;                      
  esac
done

if [[ $# -lt 1 ]] ; then
  Usage >&2
  exit 1
fi

#-----------------------------------------------------------------------------
if [[ -z ${subj_ID} ]]; then
  echo "Need at least a subject ID!"
  Usage >&2
  exit 1
else
  if [[ ${subj_ID} == "group" ]]; then
    proc_level="group"
  else
    proc_level="participant --participant-label ${subj_ID}"
  fi
fi

#-----------------------------------------------------------------------------
if [[ -z ${ses_ID} ]]; then
	ses_nr=""
  base_dir="sub-${subj_ID}"
  ses_flag=""
else
	ses_nr=${ses_ID}
  base_dir="sub-${subj_ID}/ses-${ses_nr}"
  ses_flag="--session-id ${ses_ID}"
fi

#-----------------------------------------------------------------------------
# Set default project root directory if none specified
if [[ -z ${ROOT} ]]; then
  project=${DIR_DATA_HOME}
else
  project=${ROOT}
fi

#-----------------------------------------------------------------------------
# Set default derivatives directory if none specified
if [[ -z ${DERIV} ]]; then
  derivatives=${DIR_DATA_DERIV}/mriqc
else
  derivatives=${DERIV}
fi

if [[ ! -d ${derivatives} ]]; then
  mkdir -p ${derivatives}
fi

#-----------------------------------------------------------------------------
# Set default working directory if none specified
if [[ -z ${WORK} ]]; then
  work=${PATH_HOME}/mriqc/${PROJECT}
else
  work=${WORK}
fi

if [[ ! -d ${work} ]]; then
  mkdir -p ${work}
fi

#-----------------------------------------------------------------------------
# Set default container if none specified
if [[ -z ${IMG} ]]; then
	mriqc_container=${MRIQC_SIMG}
else
	mriqc_container=${IMG}
fi

#-----------------------------------------------------------------------------
# check if fd_only flag is not set
if [[ ${fd_only} -eq 0 ]]; then

  # Define command line
  if [[ -f ${mriqc_container} ]]; then

    #-----------------------------------------------------------------------------
    # Set default binding point if none specified
    if [[ -z ${BIND} ]]; then
      binding=${FPREP_BINDING}
    else
      binding=${BIND}
    fi

    if [[ ! -f ${mriqc_container} ]]; then
      echo "Could not find singularity image \"${mriqc_container}\" for fmriprep.."
      exit 1
    fi 

    # check if project root is within binding point
    if [[ ${project} != *"${binding}"* ]]; then
      echo
      echo "---------------------------------------------------------------------------------------------------"
      echo "ERROR in `basename ${0}`; your project root \"${project}\" cannot be accessed due to your binding point (\"${binding}\"). Please make sure the file on somewhere along the binding-path"
      exit 1
    fi

    # define SGE command
    run_cmd="singularity run --cleanenv -B ${binding}:${binding} ${mriqc_container}"
    
  else
    run_cmd="mriqc"
  fi

  # --cleanenv required to prevent interference from FSL v6 present on the spinoza server
    cmd="""${run_cmd} \
    ${project} \
    ${derivatives} \
    ${proc_level} \
    ${ses_flag} \
    ${mod_flag} \
    --nprocs ${n_cpus} \
    --omp-nthreads 1 \
    -w ${work} \
    --verbose-reports \
    --mem_gb 64 \
    --no-sub"""

  # execute
  echo $cmd
  ${cmd} 

  if [[ $? -ne 0 ]]; then
    echo
    echo "---------------------------------------------------------------------------------------------------"
    echo "ERROR in `basename ${0}`: mriqc exited with non-zero status"
    exit 1
  fi

  # move html files to appropriate directory.
  html_files=(`find ${derivatives} -maxdepth 1 -type f -name "sub-${subj_ID}*" -and -name "*.html" 2>/dev/null`)
  if [[ ! -z ${html_files} ]]; then
    mv ${html_files[@]} ${derivatives}/sub-${subj_ID} 2>/dev/null
  else
    echo "ERROR in `basename ${0}`: could not find html-files. This is suspicious.."
    exit 1
  fi

fi

#-----------------------------------------------------------------------------
# loop through moved html files to fetch fd file
html_files=(`find ${derivatives}/sub-${subj_ID} -type f -name "sub-${subj_ID}*" -and -name "*.html" -and -not -name "*T1w.html" -and -not -name "*T2w.html" 2>/dev/null`)

if [[ ! -z ${html_files} ]]; then

  # find directory where these FD files should live
  func_wf=`find ${work} -maxdepth 3 -type d -name "fMRI_HMC" 2>/dev/null`
  if [ ! -z ${func_wf} ]; then

    # find # fdvars timecourse for Marco
    echo "Finding FD-timecourse files as per Marco's request part I :)"
    for ht in ${html_files[@]}; do

      # decompose html into bids components
      search_for=""
      ct=0
      base_path="sub-${subj_ID}"
      for ii in "sub" "ses" "task" "run" "acq" "rec" "desc"; do

        el=`get_id $(basename ${ht}) ${ii}`
        if [ ! -z ${el} ]; then
          if [[ ${ct} -eq 0 ]]; then
            search_for+="\"${ii}-${el}\""
          else
            search_for+=", \"${ii}-${el}\""
          fi
          ((ct++))  

          if [[ ${ii} == "ses" ]]; then
            base_path+="/${ii}-${el}"
          fi
        fi
      done

      if [[ ! -z ${search_for} ]]; then
        
        # find the workflow folder
        ht_wf=`python -c "from linescanning import utils; ll = utils.get_file_from_substring([${search_for}], \"${func_wf}\"); print(ll)"`
        if [[ ! -z ${ht_wf} ]]; then
          
          # check if there's a file
          fd_file=`find ${ht_wf} -type f -name "fd_power*" -and -name "*.txt" 2>/dev/null`
          if [[ -f ${fd_file} ]]; then

            # decide outname and store in 'func' of corresponding session
            out_name=${derivatives}/${base_path}/func/$(basename ${ht} _bold.html)_desc-fd_bold.txt

            # this should exist, but still.. sue me
            if [[ ! -d $(dirname ${out_name}) ]]; then
              mkdir -p $(dirname ${out_name})
            fi

            cp ${fd_file} ${out_name} 2>/dev/null
            echo " wrote ${out_name}"

          else
            echo "Could not find file with \"fd_power\" and \"*.txt\" in ${ht_wf}?"
          fi
        else
          echo "Could not find workflow directory with [${search_for}]"
        fi
      else
        echo "Could not read BIDS components from \"$(basename ${ht})\""
      fi

    done
    echo "Done"
  else
    echo "Could not find \"funcMRIQC\" folder in \"${work}\""
  fi

  # find directory where FDVARS files should live
  func_wf=`find ${work}/mriqc_wf/funcMRIQC -maxdepth 1 -type d -name "ComputeIQMs" 2>/dev/null`
  if [ ! -z ${func_wf} ]; then

    # find # fdvars timecourse for Marco
    echo "Finding FDVARS-timecourse files as per Marco's request part II :)"
    for ht in ${html_files[@]}; do
    
      # decompose html into bids components
      search_for=""
      ct=0
      base_path="sub-${subj_ID}"
      for ii in "sub" "ses" "task" "run" "acq" "rec" "desc"; do

        el=`get_id $(basename ${ht}) ${ii}`
        if [ ! -z ${el} ]; then
          if [[ ${ct} -eq 0 ]]; then
            search_for+="\"${ii}-${el}\""
          else
            search_for+=", \"${ii}-${el}\""
          fi
          ((ct++))  

          if [[ ${ii} == "ses" ]]; then
            base_path+="/${ii}-${el}"
          fi
        fi
      done

      if [[ ! -z ${search_for} ]]; then
        
        # find the workflow folder
        ht_wf=`python -c "from linescanning import utils; ll = utils.get_file_from_substring([${search_for}], \"${func_wf}\"); print(ll)"`
        if [[ ! -z ${ht_wf} ]]; then
          
          # check if there's a file
          fd_file=`find ${ht_wf} -type f -name "*volreg_dvars.tsv" 2>/dev/null`
          if [[ -f ${fd_file} ]]; then

            # decide outname and store in 'func' of corresponding session
            out_name=${derivatives}/${base_path}/func/$(basename ${ht} _bold.html)_desc-dvars_bold.tsv

            # this should exist, but still.. sue me
            if [[ ! -d $(dirname ${out_name}) ]]; then
              mkdir -p $(dirname ${out_name})
            fi

            cp ${fd_file} ${out_name} 2>/dev/null
            echo " wrote ${out_name}"

          else
            echo "Could not find file with \"*volreg_dvars.tsv\" in ${ht_wf}?"
          fi
        else
          echo "Could not find workflow directory with [${search_for}]"
        fi
      else
        echo "Could not read BIDS components from \"$(basename ${ht})\""
      fi

    done
    echo "Done"
  else
    echo "Could not find \"ComputeIQMs\" folder in \"${work}\""
  fi  
fi
