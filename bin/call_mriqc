#!/bin/bash
#$ -S /bin/bash
#$ -cwd
#$ -j Y
#$ -V
#$ -pe smp 5
#Template provided by Daniel Levitas of Indiana University
#Edits by Andrew Jahn, University of Michigan, 07.22.2020

call_loadsetup

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_mriqc

MRIQC extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional 
MRI (magnetic resonance imaging) data. There's also a bunch of other things you can customize, but 
to keep it as simple as possible without making it similar to the fmriprep call itself, see arguments 
for customizable options.

Arguments:
--anat_only       Only include anatomical images in the process (default is everything it can find)
--func_only       Only include functional images in the process (default is everything it can find)
-s <sub number>   number of subject's directory from which you can omit "sub-" (e.g., for "sub-001",
                  enter "001")
-n <ses number>   session ID (without 'ses-'); if not specified, all sessions will be checked for
                  usable data
-r <root>         project root directory from which to run fmriprep. Default is DIR_DATA_HOME
-d <derivatives>  derivatives directory. Default is DIR_DATA_DERIV
-i <simg>         singularity image that can be specified if -c flag is set to SGE
-b <binding>      binding point that can be specified if -c flag is set to SGE
-w <work>         working directory to store intermediate files. Default is PATH_HOME/programs/
                  packages/mriqc             
Example:
  call_mriqc -s 001       (simplest form, runs the entire pipeline)
  call_mriqc -s 001 -n 1  (only include session 1 data)
  call_mriqc -s 001 -r /path/to/project -d /path/to/project/derivatives -b /data1 -w /tmp

---------------------------------------------------------------------------------------------------

USAGE
    exit 1
}

#-----------------------------------------------------------------------------
# Deal with arguments
mod_flag=""
while getopts :-:ts:n:r:d:i:b:w: arg
do
  case ${arg} in
    -)
      case "${OPTARG}" in     
        anat_only)
          mod_flag="--modalities T1w T2w"
          ;;   
        func_only)
          mod_flag="--modalities bold"
          ;;                    
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            Usage >&2
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;
      esac;;    
    s)  subj_ID=${OPTARG}
          ;;
    n)  ses_ID=${OPTARG}
          ;;						
    r)  ROOT=${OPTARG}
          ;;
    d)  DERIV=${OPTARG}
          ;;
    i)  IMG=${OPTARG}
          ;;
    b)  BIND=${OPTARG}
          ;;
    w)  WORK=${OPTARG}
          ;;          
  esac
done

if [[ $# -lt 1 ]] ; then
  Usage >&2
  exit 1
fi

#-----------------------------------------------------------------------------
if [[ -z ${subj_ID} ]]; then
  echo "Need at least a subject ID!"
  Usage >&2
  exit 1
fi

#-----------------------------------------------------------------------------
if [[ -z ${ses_ID} ]]; then
	ses_nr=""
  base_dir="sub-${subj_ID}"
  ses_flag=""
else
	ses_nr=${ses_ID}
  base_dir="sub-${subj_ID}/ses-${ses_nr}"
  ses_flag="--session-id ${ses_ID}"
fi

#-----------------------------------------------------------------------------
# Set default project root directory if none specified
if [[ -z ${ROOT} ]]; then
  project=${DIR_DATA_HOME}
else
  project=${ROOT}
fi

#-----------------------------------------------------------------------------
# Set default derivatives directory if none specified
if [[ -z ${DERIV} ]]; then
  derivatives=${DIR_DATA_DERIV}/mriqc
else
  derivatives=${DERIV}
fi

if [[ ! -d ${derivatives} ]]; then
  mkdir -p ${derivatives}
fi

#-----------------------------------------------------------------------------
# Set default working directory if none specified
if [[ -z ${WORK} ]]; then
  work=${PATH_HOME}/mriqc/${PROJECT}
else
  work=${WORK}
fi

if [[ ! -d ${work} ]]; then
  mkdir -p ${work}
fi

#Run fmriprep
n_procs=10

#-----------------------------------------------------------------------------
# Set default container if none specified
if [[ -z ${IMG} ]]; then
	mriqc_container=${MRIQC_SIMG}
else
	mriqc_container=${IMG}
fi

# Define command line
if [[ -f ${mriqc_container} ]]; then

  #-----------------------------------------------------------------------------
  # Set default binding point if none specified
  if [[ -z ${BIND} ]]; then
    binding=${FPREP_BINDING}
  else
    binding=${BIND}
  fi

  if [[ ! -f ${mriqc_container} ]]; then
    echo "Could not find singularity image \"${mriqc_container}\" for fmriprep.."
    exit 1
  fi 

  # check if project root is within binding point
  if [[ ${project} != *"${binding}"* ]]; then
    echo
    echo "---------------------------------------------------------------------------------------------------"
    echo "ERROR in `basename ${0}`; your project root \"${project}\" cannot be accessed due to your binding point (\"${binding}\"). Please make sure the file on somewhere along the binding-path"
    exit 1
  fi

  # define SGE command
  run_cmd="singularity run --cleanenv -B ${binding}:${binding} ${mriqc_container}"
  
else
  run_cmd="mriqc"
fi

# --cleanenv required to prevent interference from FSL v6 present on the spinoza server
  cmd="""${run_cmd} \
  ${project} \
  ${derivatives} \
	participant \
  ${ses_flag} \
  ${mod_flag} \
	--participant-label ${subj_ID} \
	--n_procs ${n_procs} \
	-w ${work} \
	--verbose-reports \
	--mem_gb 64 \
	--no-sub
"""

# execute
echo $cmd
${cmd}

if [[ $? -ne 0 ]]; then
  echo
  echo "---------------------------------------------------------------------------------------------------"
  echo "ERROR in `basename ${0}`: mriqc exited with non-zero status"
  exit 1
fi

# move html files to appropriate directory.
html_files=`find ${derivatives} -type f -name "sub-${subj_ID}*" -and -name "*.html" 2>dev/null`
if [[ ! -z ${html_files} ]]; then
  mv ${html_files} ${derivatives}/sub-${subj_ID} 2>/dev/null
else
  echo "ERROR in `basename ${0}`: could not find html-files. This is suspicious.."
  exit 1
fi
