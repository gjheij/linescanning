#!/usr/bin/env python
#$ -j Y
#$ -cwd
#$ -V

import getopt
from linescanning import prf,utils,dataset
import matplotlib.pyplot as plt
import nibabel as nb
import numpy as np
import os
from scipy import io
import sys
import warnings

warnings.filterwarnings('ignore')
opj = os.path.join

# Ignore nistats warning
# print("---------------------------------------------------------------------------------------------------")
# print("Ignore stuff above. Starting pRF-fitting\n")

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_prf

Wrapper for population receptive field fitting with pRFpy. If not present yet, it will create a
design matrix based on a specified path to screenshots as outputted by the pRF-experiment script.
If you're not running that particular experiment, you'll need to create a design matrix yourself.
After it has created or loaded the design matrix, an initial grid search will be performed, of
which the output will be stored in a specified name or otherwise a file with a default output
name (e.g., sub-xxx_desc-prf_params.npy). This numpy-array is later used in call_pycortex to
calculate the optimal vertex. Assumes the input is BIDS compliant, as it will extract certain
features from the filenames.

Usage:
  call_prf.py <subject number> <session number> <task> <output name parameters> <input directory>

Arguments:
  -s (--sub)    <sub number>      number of subject's FreeSurfer directory from which you can omit
                                  "sub-" (e.g.,for "sub-001", enter "001").
  -n (--ses)    <session number>  session number (e.g., "1")
  -t (--task)   <task name>       name of the experiment performed (e.g., "2R")
  -o (--out)    <prf dir>         output directory containing pRF-stuff (/derivatives/prf)
  -i (--in)     <input dir>       input directory (e.g., output of pybest)
  -p (--png)    <path to pngs>    path to png's if you ran M. Aqil's experiment
  -m (--model)  <model type>      standard Gaussian model or Normalization model (for now)
  -x (--params) <gaussian params> path to numpy array containing old parameters of Gaussian model
                                  to use for the Normalization model
  -g (--grid)   <grid only>       only run a grid-fit with the specified model
  -u (--space)  <fit space>       default is set as PYBEST_SPACE in spinoza_setup
    
Example:
  call_prf -s 001 -n 1 -t 2R -o /path/derivatives/prf -i /path/to/pybest/sub-001 -p /path/png
  call_prf --sub 001 --ses 1 --task 2R --out /path/derivatives/prf --in /path/to/pybest/sub-001

---------------------------------------------------------------------------------------------------

"""

    sub         = None
    ses         = None
    task        = ''
    out_dir     = ''
    in_dir      = ''
    png_dir     = ''
    model       = "gauss"
    grid_only   = False
    space       = "fsnative"

    try:
        opts = getopt.getopt(argv,"ghs:n:t:o:i:p:m:x:u:",["sub=", "model=", "ses=", "task=", "out=", "in=", "png=", "params=", "grid=", "space="])[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-h':
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--sub"):
            sub = arg
        elif opt in ("-n", "--ses"):
            ses = arg
        elif opt in ("-t", "--task"):
            task = arg
        elif opt in ("-o", "--out"):
            out_dir = arg
        elif opt in ("-i", "--in"):
            in_dir = arg
        elif opt in ("-p", "--png"):
            png_dir = arg
        elif opt in ("-m", "--model"):
            model = arg
        elif opt in ("-u", "--space"):
            space = arg
        elif opt in ("-g", "--grid"):
            grid_only = True

    if len(argv) < 2:
        print("\nNOT ENOUGH ARGUMENTS SPECIFIED")
        print(main.__doc__)
        sys.exit()

    # %%
    if sub.isdecimal() != True:
        print(f"ERROR: input contains non-digit elements. Subject = {sub}")
        sys.exit(1)


    if ses != None:
        if ses.isdecimal() != True:
            print(f"ERROR: input contains non-digit elements. Session = {ses}")
            sys.exit(1)

        out = f"sub-{sub}_ses-{ses}_task-{task}"
        base_dir = opj(f"sub-{sub}", f"ses-{ses}")
        # outputdir = opj(out_dir,  f"sub-{sub}", f'ses-{ses}')
    else:
        out = f"sub-{sub}_ses-{ses}_task-{task}"
        base_dir = f"sub-{sub}"
        # outputdir = opj(out_dir, f"sub-{sub}")

    if os.path.exists(in_dir):
        pass
    else:
        print("ERROR: input directory does not exist. Run pybest first")
        sys.exit(1)

    # %%
    # Create design matrix if it doesn't exists
    outputdir = out_dir
    if os.path.isfile(opj(outputdir, 'vis_design.mat')):
        print("Design matrix: {mat}".format(mat=opj(outputdir, 'vis_design.mat')))
        design_matrix = io.loadmat(opj(outputdir, 'vis_design.mat'))
    else:
        print("Creating new design matrix")
        if os.path.isdir(png_dir):

            dm = utils.get_prfdesign(png_dir, n_pix=270, dm_edges_clipping=[6,1,0,1])

            if os.path.exists(opj(outputdir)):
                pass
            else:
                os.mkdir(opj(outputdir))

            io.savemat(opj(outputdir, 'vis_design.mat'), {"stim": dm})
            design_matrix = io.loadmat(opj(outputdir, 'vis_design.mat'))

        else:

            print("ERROR: Could not find path to screenshots")
            sys.exit(1)

    f, ss = plt.subplots(1,20,figsize=(24,3))
    for x in range(15,35):
        ss[x-15].imshow(design_matrix['stim'][...,x])

    f.savefig(opj(outputdir, 'vis_design.png'))

    # %%
    # tps, xdim, ydim = design_matrix['stim'].T.shape
    # # print(tps, xdim, ydim)
    # # print(design_matrix['stim'].shape)

    # # good_runs = np.arange(13,25) # sub-001
    # # good_runs = np.arange(1,7) # sub-004
    all_runs = [f for f in os.listdir(opj(in_dir)) if "run" in f and f.endswith('denoised_bold.npy') and f"task-{task}" in f]
    n_runs = int(len(set(all_runs)) / 2)

    # sub-001 has deviating run numbers
    # if sub == "001":
    #     lower, upper = 13, 25
    # else:

    lower, upper = 1, n_runs+1

    if n_runs > 2:
        print(f"Loading in data from run {lower}-{n_runs} of task-{task}")
    else:
        print(f"Loading in data from run-{lower} of task-{task}")

    good_runs = np.arange(lower,upper)
    prf_tc_data = []
    for gr in good_runs:
        prf_tc_data.append(np.hstack([
            np.load(opj(in_dir, f'{out}_run-{gr}_space-fsnative_hemi-{hemi}_desc-denoised_bold.npy'))
        for hemi in ['L', 'R']]))
    m_prf_tc_data = np.median(np.array(prf_tc_data), 0)

    # vertices per hemi
    n_verts_per_hemi = [np.load(opj(in_dir, f'{out}_run-{gr}_space-{space}_hemi-{hemi}_desc-denoised_bold.npy')).shape[-1] for hemi in ['L', 'R']]
    # print(f"Nr of vertices in func data: {n_verts_per_hemi}")

    # check if this matches with FreeSurfer surfaces
    n_verts_fs = []
    for i in ['lh', 'rh']:
        surf = opj(os.environ['SUBJECTS_DIR'], f"sub-{sub}", 'surf', f'{i}.white')
        verts = nb.freesurfer.io.read_geometry(surf)[0].shape[0]
        n_verts_fs.append(verts)

    # print(f"Nr of vertices in FS data:   {n_verts_fs}")

    if n_verts_fs == n_verts_per_hemi:
        print("Vertex check ok!")
    else:
        raise ValueError(f"Mismatch between number of vertices in pRF-analysis ({n_verts_per_hemi}) and FreeSurfer ({n_verts_fs})..?\nYou're probably using an older surface reconstruction. Check if you've re-ran fMRIprep again with new FreeSurfer-segment")
        
    print("Saving avg-BOLD in .npy-files")
    np.save(opj(outputdir, f'{out}_desc-avg_bold_hemi-LR.npy'), m_prf_tc_data)
    np.save(opj(outputdir, f'{out}_desc-avg_bold_hemi-L.npy'), m_prf_tc_data[:,:n_verts_per_hemi[0]])
    np.save(opj(outputdir, f'{out}_desc-avg_bold_hemi-R.npy'), m_prf_tc_data[:,n_verts_per_hemi[0]:])

    # %%
    # Try to fetch a gifti-file to extract the repetition time from.. I'm not too happy with this solution, but I can't think of anything better atm.
    func_path = opj(os.environ['DIR_DATA_DERIV'], 'fmriprep', base_dir, 'func')
    func_file = utils.get_file_from_substring(f"run-{lower}_space-fsnative_hemi-L_bold.func.gii", func_path)

    if func_file != None:
        gifti = dataset.ParseGiftiFile(func_file)
        tr = gifti.TR_sec

        print(f"Func-file found; setting TR to {tr}")
    else:
        print("Could not find func-file, setting TR to 1.5; CHECK THIS!")
        tr = 1.5

    # %%
    # class pRFmodelFitting
    if grid_only:
        stage = "grid"
    else:
        stage = "grid+iter"

    modelling = prf.pRFmodelFitting(m_prf_tc_data.T, 
                                    design_matrix=design_matrix['stim'], 
                                    TR=tr, 
                                    model=model, 
                                    stage=stage, 
                                    verbose=True, 
                                    output_dir=outputdir,
                                    output_base=out,
                                    nr_jobs=25,
                                    write_files=True)
    modelling.fit()
    # %%
if __name__ == "__main__":
    main(sys.argv[1:])
