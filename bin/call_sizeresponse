#!/usr/bin/env python
#$ -j Y
#$ -cwd
#$ -V

from linescanning import (
    prf, 
    plotting)
import matplotlib.pyplot as plt
import numpy as np
import os
import sys, getopt
import warnings
warnings.filterwarnings('ignore')
np.set_printoptions(precision=3)
opj = os.path.join

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_sizeresponse

Find stimulus sizes that maximally stimulate either the activation pool or the normalization pool of
the target vertex. We fit a Divisive Normalization model, and derive the response curves in response 
to full field stimuli ('full'), growing stimulus size ('fill'), and growing hole size ('hole'). The 
'fill' stimuli are used to estimate the activation response, while the 'hole' stimuli probe the re-
sponse of the normalization pool. The response to the 'full' stimulus will be used to normalize the 
'fill' and 'hole' curves. Eventually, this will produce a file in the pycortex-folder containing the
normalization parameters, as well as the stimulus size to be used for the activation pool and normali-
zation pool. These values are read from the file in the 'ActNorm' experiment.
(see https://github.com/gjheij/LineExps/tree/main/ActNorm)

Parameters
----------
    -s|--sub    Subject name as defined in FreeSurfer directory
    -n|--ses    Session to use pRF-parameters from. Default assumes that we have a 'ses-1'-folder. 
                If this is not the case, use '-n none'. This will remove the 'ses'-indexer from the
                folder we'll be looking for parameters
    --lh|--rh   Process a single hemisphere, default is to loop through both
    --grid      Do not proceed to iterative fit after grid stage
    --deriv     Path to 'derivatives'-folder. From there, assume 'prf' and 'pycortex' folder. Loses
                the need to specify '--ctx' and '--prf'
    --ctx       Path to pycortex directory up to subject specific directories (defaults to <de-
                rivatives>/pycortex/<subject>
    --prf       Path to pRF directory up to subject specific directories (defaults to <deriva-
                tives/<prf>/<subject>/ses-<session>)
    --v1        use the normalization parameters from the V1-fit. Skips re-fitting, takes the target-
                vertex index from the full-brain fit. If not specified, the Gaussian parameters are
                read in, and a DN-model is fit from which the size-response curves are derived.

Returns
----------
    a *csv-file containing stimulus sizes
    a *pdf-file containing matplotlib figure

Example
----------
    call_sizeresponse -s sub-001 --ctx /path/pycortex --prf /path/prf
    call_sizeresponse -s sub-001
    qsub -N SR_001 -q $SGE_QUEUE_SHORT -wd $DIR_LOGS $DIR_SCRIPTS/bin/call_sizeresponse -s sub-001

---------------------------------------------------------------------------------------------------
    """

    subject     = None
    session     = 1
    hemi_list   = ['lh', 'rh']
    cx_dir      = None
    prf_dir     = None
    stage       = "iter"
    model       = "gauss"
    verbose     = False
    deriv       = os.environ.get("DIR_DATA_DERIV")
    v1_data     = False
    bv          = True
    v_target    = 0

    try:
        opts = getopt.getopt(argv,"vqs:n:h:m:l:d:",["help", "sub=", "deriv=", "lh", "rh", "ses=", "cx=", "prf=", "grid", "verbose", "v1"])[0]
    except getopt.GetoptError:
        print("ERROR IN ARGUMENT HANDLING!")
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ('-q', "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ('-v', "--verbose"):
            verbose=True
        elif opt in ("-s", "--sub"):
            subject = arg
        elif opt in ("-n", "--ses"):
            session = arg
        elif opt in ("--grid"):
            stage = "grid"
        elif opt in ("--lh"):
            hemi_list = ["lh"]
        elif opt in ("--rh"):
            hemi_list = ["rh"]
        elif opt in ("-d", "--deriv"):
            deriv = arg          
        elif opt in ("--cx"):
            cx_dir = arg
        elif opt in ("--prf"):
            prf_dir = arg 
        elif opt in ("--v1"):
            v1_data = True
            bv = False
            model = "norm"

    if len(argv) < 1:
        print("\nNEED AT LEAST A SUBJECT ID")
        print(main.__doc__)
        sys.exit()

    #---------------------------------------------------------------------------------------------------
    # set some defaults
    if not prf_dir or not cx_dir:
        if deriv:
            if isinstance(session, str):
                if session.lower() == "none":
                    ses = ""
                else:
                    raise ValueError(f"Unknown session type '{session}'. Must be an integer or 'none'")
            else:
                ses = f'ses-{session}'
                
            prf_dir = opj(os.environ.get('DIR_DATA_DERIV'), 'prf', subject, ses)
            cx_dir = opj(os.environ.get('DIR_DATA_DERIV'), 'pycortex', subject)

    if stage != "grid" and stage != "iter" and stage != "grid+iter":
        raise ValueError(f"Stage must be 'grid' or 'iter', not {stage}")

    for hemi in hemi_list:

        if verbose:
            print("\n---------------------------------------------------------------------------------------------------")
            print(f"Dealing with hemisphere: {hemi}")
        
        if hemi == "lh":
            hemi_tag = "hemi-L"
        elif hemi == "rh":
            hemi_tag = "hemi-R"

        #---------------------------------------------------------------------------------------------------
        # figure settings
        fig = plt.figure(constrained_layout=True, figsize=(24,5))
        subfigs = fig.subfigures(ncols=2, width_ratios=[4,1])
        gs00 = subfigs[0].subplots(ncols=3, gridspec_kw={"width_ratios": [10,20,10]})
        gs01 = subfigs[1].subplots(nrows=2)
        cols = ["#1B9E77","#D95F02"]
        
        #---------------------------------------------------------------------------------------------------
        # load in subject
        SI_ = prf.CollectSubject(
            subject, 
            prf_dir=prf_dir, 
            cx_dir=cx_dir, 
            hemi=hemi, 
            resize_pix=270,
            best_vertex=bv,
            verbose=verbose,
            model=model,
            v1=v1_data)

        if v1_data:
            if not hasattr(SI_, "target_vertex"):
                raise ValueError(f"Something doesn't add up.. You requested the normalization parameters from the V1-fit, but I cannot find the index of the target vertex. Did CollectSubject do what it was supposed to..?")
            v_target = SI_.target_vertex

            # add the shape of left hemisphere data to target in right hemisphere
            if hemi == "rh":
                v_target += SI_.func_data_l.shape[-1]
        
        # get the prf, timecourse, and prediction
        pars,prf_old,tc_bold,pred_old = SI_.plot_vox(
            vox_nr=v_target,
            model=model,
            stage="iter",
            make_figure=False)

        if not v1_data:
            # initiate class (saved data does not have volumes cut at the beginning)
            fitting = prf.pRFmodelFitting(
                tc_bold,
                design_matrix=SI_.design_matrix, 
                TR=SI_.settings['TR'], 
                model="norm", 
                stage=stage, 
                old_params=pars, 
                verbose=verbose,
                fix_bold_baseline=True,
                rsq_threshold=0,
                nr_jobs=1)

            # fit
            fitting.fit()

            # get new information from fitting object
            pars_new,prf_new,_,tc_new = fitting.plot_vox(
                model="norm",
                stage=stage,
                make_figure=False)
        
            if verbose:
                print(f"Params in: \t{[round(ii, 2) for ii in SI_.pars[0,...]]}")
                print(f"Params out: \t{[round(ii, 2) for ii in pars_new]}")

        else:
            pars_new = pars.copy()
            prf_new = prf_old.copy()
            tc_new = pred_old.copy()

            if verbose:
                print(f"Copying original parameters: {[round(ii, 2) for ii in pars]}")
        
        if np.all(pars_new == 0):
            raise ValueError("All parameters in 'new_params' are equal to zero..")

        #---------------------------------------------------------------------------------------------------
        # plot pRF output
        plotting.LazyPRF(
            prf_new, 
            [-5,5], 
            ax=gs00[0])  

        plotting.LazyPlot(
            [tc_bold, tc_new],
            xx=np.arange(0,tc_bold.shape[0],1)*SI_.TR,
            color=['#cccccc', 'r'], 
            labels=['real', 'pred'], 
            add_hline='default', 
            axs=gs00[1],
            y_label="amplitude",
            x_label="time (s)",
            line_width=[0.5, 3],
            markers=['.', None])

        #---------------------------------------------------------------------------------------------------
        # size response functions
        SR_ = prf.SizeResponse(params=pars_new, subject_info=SI_)
        
        if verbose:
            print("Making response-curves for 'full', 'fill', 'hole' stimuli")

        # full field stimulation
        sr_full = SR_.make_sr_function(
            center_prf=True, 
            dt="full", 
            normalize=None)

        # activation
        sr_act = SR_.make_sr_function(
            center_prf=True, 
            dt="fill", 
            normalize=sr_full)

        # suppression
        sr_suppr = SR_.make_sr_function(
            center_prf=True, 
            dt="hole", 
            normalize=sr_full)

        #---------------------------------------------------------------------------------------------------
        # get optimal stimulus size
        size_act = SR_.find_stim_sizes(sr_act, t="max", dt="fill")
        size_suppr = SR_.find_stim_sizes(sr_suppr, t="min", dt="hole")

        # make plot 
        plotting.LazyPlot(
            [sr_act,sr_suppr],
            axs=gs00[2],
            xx=SR_.stims_fill_sizes,
            line_width=2, 
            color=cols,
            labels=[f"act ({round(size_act,2)}dva)",f"suppr ({round(size_suppr,2)}dva)"],
            x_label="stimulus size",
            y_label="response",
            add_vline={
                "pos": [size_act,size_suppr],
                "color": cols},
            x_lim=[0,5],
            add_hline=0)

        for ix,ii in enumerate([size_act,size_suppr]):
            SR_.plot_stim_size(
                ii, 
                ax=gs01[ix], 
                dt=["fill","hole"][ix],
                clip=False, 
                cmap=cols[ix],
                vf_extent=SR_.vf_extent)

        plt.tight_layout()

        #---------------------------------------------------------------------------------------------------
        # finalize figure and save output
        fig.savefig(
            opj(cx_dir, f"{subject}_{hemi_tag}_desc-sizeresponse.svg"),
            dpi=300,
            bbox_inches="tight")
            
        SR_.save_target_params(
            hemi=hemi, 
            stim_sizes=[size_act,size_suppr])

    ff = opj(cx_dir, f"{subject}_model-norm_desc-best_vertices2.csv")
    print(f"Copy '{ff}' to the 'LineExps/data' folder")

if __name__ == "__main__":
    main(sys.argv[1:])
