#!/usr/bin/env python
#$ -j Y
#$ -cwd
#$ -V

from linescanning import utils, prf, plotting
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import os
import sys, getopt
import warnings
warnings.filterwarnings('ignore')
np.set_printoptions(precision=3)
opj = os.path.join

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_sizeresponse

Find stimulus sizes that allow optimal disentanglement of pRFs in superficial/deep layers and middle 
layers of the cortex. We know from earlier studies that pRF-sizes seem to be higher in superficial 
and deeper layers compared to middle layer pRFs. Here, we take for each subject the Gaussian pRF 
parameters, fit a Divisive Normalization model, compare the Size-Response curves for superficial/
deeper layers (= `regular` pRF size) and middle layers (= `0.8*pRF-size`), and extract the stimulus 
sizes where the differences between these to curves are largest.


Parameters
----------
    -s|--sub)   Subject name as defined in FreeSurfer directory
    -n|--ses)   Session to use pRF-parameters from. Default assumes that we have a 'ses-1'-folder. 
                If this is not the case, use '-n none'. This will remove the 'ses'-indexer from the
                folder we'll be looking for parameters
    --lh|--rh   Process a single hemisphere, default is to loop through both
    --grid      Do not proceed to iterative fit after grid stage
    --deriv     Path to 'derivatives'-folder. From there, assume 'prf' and 'pycortex' folder. Loses
                the need to specify '--ctx' and '--prf'
    --ctx       Path to pycortex directory up to subject specific directories (defaults to <de-
                rivatives>/pycortex/<subject>
    --prf       Path to pRF directory up to subject specific directories (defaults to <deriva-
                tives/<prf>/<subject>/ses-<session>)
    --adjust    The pRFs of some subjects are fitted before the BOLD screen was moved closer into
                the bore. With this flag, we can correct for the closer screen. This factor is 1.08
                and is applied to the x/y coordinates as well  as the size.
    --fraction  Define what fraction of the 'superficial' (input) pRF-size should define the 'middle'
                layer pRF. Default is 0.8, meaning we assume that the middle pRF is 20% smaller com-
                pared to the 'superficial' pRF. Maps to 'scale_factor' in:
                https://linescanning.readthedocs.io/en/latest/classes/prf.html#linescanning.prf.SizeResponse.make_sr_function

Returns
----------
    a *npy-file containing stimulus sizes
    a *pdf-file containing matplotlib figure

Example
----------
    call_sizeresponse -s sub-001 --ctx /path/pycortex --prf /path/prf
    call_sizeresponse -s sub-001
    qsub -N SR_001 -q $SGE_QUEUE_SHORT -wd $DIR_LOGS $DIR_SCRIPTS/bin/call_sizeresponse -s sub-001

---------------------------------------------------------------------------------------------------
    """

    subject     = None
    session     = 1
    hemi_list   = ['lh', 'rh']
    cx_dir      = None
    prf_dir     = None
    stage       = "iter"
    verbose     = False
    adjust      = False
    deriv       = os.environ.get("DIR_DATA_DERIV")
    fraction    = 0.8

    try:
        opts = getopt.getopt(argv,"vqs:n:h:m:l:d:",["help", "sub=", "deriv=", "lh", "rh", "ses=", "cx=", "prf=", "grid", "verbose", "adjust", "fraction="])[0]
    except getopt.GetoptError:
        print("ERROR IN ARGUMENT HANDLING!")
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ('-q', "--help"):
            print(main.__doc__)
            sys.exit()
        elif opt in ('-v', "--verbose"):
            verbose=True
        elif opt in ("-s", "--sub"):
            subject = arg
        elif opt in ("-n", "--ses"):
            session = arg
        elif opt in ("--grid"):
            stage = "grid"
        elif opt in ("--lh"):
            hemi_list = ["lh"]
        elif opt in ("--rh"):
            hemi_list = ["rh"]
        elif opt in ("-d", "--deriv"):
            deriv = arg
        elif opt in ("--cx"):
            cx_dir = arg
        elif opt in ("--prf"):
            prf_dir = arg
        elif opt in ("--adjust"):
            adjust = True 
        elif opt in ("--fraction"):
            fraction = float(fraction)                   

    if len(argv) < 1:
        print("\nNEED AT LEAST A SUBJECT ID")
        print(main.__doc__)
        sys.exit()

    #---------------------------------------------------------------------------------------------------
    # set some defaults
    if not prf_dir or not cx_dir:
        if deriv:
            if isinstance(session, str):
                if session.lower() == "none":
                    ses = ""
                else:
                    raise ValueError(f"Unknown session type '{session}'. Must be an integer or 'none'")
            else:
                ses = f'ses-{session}'

                
            prf_dir = opj(os.environ.get('DIR_DATA_DERIV'), 'prf', subject, ses)
            cx_dir = opj(os.environ.get('DIR_DATA_DERIV'), 'pycortex', subject)

    if stage != "grid" and stage != "iter" and stage != "grid+iter":
        raise ValueError(f"Stage must be 'grid' or 'iter', not {stage}")
    elif stage == "iter":
        stage = "grid+iter"

    for hemi in hemi_list:
        
        if hemi == "lh":
            hemi_tag = "hemi-L"
        elif hemi == "rh":
            hemi_tag = "hemi-R"

        #---------------------------------------------------------------------------------------------------
        # figure settings
        fig = plt.figure(constrained_layout=True, figsize=(30,5))
        gs00 = fig.add_gridspec(1,4, width_ratios=[10,20,10,10])
        gs01 = fig.add_gridspec(5,1, left=0.48, right=0.98)        

        #---------------------------------------------------------------------------------------------------
        # load in subject
        subject_info = prf.CollectSubject(subject, 
                                          prf_dir=prf_dir, 
                                          cx_dir=cx_dir, 
                                          hemi=hemi, 
                                          resize_pix=270,
                                          correct_screen=adjust,
                                          verbose=False)

        # make pRF plot
        ax1 = fig.add_subplot(gs00[0])
        plotting.LazyPRF(subject_info.prf_array, subject_info.settings['vf_extent'], ax=ax1)    

        # Get and plot fMRI signal
        search_bold = [f"{hemi_tag}_", "avg_bold", ".npy"]
        data_fn = utils.get_file_from_substring(search_bold, subject_info.prf_dir)

        if isinstance(data_fn, list):
            raise ValueError(f"Found multiple files with {search_bold} in '{subject_info.prf_dir}': \n{data_fn}")

        data = np.load(data_fn)[...,subject_info.return_target_vertex(hemi=hemi)]

        #---------------------------------------------------------------------------------------------------    
        # insert old parameters
        insert_params = np.array(subject_info.target_params)[np.newaxis,...]
        
        # initiate class
        fitting = prf.pRFmodelFitting(data[...,np.newaxis].T,
                                      design_matrix=subject_info.design_matrix, 
                                      TR=subject_info.settings['TR'], 
                                      model="norm", 
                                      stage=stage, 
                                      old_params=insert_params, 
                                      verbose=verbose, 
                                      output_dir=subject_info.prf_dir, 
                                      nr_jobs=1)
        
        # fit
        fitting.fit()

        if stage == "grid+iter":
            new_params = fitting.norm_iter[0]
        else:
            new_params = fitting.norm_grid[0]

        new_prediction = fitting.norm_model.return_prediction(*new_params[:-1]).T

        print(f"Params in: \t{[round(ii, 2) for ii in np.array(subject_info.target_params)]}")
        print(f"Params out: \t{[round(ii, 2) for ii in new_params]}")
        #---------------------------------------------------------------------------------------------------
        # plot pRF output
        ax2 = fig.add_subplot(gs00[1])
        plotting.LazyPlot([data, new_prediction],
                          xx=np.arange(0,data.shape[0],1)*fitting.TR,
                          color=['#cccccc', 'r'], 
                          labels=['real', 'pred'], 
                          add_hline='default', 
                          axs=ax2,
                          y_label="amplitude",
                          x_label="time (s)",
                          line_width=[0.5, 3],
                          markers=['.', None],                        
                          font_size=16)

        #---------------------------------------------------------------------------------------------------
        # size response functions
        SR = prf.SizeResponse(fitting.prf_stim, new_params, subject_info=subject_info)
        SR.make_stimuli()
        sr_curve1 = SR.make_sr_function(center_prf=True)
        sr_curve2 = SR.make_sr_function(center_prf=True, scale_factor=fraction)

        #---------------------------------------------------------------------------------------------------
        # make plot 
        ax3 = fig.add_subplot(gs00[2])
        plotting.LazyPlot([sr_curve1, sr_curve2], 
                          xx=SR.stims_fill_sizes,
                          color=["#1B9E77","#D95F02"], 
                          labels=['superficial', 'middle'],
                          axs=ax3,
                          y_label="Response",
                          x_label="Stimulus size (Â°)",
                          font_size=16)

        #---------------------------------------------------------------------------------------------------
        # find stim sizes
        use_stim_sizes = SR.find_stim_sizes(sr_curve1, sr_curve2)
        for ix,ii in enumerate(use_stim_sizes):
            ax3.axvline(ii, color='k', lw=2, ymin=0.05, ymax=0.1)

            # plot actual stimuli too
            ax = fig.add_subplot(gs01[ix])
            stim_ix = utils.find_nearest(SR.stims_fill_sizes, ii)[0]
            cmap_blue = utils.make_binary_cm((8,178,240))

            im = ax.imshow(SR.stims_fill[stim_ix], extent=subject_info.settings['vf_extent']+subject_info.settings['vf_extent'], cmap=cmap_blue)
            ax.axvline(0, color='k', linestyle='dashed', lw=0.5)
            ax.axhline(0, color='k', linestyle='dashed', lw=0.5)
            ax.axis('off')
            patch = patches.Circle((0,0), radius=subject_info.settings['vf_extent'][-1], transform=ax.transData)
            im.set_clip_path(patch)

        #---------------------------------------------------------------------------------------------------
        # finalize figure and save output
        fig.tight_layout(rect=[0, 0, 0.91, 1])
        fig.savefig(opj(cx_dir, f"{subject}_{hemi_tag}_desc-prf_sizeresponse.pdf"))
        SR.save_target_params(hemi=hemi, stim_sizes=use_stim_sizes)

    ff = opj(cx_dir, f"{subject}_model-norm_desc-best_vertices.csv")
    print(f"Copy '{ff}' to the 'LineExps/data' folder")

if __name__ == "__main__":
    main(sys.argv[1:])
