#!/usr/bin/env python
from linescanning import (
    prf,
    utils
)
import sys, getopt
import os
import numpy as np
import nibabel as nb
np.set_printoptions(precision=3, suppress=True)
opj = os.path.join

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_prfinfo

Fetch pRF-information about a given vertex. Fetches the information from *desc-prf_params.npy in 
the derivatives/prf/<subject> folder

Parameters
----------
    -s|--subject <subj name>    subject ID (e.g., sub-001)
    -v|--vertex  <vertex>       vertex to extract information from
    --lh|--rh                   find estimates for a given hemisphere; default = 'lh'
    -d|--prfdir <prf dir>       path to pRF-directory; will default to derivatives/prf/<subject>
    -p|--prf <prf_file>         if left empty, will default to derivatives/prf/<subject>/<ses-1>/
                                model-norm_*desc-prf_params.npy
    --gauss                     Look for gaussian parameters instead of DN-parameters
    --css                       Look for CSS parameters instead of DN-parameters
    --dog                       Look for DoG parameters instead of DN-parameters
    --grid                      Look for grid fit parameters, rather than iterative fit
                                parameters
    --plot                      create a plot of the pRF+timecourse+prediction
    --verbose                   print some extra information to the terminal
    --v1                        use V1-only data

Returns
----------
    array of pRF-parameters of requested vertex

Example
----------
    call_prfinfo -s sub-001 -v 3386 -h lh

---------------------------------------------------------------------------------------------------
    """

    subject     = None
    vertex      = None
    prf_info    = None
    prf_dir     = None
    hemi        = 'lh'
    model       = "norm"
    stage       = "iter"
    plot        = False
    verbose     = False
    v1_data     = False

    try:
        opts = getopt.getopt(argv,"qs:v:p:h:d:",["subject=", "prfdir=", "vertex=", "prf=", "lh", "rh", "gauss", "grid", "css", "dog", "norm", "plot", "verbose", "v1"])[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-q':
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--subject"):
            subject = arg
        elif opt in ("-v", "--vertex"):
            vertex = int(arg)
        elif opt in ("-d", "--prfdir"):
            prf_dir = int(arg)
        elif opt in ("-p", "--prf"):
            prf_info = arg  
        elif opt in ("--lh"):
            hemi = "lh"
        elif opt in ("--rh"):
            hemi = "rh"
        elif opt in ("--gauss"):
            model = "gauss"     
        elif opt in ("--norm"):
            model = "norm"   
        elif opt in ("--css"):
            model = "css"   
        elif opt in ("--dog"):
            model = "dog"                                       
        elif opt in ("--grid"):
            stage = "grid"
        elif opt in ("--plot"):
            plot = True
        elif opt in ("--verbose"):
            verbose = True     
        elif opt in ("--v1"):
            v1_data = True                     

    if len(argv) < 1:
        print("\nNEED AT LEAST A SUBJECT ID")
        print(main.__doc__)
        sys.exit()

    if not prf_dir:
        prf_dir = opj(os.environ['PRF'], subject, 'ses-1')

    if not prf_info:
        search_for = [f'model-{model}', stage, "desc-prf_params.pkl"]
        if v1_data:
            search_for += ["_roi-V1"]
            exclude = None
        else:
            exclude = "_roi-V1"

        prf_info = utils.get_file_from_substring(search_for, prf_dir, exclude=exclude)
    
    if isinstance(prf_info, list):
        raise ValueError(f"A list of files was specified.. {prf_info}")
    
    print(f"Reading from '{prf_info}'")
    info = prf.Parameters(prf_info, model=model).to_df()

    search_data = ["hemi-L_", "avg_bold", ".npy"]
    if v1_data:
        search_data += ["_roi-V1"]
        exclude = None
    else:
        exclude = "_roi-V1"

    if hemi == "rh":
        tag = "hemi-R"
        txt = ""

        surf = opj(os.environ.get('SUBJECTS_DIR'), subject, 'surf', 'lh.white')
        n_vert = nb.freesurfer.io.read_geometry(surf)[0].shape[0]

        # we got rh.white vertex ID, correct for whole-brain vertex IDs
        if vertex < n_vert:
            txt = f"(target [{vertex}] + shape lh.white [{n_vert}])"
            vertex += n_vert
        
    else:
        tag = "hemi-L"
        txt = ""

    vert_info = info.iloc[vertex,:]
    print(f"pRF parameters ID: {vertex} {txt}")
    for ii in list(vert_info.keys()):
        print(f' {ii:20}{round(vert_info[ii],2)}')

    if plot:

        # get data
        search_data = ["hemi-LR_", "avg_bold"]
        if v1_data:
            search_data += ["_roi-V1"]
            exclude = None
        else:
            exclude = "_roi-V1"

        data = utils.get_file_from_substring(search_data, prf_dir, exclude=exclude)
        data = prf.read_par_file(data)

        # get design
        design = utils.get_file_from_substring(["design", "mat"], prf_dir)
        design = prf.read_par_file(design)        
    
        # load object
        obj = prf.pRFmodelFitting(
            data.T,
            design_matrix=design,
            verbose=verbose)

        obj.load_params(prf_info, model=model, stage=stage)

        # compile output name for figures
        base = f"{subject}"
        comps = utils.split_bids_components(prf_info)

        for it in ["ses","task","acq"]:
            if it in list(comps.keys()):
                base += f"_{it}-{comps[it]}"
    
        fname = opj(prf_dir, f"{base}_{tag}_vox-{vertex}_model-{model}_stage-{stage}.svg")
        # make plot
        obj.plot_vox(
            vox_nr=vertex,
            model=model,
            stage=stage,
            axis_type="time",
            resize_pix=270,
            title="pars",
            save_as=fname)        

if __name__ == "__main__":
    main(sys.argv[1:])
