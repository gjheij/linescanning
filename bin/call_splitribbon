#!/usr/bin/env python

import os
from nilearn import image
import nibabel as nb
from linescanning.image import mgz2nii
import numpy as np
import sys
opj = os.path.join

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_splitribbon

Split FreeSurfer's ribbon into its gray/white matter parts.

Args:
    <subject>       subject ID as used in the FreeSurfer directory
    <output>        basename output for CRUISE's segmentations + FULL path! ("_desc-ribbon_?.nii.gz")
                    will be appended

Example:
    call_splitribbon  sub-001 /derivatives/sub-999/ses-1/sub-999_desc-ribbon_?.nii.gz

---------------------------------------------------------------------------------------------------
    """

    subject   = None
    output    = None

    if len(argv) < 2:
        print("\nNEED AT LEAST A SUBJECT ID")
        print(main.__doc__)
        sys.exit()

    subject  = argv[0]
    output   = argv[1]

    if not os.path.exists(os.path.dirname(output)):
        os.makedirs(os.path.dirname(output), exist_ok=True)

    ribbon_mgz = opj(os.environ['SUBJECTS_DIR'], subject, 'mri', 'ribbon.mgz')
    ribbon_nii = mgz2nii(ribbon_mgz)

    segmentation = nb.load(ribbon_nii)
    segmentation_data = segmentation.get_fdata().astype(int)

    # create an empty image with same dimensions
    wm_segmentation = np.zeros_like(segmentation_data)
    gm_segmentation = np.zeros_like(segmentation_data)
    cortex_mask = np.zeros_like(segmentation_data)

    # switch values
    gm_segmentation[segmentation_data == 42] = 1
    gm_segmentation[segmentation_data == 3] = 1
    wm_segmentation[segmentation_data == 41] = 1
    wm_segmentation[segmentation_data == 2] = 1

    cortex_mask[gm_segmentation == 1] = 1
    cortex_mask[wm_segmentation == 1] = 1

    nb.Nifti1Image(wm_segmentation, affine=segmentation.affine, header=segmentation.header).to_filename(output + "_desc-ribbon_wm.nii.gz")
    nb.Nifti1Image(gm_segmentation, affine=segmentation.affine, header=segmentation.header).to_filename(output + "_desc-ribbon_gm.nii.gz")
    nb.Nifti1Image(cortex_mask, affine=segmentation.affine, header=segmentation.header).to_filename(output + "_desc-ribbon_mask.nii.gz")

if __name__ == "__main__":
    main(sys.argv[1:])
