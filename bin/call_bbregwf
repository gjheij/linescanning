#!/usr/bin/env python
#$ -j Y
#$ -cwd
#$ -V

import mkl
mkl.set_num_threads=1

import os
import sys
import getopt
from linescanning import (
    fmriprep,
    transform,
    utils)
import shutil
opj = os.path.join
opd = os.path.dirname

def main(argv):

    """
---------------------------------------------------------------------------------------------------
call_bbregwf

This script runs from-T1w_to-bold registration with `bbregister`. This means that the input image
needs to be more or less in this space already. Because this script is tailored for partial FOV
images, we'll initialize on the header instead of registration (this fails horrendously). If your
BOLD image is from the same session from which the FreeSurfer output is generated, you will be fine.
If not, you need to do the following:
  1)  create a bold reference image with ``call_antsreference``. This will allow you to retain the 
      resolution while applying warps (not sure why, but it works..)
  2)  apply the transformation mapping one session to the other using this newly created image as
      reference image (this retains resolution of original file)
  3)  run ``call_bbregwf`` with the output of 2) to refine registration
  4)  concatenate the transformation mapping session to session and the refining transformation 
      into a single ``from-bold_to-T1w``-transformation file.

Parameters
----------
  -s|--sub      subject ID; together with `session`, used to reconstruct a default `workdir` if
                none is specified. Defaults to `DIR_DATA_SOURCE/<subject>/<session>/single_sub-
                ject_<sub_id>_wf/func_preproc_<ses>_<task>_<run>_<acq>_wf`. Subject is also requi-
                red for the Freesurfer identification; if not specified, we'll try to read if from
                the input file with :func:`linescanning.utils.split_bids_components`. This requi-
                res your input to be BIDS-valid!
  -n|--ses      session ID; together with `subject`, used to reconstruct a default `workdir` if
                none is specified. Defaults to `DIR_DATA_SOURCE/<subject>/<session>/single_sub-
                ject_<sub_id>_wf/func_preproc_<ses>_<task>_<run>_<acq>_wf` 
  -b|--bids     BIDS-root. If you want the confounds for the output from 'call_topup', you can
                leave this empty, as it'll default to 'DIR_DATA_DERIV/fmriprep'                  
  -i|--in       input bold image (ideally the output from 'call_topup')
  -w|--work     working directory where fMRIPrep's intermediate files are stored; default is some 
                folder in /tmp. You can specify the folder that was used in 'call_topup' so that
                all outputs are stored in the same directory. If nothing is specified, we'll try
                to compile the directory name from the input name, subject/session, and DIR_DATA-
                _SOURCE. So, if all goes well, this will result in `DIR_DATA_SOURCE/<subject>/<ses-
                sion>/single_subject_<sub_id>_wf/func_preproc_<ses>_<task>_<run>_<acq>_wf`
  -o|--out      output directory for final matrices; if nothing is specified, we'll default to the
                directory of the input file
  --cpu         nr of cpus to use (defaults to 1)

Example
----------
>>> call_bbregwf -s sub-01 --in sub-008_ses-2_task-SRFi_acq-3DEPI_run-1_desc-bold_ref.nii.gz

---------------------------------------------------------------------------------------------------
"""

    subject = None
    session = None
    bold_file = None
    workdir = None
    cpus = 1
    init = "header"
    output_dir = None
    dof = 6
    ref = None
    tfm = None
    invert = 0
    interp = "lin" # Linear
    verbose = False

    try:
        opts = getopt.getopt(argv,"hs:n:i:w:b:o:",["help", "bids=", "sub=", "ses=", "in=", "work=", "cpu=", "init=", "out=", "tfm=", "ref=", "verbose"])[0]
    except getopt.GetoptError:
        print("ERROR while reading arguments; did you specify an illegal argument?")
        print(main.__doc__)
        sys.exit(2)
    
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-s", "--sub"):
            subject = arg
        elif opt in ("-n", "--ses"):
            session = int(arg)
        elif opt in ("-i", "--in"):
            bold_file = os.path.abspath(arg)
        elif opt in ("-o", "--out"):
            output_dir = arg            
        elif opt in ("-w", "--work"):
            workdir = arg
        elif opt in ("--cpu"):
            cpus = int(arg)
        elif opt in ("--init"):
            init = arg  
        elif opt in ("--dof"):
            dof = int(arg)
        elif opt in ("--ref"):
            ref = arg          
        elif opt in ("--tfm"):
            tfm = arg
        elif opt in ("--invert"):
            invert = int(arg)
        elif opt in ("--interp"):
            interp = arg
        elif opt in ("--verbose"):
            verbose = True

    if len(argv) < 1:
        print(main.__doc__)
        sys.exit()

    # try to derive output directory parts from input file if no output directory was specified
    if not isinstance(output_dir, str):
        output_dir = opd(bold_file)
    
    # make output_dir
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # need a subject ID for FreeSurfer
    if not isinstance(subject, str):
        try:
            bids_comps = utils.split_bids_components(os.path.basename(bold_file))
            subject = f"sub-{bids_comps['sub']}"
        except:
            raise ValueError(f"Please specify subject ID with '-s|--sub'")

    # check if we should apply initial registration
    concat = False
    in_file = bold_file
    reg_ref = None
    if isinstance(tfm, str):
        concat = True
        if isinstance(ref, str):
            if os.path.exists(ref):

                # define output
                output = bold_file.split('.')[0]+"_tmp.nii.gz"
                if not os.path.exists(opd(output)):
                    os.makedirs(opd(output), exist_ok=True)

                reg_ref = transform.ants_applytrafo(
                    ref, 
                    bold_file, 
                    trafo=tfm, 
                    invert=invert, 
                    interp=interp, 
                    output=output,
                    return_type="file", 
                    verbose=verbose)

                # set registered file as bold_file
                in_file = reg_ref
            else:
                raise FileNotFoundError(f"Reference file '{ref}' does not exist..")
        else:
            raise TypeError(f"reference must be a string, not '{type(ref)}'")
    
    # set default work directory
    if not isinstance(workdir, str):

        # read BIDS components
        bids_comps = utils.split_bids_components(os.path.basename(bold_file))

        # try to read subject ID from file
        if not isinstance(subject, str):
            try:
                subject = f"sub-{bids_comps['sub']}"
            except:
                raise ValueError(f"Could not derive subject ID from {os.path.basename(bold_file)}. Change the filename or specifiy subject ID with '--sub <subject>'")
            
        # define base directory if subject/session is specified
        base_dir = ""
        if isinstance(subject, str):
            base_dir+=subject

        if 'ses' in list(bids_comps.keys()):
            base_dir = opj(base_dir, f"ses-{bids_comps['ses']}")

        # assemble workflow name
        wf = utils.assemble_fmriprep_wf(bold_file)
        
        # combine
        workdir = opj(os.environ.get('DIR_DATA_SOURCE'), base_dir, wf)

        # make it
        if not os.path.exists(workdir):
            os.makedirs(workdir)

    # init wf
    wf = fmriprep.bold_reg_wf(
        subject, 
        in_file, 
        workdir=workdir,
        omp_nthreads=cpus,
        use_bbr=True,
        bold2t1w_init=init,
        bold2t1w_dof=dof)
    
    # run wf
    wf.run()

    # move tfm files to output_dir
    tfm_files = utils.FindFiles(workdir, extension="tfm").files

    # get bids components to derive output name
    try_bids = True
    try:
        bids_comps = utils.split_bids_components(os.path.basename(bold_file))
    except:
        try_bids = False
    
    # check if the search resulted in files
    if len(tfm_files) > 0:

        # check if we should concatenate with specified trafo
        if concat:

            # ses1 to ses2 > only return from-T1w_to-bold (inv)
            if invert == 1:
                src = utils.get_file_from_substring("inv", tfm_files)
                utils.verbose(f"Concatenating inverse transform '{tfm}' with '{src}'", verbose)
                tfms = [src,tfm]
                out_tag = "T1w_to-bold"
            else:
                src = utils.get_file_from_substring("fwd", tfm_files)
                utils.verbose(f"Concatenating forward transform '{tfm}' with '{src}'", verbose)                
                tfms = [tfm, src]
                out_tag = "bold_to-T1w"

            # combine in 1 txt-file
            itk_outs = []
            for ix,ff in enumerate(tfms):
                tf_txt = "#Transform %d\n" % ix
                if ff.endswith(".mat"):
                    out_ = ff.split('.')[0]+'.txt'
                    cmd = f"ConvertTransformFile 3 {ff} {out_}"
                    os.system(cmd)
                else:
                    out_ = ff
                
                with open(out_) as itkfh:
                    tf_txt += "".join(itkfh.readlines()[2:])
                
                itk_outs.append((ix,tf_txt))
            
            # make itk txt file
            tfms = "#Insight Transform File V1.0\n" + "".join(
                [el[1] for el in sorted(itk_outs)]
            )

            if try_bids:
                base_name = []
                for ii in ["sub","ses","task","acq","run"]:
                    if ii in list(bids_comps.keys()):
                        base_name.append(f"{ii}-{bids_comps[ii]}")
                
                if len(base_name) > 0:
                    base_name = "_".join(base_name)

                # target file
                trg = opj(output_dir, f"{base_name}_from-{out_tag}_mode-image_xfm.txt")
            else:
                trg = opj(output_dir, os.path.basename(src))

            with open(trg, "w") as f:
                f.write(tfms) 
            utils.verbose(f"Wrote '{trg}'", verbose)

        else:
            for tag,out in zip(["fwd","inv"],["bold_to-T1w","T1w_to-bold"]):
                
                # source file
                src = utils.get_file_from_substring(tag, tfm_files)

                if try_bids:
                    base_name = []
                    for ii in ["sub","ses","task","acq","run"]:
                        if ii in list(bids_comps.keys()):
                            base_name.append(f"{ii}-{bids_comps[ii]}")
                    
                    if len(base_name) > 0:
                        base_name = "_".join(base_name)

                    # target file
                    trg = opj(output_dir, f"{base_name}_from-{out}_mode-image_xfm.txt")
                else:
                    trg = opj(output_dir, os.path.basename(src))

                shutil.copyfile(src, trg)
            
    else:
        raise ValueError(f"Could not find 'tfm'-files in '{workdir}'")
    
    # clean up
    if isinstance(reg_ref, str):
        os.remove(reg_ref)

if __name__ == "__main__":
    main(sys.argv[1:])
